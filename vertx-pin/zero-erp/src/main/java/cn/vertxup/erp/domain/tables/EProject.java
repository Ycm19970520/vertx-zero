/*
 * This file is generated by jOOQ.
 */
package cn.vertxup.erp.domain.tables;


import cn.vertxup.erp.domain.Db;
import cn.vertxup.erp.domain.Keys;
import cn.vertxup.erp.domain.tables.records.EProjectRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class EProject extends TableImpl<EProjectRecord> {

    /**
     * The reference instance of <code>DB_ETERNAL.E_PROJECT</code>
     */
    public static final EProject E_PROJECT = new EProject();
    private static final long serialVersionUID = 1L;
    /**
     * The column <code>DB_ETERNAL.E_PROJECT.KEY</code>. 「key」- 项目ID
     */
    public final TableField<EProjectRecord, String> KEY = createField(DSL.name("KEY"), SQLDataType.VARCHAR(36).nullable(false), this, "「key」- 项目ID");
    /**
     * The column <code>DB_ETERNAL.E_PROJECT.NAME</code>. 「name」- 项目名称
     */
    public final TableField<EProjectRecord, String> NAME = createField(DSL.name("NAME"), SQLDataType.VARCHAR(255), this, "「name」- 项目名称");
    /**
     * The column <code>DB_ETERNAL.E_PROJECT.CODE</code>. 「code」- 项目编号
     */
    public final TableField<EProjectRecord, String> CODE = createField(DSL.name("CODE"), SQLDataType.VARCHAR(255), this, "「code」- 项目编号");
    /**
     * The column <code>DB_ETERNAL.E_PROJECT.TYPE</code>. 「type」-
     * 项目分类（不同类型代表不同项目）
     */
    public final TableField<EProjectRecord, String> TYPE = createField(DSL.name("TYPE"), SQLDataType.VARCHAR(36), this, "「type」- 项目分类（不同类型代表不同项目）");
    /**
     * The column <code>DB_ETERNAL.E_PROJECT.STATUS</code>. 「status」- 项目状态
     */
    public final TableField<EProjectRecord, String> STATUS = createField(DSL.name("STATUS"), SQLDataType.VARCHAR(36), this, "「status」- 项目状态");
    /**
     * The column <code>DB_ETERNAL.E_PROJECT.TITLE</code>. 「title」- 主单业务标题
     */
    public final TableField<EProjectRecord, String> TITLE = createField(DSL.name("TITLE"), SQLDataType.VARCHAR(1024), this, "「title」- 主单业务标题");
    /**
     * The column <code>DB_ETERNAL.E_PROJECT.ICON</code>. 「icon」- 项目图标
     */
    public final TableField<EProjectRecord, String> ICON = createField(DSL.name("ICON"), SQLDataType.VARCHAR(255), this, "「icon」- 项目图标");
    /**
     * The column <code>DB_ETERNAL.E_PROJECT.DESCRIPTION</code>. 「description」-
     * 主单描述内容
     */
    public final TableField<EProjectRecord, String> DESCRIPTION = createField(DSL.name("DESCRIPTION"), SQLDataType.CLOB, this, "「description」- 主单描述内容");
    /**
     * The column <code>DB_ETERNAL.E_PROJECT.LEAD_BY</code>. 「leadBy」- 项目经理
     */
    public final TableField<EProjectRecord, String> LEAD_BY = createField(DSL.name("LEAD_BY"), SQLDataType.VARCHAR(36), this, "「leadBy」- 项目经理");
    /**
     * The column <code>DB_ETERNAL.E_PROJECT.METADATA</code>. 「metadata」- 附加配置
     */
    public final TableField<EProjectRecord, String> METADATA = createField(DSL.name("METADATA"), SQLDataType.CLOB, this, "「metadata」- 附加配置");
    /**
     * The column <code>DB_ETERNAL.E_PROJECT.ACTIVE</code>. 「active」- 是否启用
     */
    public final TableField<EProjectRecord, Boolean> ACTIVE = createField(DSL.name("ACTIVE"), SQLDataType.BIT, this, "「active」- 是否启用");
    /**
     * The column <code>DB_ETERNAL.E_PROJECT.SIGMA</code>. 「sigma」- 统一标识（项目所属应用）
     */
    public final TableField<EProjectRecord, String> SIGMA = createField(DSL.name("SIGMA"), SQLDataType.VARCHAR(32), this, "「sigma」- 统一标识（项目所属应用）");
    /**
     * The column <code>DB_ETERNAL.E_PROJECT.LANGUAGE</code>. 「language」- 使用的语言
     */
    public final TableField<EProjectRecord, String> LANGUAGE = createField(DSL.name("LANGUAGE"), SQLDataType.VARCHAR(8), this, "「language」- 使用的语言");
    /**
     * The column <code>DB_ETERNAL.E_PROJECT.CREATED_AT</code>. 「createdAt」-
     * 创建时间
     */
    public final TableField<EProjectRecord, LocalDateTime> CREATED_AT = createField(DSL.name("CREATED_AT"), SQLDataType.LOCALDATETIME(0), this, "「createdAt」- 创建时间");
    /**
     * The column <code>DB_ETERNAL.E_PROJECT.CREATED_BY</code>. 「createdBy」- 创建人
     */
    public final TableField<EProjectRecord, String> CREATED_BY = createField(DSL.name("CREATED_BY"), SQLDataType.VARCHAR(36), this, "「createdBy」- 创建人");
    /**
     * The column <code>DB_ETERNAL.E_PROJECT.UPDATED_AT</code>. 「updatedAt」-
     * 更新时间
     */
    public final TableField<EProjectRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("UPDATED_AT"), SQLDataType.LOCALDATETIME(0), this, "「updatedAt」- 更新时间");
    /**
     * The column <code>DB_ETERNAL.E_PROJECT.UPDATED_BY</code>. 「updatedBy」- 更新人
     */
    public final TableField<EProjectRecord, String> UPDATED_BY = createField(DSL.name("UPDATED_BY"), SQLDataType.VARCHAR(36), this, "「updatedBy」- 更新人");

    private EProject(Name alias, Table<EProjectRecord> aliased) {
        this(alias, aliased, null);
    }

    private EProject(Name alias, Table<EProjectRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>DB_ETERNAL.E_PROJECT</code> table reference
     */
    public EProject(String alias) {
        this(DSL.name(alias), E_PROJECT);
    }

    /**
     * Create an aliased <code>DB_ETERNAL.E_PROJECT</code> table reference
     */
    public EProject(Name alias) {
        this(alias, E_PROJECT);
    }

    /**
     * Create a <code>DB_ETERNAL.E_PROJECT</code> table reference
     */
    public EProject() {
        this(DSL.name("E_PROJECT"), null);
    }

    public <O extends Record> EProject(Table<O> child, ForeignKey<O, EProjectRecord> key) {
        super(child, key, E_PROJECT);
    }

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EProjectRecord> getRecordType() {
        return EProjectRecord.class;
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Db.DB_ETERNAL;
    }

    @Override
    public UniqueKey<EProjectRecord> getPrimaryKey() {
        return Keys.KEY_E_PROJECT_PRIMARY;
    }

    @Override
    public List<UniqueKey<EProjectRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_E_PROJECT_CODE);
    }

    @Override
    public EProject as(String alias) {
        return new EProject(DSL.name(alias), this);
    }

    @Override
    public EProject as(Name alias) {
        return new EProject(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public EProject rename(String name) {
        return new EProject(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public EProject rename(Name name) {
        return new EProject(name, null);
    }

    // -------------------------------------------------------------------------
    // Row17 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row17<String, String, String, String, String, String, String, String, String, String, Boolean, String, String, LocalDateTime, String, LocalDateTime, String> fieldsRow() {
        return (Row17) super.fieldsRow();
    }
}
