/*
 * This file is generated by jOOQ.
 */
package cn.vertxup.erp.domain.tables.interfaces;


import io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo;

import java.io.Serializable;
import java.time.LocalDateTime;

import static io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo.setOrThrow;

/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public interface IEJobLog extends VertxPojo, Serializable {

    /**
     * Setter for <code>DB_ETERNAL.E_JOB_LOG.KEY</code>. 「key」- 记录主键
     */
    public IEJobLog setKey(String value);

    /**
     * Getter for <code>DB_ETERNAL.E_JOB_LOG.KEY</code>. 「key」- 记录主键
     */
    public String getKey();

    /**
     * Setter for <code>DB_ETERNAL.E_JOB_LOG.NAME</code>. 「name」- 记录名称
     */
    public IEJobLog setName(String value);

    /**
     * Getter for <code>DB_ETERNAL.E_JOB_LOG.NAME</code>. 「name」- 记录名称
     */
    public String getName();

    /**
     * Setter for <code>DB_ETERNAL.E_JOB_LOG.SERIAL</code>. 「serial」- 记录序号
     */
    public IEJobLog setSerial(String value);

    /**
     * Getter for <code>DB_ETERNAL.E_JOB_LOG.SERIAL</code>. 「serial」- 记录序号
     */
    public String getSerial();

    /**
     * Setter for <code>DB_ETERNAL.E_JOB_LOG.TYPE</code>. 「type」- 记录类型：考勤 / 培训 /
     * 休假 / 驻场等
     */
    public IEJobLog setType(String value);

    /**
     * Getter for <code>DB_ETERNAL.E_JOB_LOG.TYPE</code>. 「type」- 记录类型：考勤 / 培训 /
     * 休假 / 驻场等
     */
    public String getType();

    /**
     * Setter for <code>DB_ETERNAL.E_JOB_LOG.COMMENT</code>. 「comment」- 记录备注
     */
    public IEJobLog setComment(String value);

    /**
     * Getter for <code>DB_ETERNAL.E_JOB_LOG.COMMENT</code>. 「comment」- 记录备注
     */
    public String getComment();

    /**
     * Setter for <code>DB_ETERNAL.E_JOB_LOG.LOG_AT</code>. 「logAt」- 记录时间
     */
    public IEJobLog setLogAt(LocalDateTime value);

    /**
     * Getter for <code>DB_ETERNAL.E_JOB_LOG.LOG_AT</code>. 「logAt」- 记录时间
     */
    public LocalDateTime getLogAt();

    /**
     * Setter for <code>DB_ETERNAL.E_JOB_LOG.LOG_BY</code>. 「logBy」-
     * 记录人（只能自己记录，所以记录人就是所属人）
     */
    public IEJobLog setLogBy(String value);

    /**
     * Getter for <code>DB_ETERNAL.E_JOB_LOG.LOG_BY</code>. 「logBy」-
     * 记录人（只能自己记录，所以记录人就是所属人）
     */
    public String getLogBy();

    /**
     * Setter for <code>DB_ETERNAL.E_JOB_LOG.LOG_NAME</code>. 「logName」- 记录人姓名
     */
    public IEJobLog setLogName(String value);

    /**
     * Getter for <code>DB_ETERNAL.E_JOB_LOG.LOG_NAME</code>. 「logName」- 记录人姓名
     */
    public String getLogName();

    /**
     * Setter for <code>DB_ETERNAL.E_JOB_LOG.TODO_ID</code>. 「todoId」-
     * 所属Todo主键，关联到主任务！
     */
    public IEJobLog setTodoId(String value);

    /**
     * Getter for <code>DB_ETERNAL.E_JOB_LOG.TODO_ID</code>. 「todoId」-
     * 所属Todo主键，关联到主任务！
     */
    public String getTodoId();

    /**
     * Setter for <code>DB_ETERNAL.E_JOB_LOG.COMPANY_ID</code>. 「companyId」-
     * 所属公司
     */
    public IEJobLog setCompanyId(String value);

    /**
     * Getter for <code>DB_ETERNAL.E_JOB_LOG.COMPANY_ID</code>. 「companyId」-
     * 所属公司
     */
    public String getCompanyId();

    /**
     * Setter for <code>DB_ETERNAL.E_JOB_LOG.STATUS</code>. 「status」- 记录状态
     */
    public IEJobLog setStatus(String value);

    /**
     * Getter for <code>DB_ETERNAL.E_JOB_LOG.STATUS</code>. 「status」- 记录状态
     */
    public String getStatus();

    /**
     * Setter for <code>DB_ETERNAL.E_JOB_LOG.METADATA</code>. 「metadata」- 附加配置
     */
    public IEJobLog setMetadata(String value);

    /**
     * Getter for <code>DB_ETERNAL.E_JOB_LOG.METADATA</code>. 「metadata」- 附加配置
     */
    public String getMetadata();

    /**
     * Setter for <code>DB_ETERNAL.E_JOB_LOG.ACTIVE</code>. 「active」- 是否启用
     */
    public IEJobLog setActive(Boolean value);

    /**
     * Getter for <code>DB_ETERNAL.E_JOB_LOG.ACTIVE</code>. 「active」- 是否启用
     */
    public Boolean getActive();

    /**
     * Setter for <code>DB_ETERNAL.E_JOB_LOG.SIGMA</code>. 「sigma」- 统一标识
     */
    public IEJobLog setSigma(String value);

    /**
     * Getter for <code>DB_ETERNAL.E_JOB_LOG.SIGMA</code>. 「sigma」- 统一标识
     */
    public String getSigma();

    /**
     * Setter for <code>DB_ETERNAL.E_JOB_LOG.LANGUAGE</code>. 「language」- 使用的语言
     */
    public IEJobLog setLanguage(String value);

    /**
     * Getter for <code>DB_ETERNAL.E_JOB_LOG.LANGUAGE</code>. 「language」- 使用的语言
     */
    public String getLanguage();

    /**
     * Setter for <code>DB_ETERNAL.E_JOB_LOG.CREATED_AT</code>. 「createdAt」-
     * 创建时间
     */
    public IEJobLog setCreatedAt(LocalDateTime value);

    /**
     * Getter for <code>DB_ETERNAL.E_JOB_LOG.CREATED_AT</code>. 「createdAt」-
     * 创建时间
     */
    public LocalDateTime getCreatedAt();

    /**
     * Setter for <code>DB_ETERNAL.E_JOB_LOG.CREATED_BY</code>. 「createdBy」- 创建人
     */
    public IEJobLog setCreatedBy(String value);

    /**
     * Getter for <code>DB_ETERNAL.E_JOB_LOG.CREATED_BY</code>. 「createdBy」- 创建人
     */
    public String getCreatedBy();

    /**
     * Setter for <code>DB_ETERNAL.E_JOB_LOG.UPDATED_AT</code>. 「updatedAt」-
     * 更新时间
     */
    public IEJobLog setUpdatedAt(LocalDateTime value);

    /**
     * Getter for <code>DB_ETERNAL.E_JOB_LOG.UPDATED_AT</code>. 「updatedAt」-
     * 更新时间
     */
    public LocalDateTime getUpdatedAt();

    /**
     * Setter for <code>DB_ETERNAL.E_JOB_LOG.UPDATED_BY</code>. 「updatedBy」- 更新人
     */
    public IEJobLog setUpdatedBy(String value);

    /**
     * Getter for <code>DB_ETERNAL.E_JOB_LOG.UPDATED_BY</code>. 「updatedBy」- 更新人
     */
    public String getUpdatedBy();

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    /**
     * Load data from another generated Record/POJO implementing the common
     * interface IEJobLog
     */
    public void from(IEJobLog from);

    /**
     * Copy data into another generated Record/POJO implementing the common
     * interface IEJobLog
     */
    public <E extends IEJobLog> E into(E into);

    @Override
    public default IEJobLog fromJson(io.vertx.core.json.JsonObject json) {
        setOrThrow(this::setKey, json::getString, "KEY", "java.lang.String");
        setOrThrow(this::setName, json::getString, "NAME", "java.lang.String");
        setOrThrow(this::setSerial, json::getString, "SERIAL", "java.lang.String");
        setOrThrow(this::setType, json::getString, "TYPE", "java.lang.String");
        setOrThrow(this::setComment, json::getString, "COMMENT", "java.lang.String");
        setOrThrow(this::setLogAt, key -> {
            String s = json.getString(key);
            return s == null ? null : java.time.LocalDateTime.parse(s);
        }, "LOG_AT", "java.time.LocalDateTime");
        setOrThrow(this::setLogBy, json::getString, "LOG_BY", "java.lang.String");
        setOrThrow(this::setLogName, json::getString, "LOG_NAME", "java.lang.String");
        setOrThrow(this::setTodoId, json::getString, "TODO_ID", "java.lang.String");
        setOrThrow(this::setCompanyId, json::getString, "COMPANY_ID", "java.lang.String");
        setOrThrow(this::setStatus, json::getString, "STATUS", "java.lang.String");
        setOrThrow(this::setMetadata, json::getString, "METADATA", "java.lang.String");
        setOrThrow(this::setActive, json::getBoolean, "ACTIVE", "java.lang.Boolean");
        setOrThrow(this::setSigma, json::getString, "SIGMA", "java.lang.String");
        setOrThrow(this::setLanguage, json::getString, "LANGUAGE", "java.lang.String");
        setOrThrow(this::setCreatedAt, key -> {
            String s = json.getString(key);
            return s == null ? null : java.time.LocalDateTime.parse(s);
        }, "CREATED_AT", "java.time.LocalDateTime");
        setOrThrow(this::setCreatedBy, json::getString, "CREATED_BY", "java.lang.String");
        setOrThrow(this::setUpdatedAt, key -> {
            String s = json.getString(key);
            return s == null ? null : java.time.LocalDateTime.parse(s);
        }, "UPDATED_AT", "java.time.LocalDateTime");
        setOrThrow(this::setUpdatedBy, json::getString, "UPDATED_BY", "java.lang.String");
        return this;
    }


    @Override
    public default io.vertx.core.json.JsonObject toJson() {
        io.vertx.core.json.JsonObject json = new io.vertx.core.json.JsonObject();
        json.put("KEY", getKey());
        json.put("NAME", getName());
        json.put("SERIAL", getSerial());
        json.put("TYPE", getType());
        json.put("COMMENT", getComment());
        json.put("LOG_AT", getLogAt() == null ? null : getLogAt().toString());
        json.put("LOG_BY", getLogBy());
        json.put("LOG_NAME", getLogName());
        json.put("TODO_ID", getTodoId());
        json.put("COMPANY_ID", getCompanyId());
        json.put("STATUS", getStatus());
        json.put("METADATA", getMetadata());
        json.put("ACTIVE", getActive());
        json.put("SIGMA", getSigma());
        json.put("LANGUAGE", getLanguage());
        json.put("CREATED_AT", getCreatedAt() == null ? null : getCreatedAt().toString());
        json.put("CREATED_BY", getCreatedBy());
        json.put("UPDATED_AT", getUpdatedAt() == null ? null : getUpdatedAt().toString());
        json.put("UPDATED_BY", getUpdatedBy());
        return json;
    }

}
