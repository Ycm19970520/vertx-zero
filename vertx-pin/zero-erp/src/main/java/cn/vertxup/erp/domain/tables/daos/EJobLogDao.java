/*
 * This file is generated by jOOQ.
 */
package cn.vertxup.erp.domain.tables.daos;


import cn.vertxup.erp.domain.tables.EJobLog;
import cn.vertxup.erp.domain.tables.records.EJobLogRecord;
import io.github.jklingsporn.vertx.jooq.classic.jdbc.JDBCClassicQueryExecutor;
import io.github.jklingsporn.vertx.jooq.shared.internal.AbstractVertxDAO;
import io.vertx.core.Future;
import org.jooq.Configuration;

import java.time.LocalDateTime;
import java.util.Collection;
import java.util.List;

/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class EJobLogDao extends AbstractVertxDAO<EJobLogRecord, cn.vertxup.erp.domain.tables.pojos.EJobLog, String, Future<List<cn.vertxup.erp.domain.tables.pojos.EJobLog>>, Future<cn.vertxup.erp.domain.tables.pojos.EJobLog>, Future<Integer>, Future<String>> implements io.github.jklingsporn.vertx.jooq.classic.VertxDAO<EJobLogRecord, cn.vertxup.erp.domain.tables.pojos.EJobLog, String> {

    /**
     * @param configuration The Configuration used for rendering and query
     *                      execution.
     *                      * @param vertx the vertx instance
     */
    public EJobLogDao(Configuration configuration, io.vertx.core.Vertx vertx) {
        super(EJobLog.E_JOB_LOG, cn.vertxup.erp.domain.tables.pojos.EJobLog.class, new JDBCClassicQueryExecutor<EJobLogRecord, cn.vertxup.erp.domain.tables.pojos.EJobLog, String>(configuration, cn.vertxup.erp.domain.tables.pojos.EJobLog.class, vertx));
    }

    @Override
    protected String getId(cn.vertxup.erp.domain.tables.pojos.EJobLog object) {
        return object.getKey();
    }

    /**
     * Find records that have <code>NAME IN (values)</code> asynchronously
     */
    public Future<List<cn.vertxup.erp.domain.tables.pojos.EJobLog>> findManyByName(Collection<String> values) {
        return findManyByCondition(EJobLog.E_JOB_LOG.NAME.in(values));
    }

    /**
     * Find records that have <code>NAME IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<cn.vertxup.erp.domain.tables.pojos.EJobLog>> findManyByName(Collection<String> values, int limit) {
        return findManyByCondition(EJobLog.E_JOB_LOG.NAME.in(values), limit);
    }

    /**
     * Find records that have <code>SERIAL IN (values)</code> asynchronously
     */
    public Future<List<cn.vertxup.erp.domain.tables.pojos.EJobLog>> findManyBySerial(Collection<String> values) {
        return findManyByCondition(EJobLog.E_JOB_LOG.SERIAL.in(values));
    }

    /**
     * Find records that have <code>SERIAL IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<cn.vertxup.erp.domain.tables.pojos.EJobLog>> findManyBySerial(Collection<String> values, int limit) {
        return findManyByCondition(EJobLog.E_JOB_LOG.SERIAL.in(values), limit);
    }

    /**
     * Find records that have <code>TYPE IN (values)</code> asynchronously
     */
    public Future<List<cn.vertxup.erp.domain.tables.pojos.EJobLog>> findManyByType(Collection<String> values) {
        return findManyByCondition(EJobLog.E_JOB_LOG.TYPE.in(values));
    }

    /**
     * Find records that have <code>TYPE IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<cn.vertxup.erp.domain.tables.pojos.EJobLog>> findManyByType(Collection<String> values, int limit) {
        return findManyByCondition(EJobLog.E_JOB_LOG.TYPE.in(values), limit);
    }

    /**
     * Find records that have <code>COMMENT IN (values)</code> asynchronously
     */
    public Future<List<cn.vertxup.erp.domain.tables.pojos.EJobLog>> findManyByComment(Collection<String> values) {
        return findManyByCondition(EJobLog.E_JOB_LOG.COMMENT.in(values));
    }

    /**
     * Find records that have <code>COMMENT IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<cn.vertxup.erp.domain.tables.pojos.EJobLog>> findManyByComment(Collection<String> values, int limit) {
        return findManyByCondition(EJobLog.E_JOB_LOG.COMMENT.in(values), limit);
    }

    /**
     * Find records that have <code>LOG_AT IN (values)</code> asynchronously
     */
    public Future<List<cn.vertxup.erp.domain.tables.pojos.EJobLog>> findManyByLogAt(Collection<LocalDateTime> values) {
        return findManyByCondition(EJobLog.E_JOB_LOG.LOG_AT.in(values));
    }

    /**
     * Find records that have <code>LOG_AT IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<cn.vertxup.erp.domain.tables.pojos.EJobLog>> findManyByLogAt(Collection<LocalDateTime> values, int limit) {
        return findManyByCondition(EJobLog.E_JOB_LOG.LOG_AT.in(values), limit);
    }

    /**
     * Find records that have <code>LOG_BY IN (values)</code> asynchronously
     */
    public Future<List<cn.vertxup.erp.domain.tables.pojos.EJobLog>> findManyByLogBy(Collection<String> values) {
        return findManyByCondition(EJobLog.E_JOB_LOG.LOG_BY.in(values));
    }

    /**
     * Find records that have <code>LOG_BY IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<cn.vertxup.erp.domain.tables.pojos.EJobLog>> findManyByLogBy(Collection<String> values, int limit) {
        return findManyByCondition(EJobLog.E_JOB_LOG.LOG_BY.in(values), limit);
    }

    /**
     * Find records that have <code>LOG_NAME IN (values)</code> asynchronously
     */
    public Future<List<cn.vertxup.erp.domain.tables.pojos.EJobLog>> findManyByLogName(Collection<String> values) {
        return findManyByCondition(EJobLog.E_JOB_LOG.LOG_NAME.in(values));
    }

    /**
     * Find records that have <code>LOG_NAME IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<cn.vertxup.erp.domain.tables.pojos.EJobLog>> findManyByLogName(Collection<String> values, int limit) {
        return findManyByCondition(EJobLog.E_JOB_LOG.LOG_NAME.in(values), limit);
    }

    /**
     * Find records that have <code>TODO_ID IN (values)</code> asynchronously
     */
    public Future<List<cn.vertxup.erp.domain.tables.pojos.EJobLog>> findManyByTodoId(Collection<String> values) {
        return findManyByCondition(EJobLog.E_JOB_LOG.TODO_ID.in(values));
    }

    /**
     * Find records that have <code>TODO_ID IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<cn.vertxup.erp.domain.tables.pojos.EJobLog>> findManyByTodoId(Collection<String> values, int limit) {
        return findManyByCondition(EJobLog.E_JOB_LOG.TODO_ID.in(values), limit);
    }

    /**
     * Find records that have <code>COMPANY_ID IN (values)</code> asynchronously
     */
    public Future<List<cn.vertxup.erp.domain.tables.pojos.EJobLog>> findManyByCompanyId(Collection<String> values) {
        return findManyByCondition(EJobLog.E_JOB_LOG.COMPANY_ID.in(values));
    }

    /**
     * Find records that have <code>COMPANY_ID IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<cn.vertxup.erp.domain.tables.pojos.EJobLog>> findManyByCompanyId(Collection<String> values, int limit) {
        return findManyByCondition(EJobLog.E_JOB_LOG.COMPANY_ID.in(values), limit);
    }

    /**
     * Find records that have <code>STATUS IN (values)</code> asynchronously
     */
    public Future<List<cn.vertxup.erp.domain.tables.pojos.EJobLog>> findManyByStatus(Collection<String> values) {
        return findManyByCondition(EJobLog.E_JOB_LOG.STATUS.in(values));
    }

    /**
     * Find records that have <code>STATUS IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<cn.vertxup.erp.domain.tables.pojos.EJobLog>> findManyByStatus(Collection<String> values, int limit) {
        return findManyByCondition(EJobLog.E_JOB_LOG.STATUS.in(values), limit);
    }

    /**
     * Find records that have <code>METADATA IN (values)</code> asynchronously
     */
    public Future<List<cn.vertxup.erp.domain.tables.pojos.EJobLog>> findManyByMetadata(Collection<String> values) {
        return findManyByCondition(EJobLog.E_JOB_LOG.METADATA.in(values));
    }

    /**
     * Find records that have <code>METADATA IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<cn.vertxup.erp.domain.tables.pojos.EJobLog>> findManyByMetadata(Collection<String> values, int limit) {
        return findManyByCondition(EJobLog.E_JOB_LOG.METADATA.in(values), limit);
    }

    /**
     * Find records that have <code>ACTIVE IN (values)</code> asynchronously
     */
    public Future<List<cn.vertxup.erp.domain.tables.pojos.EJobLog>> findManyByActive(Collection<Boolean> values) {
        return findManyByCondition(EJobLog.E_JOB_LOG.ACTIVE.in(values));
    }

    /**
     * Find records that have <code>ACTIVE IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<cn.vertxup.erp.domain.tables.pojos.EJobLog>> findManyByActive(Collection<Boolean> values, int limit) {
        return findManyByCondition(EJobLog.E_JOB_LOG.ACTIVE.in(values), limit);
    }

    /**
     * Find records that have <code>SIGMA IN (values)</code> asynchronously
     */
    public Future<List<cn.vertxup.erp.domain.tables.pojos.EJobLog>> findManyBySigma(Collection<String> values) {
        return findManyByCondition(EJobLog.E_JOB_LOG.SIGMA.in(values));
    }

    /**
     * Find records that have <code>SIGMA IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<cn.vertxup.erp.domain.tables.pojos.EJobLog>> findManyBySigma(Collection<String> values, int limit) {
        return findManyByCondition(EJobLog.E_JOB_LOG.SIGMA.in(values), limit);
    }

    /**
     * Find records that have <code>LANGUAGE IN (values)</code> asynchronously
     */
    public Future<List<cn.vertxup.erp.domain.tables.pojos.EJobLog>> findManyByLanguage(Collection<String> values) {
        return findManyByCondition(EJobLog.E_JOB_LOG.LANGUAGE.in(values));
    }

    /**
     * Find records that have <code>LANGUAGE IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<cn.vertxup.erp.domain.tables.pojos.EJobLog>> findManyByLanguage(Collection<String> values, int limit) {
        return findManyByCondition(EJobLog.E_JOB_LOG.LANGUAGE.in(values), limit);
    }

    /**
     * Find records that have <code>CREATED_AT IN (values)</code> asynchronously
     */
    public Future<List<cn.vertxup.erp.domain.tables.pojos.EJobLog>> findManyByCreatedAt(Collection<LocalDateTime> values) {
        return findManyByCondition(EJobLog.E_JOB_LOG.CREATED_AT.in(values));
    }

    /**
     * Find records that have <code>CREATED_AT IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<cn.vertxup.erp.domain.tables.pojos.EJobLog>> findManyByCreatedAt(Collection<LocalDateTime> values, int limit) {
        return findManyByCondition(EJobLog.E_JOB_LOG.CREATED_AT.in(values), limit);
    }

    /**
     * Find records that have <code>CREATED_BY IN (values)</code> asynchronously
     */
    public Future<List<cn.vertxup.erp.domain.tables.pojos.EJobLog>> findManyByCreatedBy(Collection<String> values) {
        return findManyByCondition(EJobLog.E_JOB_LOG.CREATED_BY.in(values));
    }

    /**
     * Find records that have <code>CREATED_BY IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<cn.vertxup.erp.domain.tables.pojos.EJobLog>> findManyByCreatedBy(Collection<String> values, int limit) {
        return findManyByCondition(EJobLog.E_JOB_LOG.CREATED_BY.in(values), limit);
    }

    /**
     * Find records that have <code>UPDATED_AT IN (values)</code> asynchronously
     */
    public Future<List<cn.vertxup.erp.domain.tables.pojos.EJobLog>> findManyByUpdatedAt(Collection<LocalDateTime> values) {
        return findManyByCondition(EJobLog.E_JOB_LOG.UPDATED_AT.in(values));
    }

    /**
     * Find records that have <code>UPDATED_AT IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<cn.vertxup.erp.domain.tables.pojos.EJobLog>> findManyByUpdatedAt(Collection<LocalDateTime> values, int limit) {
        return findManyByCondition(EJobLog.E_JOB_LOG.UPDATED_AT.in(values), limit);
    }

    /**
     * Find records that have <code>UPDATED_BY IN (values)</code> asynchronously
     */
    public Future<List<cn.vertxup.erp.domain.tables.pojos.EJobLog>> findManyByUpdatedBy(Collection<String> values) {
        return findManyByCondition(EJobLog.E_JOB_LOG.UPDATED_BY.in(values));
    }

    /**
     * Find records that have <code>UPDATED_BY IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<cn.vertxup.erp.domain.tables.pojos.EJobLog>> findManyByUpdatedBy(Collection<String> values, int limit) {
        return findManyByCondition(EJobLog.E_JOB_LOG.UPDATED_BY.in(values), limit);
    }

    @Override
    public JDBCClassicQueryExecutor<EJobLogRecord, cn.vertxup.erp.domain.tables.pojos.EJobLog, String> queryExecutor() {
        return (JDBCClassicQueryExecutor<EJobLogRecord, cn.vertxup.erp.domain.tables.pojos.EJobLog, String>) super.queryExecutor();
    }
}
