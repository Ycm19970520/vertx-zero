/*
 * This file is generated by jOOQ.
 */
package cn.vertxup.erp.domain.tables;


import cn.vertxup.erp.domain.Db;
import cn.vertxup.erp.domain.Keys;
import cn.vertxup.erp.domain.tables.records.EJobLogRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.time.LocalDateTime;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class EJobLog extends TableImpl<EJobLogRecord> {

    /**
     * The reference instance of <code>DB_ETERNAL.E_JOB_LOG</code>
     */
    public static final EJobLog E_JOB_LOG = new EJobLog();
    private static final long serialVersionUID = 1L;
    /**
     * The column <code>DB_ETERNAL.E_JOB_LOG.KEY</code>. 「key」- 记录主键
     */
    public final TableField<EJobLogRecord, String> KEY = createField(DSL.name("KEY"), SQLDataType.VARCHAR(36).nullable(false), this, "「key」- 记录主键");
    /**
     * The column <code>DB_ETERNAL.E_JOB_LOG.NAME</code>. 「name」- 记录名称
     */
    public final TableField<EJobLogRecord, String> NAME = createField(DSL.name("NAME"), SQLDataType.VARCHAR(255), this, "「name」- 记录名称");
    /**
     * The column <code>DB_ETERNAL.E_JOB_LOG.SERIAL</code>. 「serial」- 记录序号
     */
    public final TableField<EJobLogRecord, String> SERIAL = createField(DSL.name("SERIAL"), SQLDataType.VARCHAR(255), this, "「serial」- 记录序号");
    /**
     * The column <code>DB_ETERNAL.E_JOB_LOG.TYPE</code>. 「type」- 记录类型：考勤 / 培训 /
     * 休假 / 驻场等
     */
    public final TableField<EJobLogRecord, String> TYPE = createField(DSL.name("TYPE"), SQLDataType.VARCHAR(36), this, "「type」- 记录类型：考勤 / 培训 / 休假 / 驻场等");
    /**
     * The column <code>DB_ETERNAL.E_JOB_LOG.COMMENT</code>. 「comment」- 记录备注
     */
    public final TableField<EJobLogRecord, String> COMMENT = createField(DSL.name("COMMENT"), SQLDataType.CLOB, this, "「comment」- 记录备注");
    /**
     * The column <code>DB_ETERNAL.E_JOB_LOG.LOG_AT</code>. 「logAt」- 记录时间
     */
    public final TableField<EJobLogRecord, LocalDateTime> LOG_AT = createField(DSL.name("LOG_AT"), SQLDataType.LOCALDATETIME(0), this, "「logAt」- 记录时间");
    /**
     * The column <code>DB_ETERNAL.E_JOB_LOG.LOG_BY</code>. 「logBy」-
     * 记录人（只能自己记录，所以记录人就是所属人）
     */
    public final TableField<EJobLogRecord, String> LOG_BY = createField(DSL.name("LOG_BY"), SQLDataType.VARCHAR(36), this, "「logBy」- 记录人（只能自己记录，所以记录人就是所属人）");
    /**
     * The column <code>DB_ETERNAL.E_JOB_LOG.LOG_NAME</code>. 「logName」- 记录人姓名
     */
    public final TableField<EJobLogRecord, String> LOG_NAME = createField(DSL.name("LOG_NAME"), SQLDataType.VARCHAR(255), this, "「logName」- 记录人姓名");
    /**
     * The column <code>DB_ETERNAL.E_JOB_LOG.TODO_ID</code>. 「todoId」-
     * 所属Todo主键，关联到主任务！
     */
    public final TableField<EJobLogRecord, String> TODO_ID = createField(DSL.name("TODO_ID"), SQLDataType.VARCHAR(36), this, "「todoId」- 所属Todo主键，关联到主任务！");
    /**
     * The column <code>DB_ETERNAL.E_JOB_LOG.COMPANY_ID</code>. 「companyId」-
     * 所属公司
     */
    public final TableField<EJobLogRecord, String> COMPANY_ID = createField(DSL.name("COMPANY_ID"), SQLDataType.VARCHAR(36), this, "「companyId」- 所属公司");
    /**
     * The column <code>DB_ETERNAL.E_JOB_LOG.STATUS</code>. 「status」- 记录状态
     */
    public final TableField<EJobLogRecord, String> STATUS = createField(DSL.name("STATUS"), SQLDataType.VARCHAR(36), this, "「status」- 记录状态");
    /**
     * The column <code>DB_ETERNAL.E_JOB_LOG.METADATA</code>. 「metadata」- 附加配置
     */
    public final TableField<EJobLogRecord, String> METADATA = createField(DSL.name("METADATA"), SQLDataType.CLOB, this, "「metadata」- 附加配置");
    /**
     * The column <code>DB_ETERNAL.E_JOB_LOG.ACTIVE</code>. 「active」- 是否启用
     */
    public final TableField<EJobLogRecord, Boolean> ACTIVE = createField(DSL.name("ACTIVE"), SQLDataType.BIT, this, "「active」- 是否启用");
    /**
     * The column <code>DB_ETERNAL.E_JOB_LOG.SIGMA</code>. 「sigma」- 统一标识
     */
    public final TableField<EJobLogRecord, String> SIGMA = createField(DSL.name("SIGMA"), SQLDataType.VARCHAR(32), this, "「sigma」- 统一标识");
    /**
     * The column <code>DB_ETERNAL.E_JOB_LOG.LANGUAGE</code>. 「language」- 使用的语言
     */
    public final TableField<EJobLogRecord, String> LANGUAGE = createField(DSL.name("LANGUAGE"), SQLDataType.VARCHAR(8), this, "「language」- 使用的语言");
    /**
     * The column <code>DB_ETERNAL.E_JOB_LOG.CREATED_AT</code>. 「createdAt」-
     * 创建时间
     */
    public final TableField<EJobLogRecord, LocalDateTime> CREATED_AT = createField(DSL.name("CREATED_AT"), SQLDataType.LOCALDATETIME(0), this, "「createdAt」- 创建时间");
    /**
     * The column <code>DB_ETERNAL.E_JOB_LOG.CREATED_BY</code>. 「createdBy」- 创建人
     */
    public final TableField<EJobLogRecord, String> CREATED_BY = createField(DSL.name("CREATED_BY"), SQLDataType.VARCHAR(36), this, "「createdBy」- 创建人");
    /**
     * The column <code>DB_ETERNAL.E_JOB_LOG.UPDATED_AT</code>. 「updatedAt」-
     * 更新时间
     */
    public final TableField<EJobLogRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("UPDATED_AT"), SQLDataType.LOCALDATETIME(0), this, "「updatedAt」- 更新时间");
    /**
     * The column <code>DB_ETERNAL.E_JOB_LOG.UPDATED_BY</code>. 「updatedBy」- 更新人
     */
    public final TableField<EJobLogRecord, String> UPDATED_BY = createField(DSL.name("UPDATED_BY"), SQLDataType.VARCHAR(36), this, "「updatedBy」- 更新人");

    private EJobLog(Name alias, Table<EJobLogRecord> aliased) {
        this(alias, aliased, null);
    }

    private EJobLog(Name alias, Table<EJobLogRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>DB_ETERNAL.E_JOB_LOG</code> table reference
     */
    public EJobLog(String alias) {
        this(DSL.name(alias), E_JOB_LOG);
    }

    /**
     * Create an aliased <code>DB_ETERNAL.E_JOB_LOG</code> table reference
     */
    public EJobLog(Name alias) {
        this(alias, E_JOB_LOG);
    }

    /**
     * Create a <code>DB_ETERNAL.E_JOB_LOG</code> table reference
     */
    public EJobLog() {
        this(DSL.name("E_JOB_LOG"), null);
    }

    public <O extends Record> EJobLog(Table<O> child, ForeignKey<O, EJobLogRecord> key) {
        super(child, key, E_JOB_LOG);
    }

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EJobLogRecord> getRecordType() {
        return EJobLogRecord.class;
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Db.DB_ETERNAL;
    }

    @Override
    public UniqueKey<EJobLogRecord> getPrimaryKey() {
        return Keys.KEY_E_JOB_LOG_PRIMARY;
    }

    @Override
    public EJobLog as(String alias) {
        return new EJobLog(DSL.name(alias), this);
    }

    @Override
    public EJobLog as(Name alias) {
        return new EJobLog(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public EJobLog rename(String name) {
        return new EJobLog(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public EJobLog rename(Name name) {
        return new EJobLog(name, null);
    }

    // -------------------------------------------------------------------------
    // Row19 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row19<String, String, String, String, String, LocalDateTime, String, String, String, String, String, String, Boolean, String, String, LocalDateTime, String, LocalDateTime, String> fieldsRow() {
        return (Row19) super.fieldsRow();
    }
}
