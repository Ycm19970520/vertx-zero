/*
 * This file is generated by jOOQ.
 */
package cn.vertxup.ambient.domain.tables;


import cn.vertxup.ambient.domain.Db;
import cn.vertxup.ambient.domain.Keys;
import cn.vertxup.ambient.domain.tables.records.XEmailServerRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class XEmailServer extends TableImpl<XEmailServerRecord> {

    /**
     * The reference instance of <code>DB_ETERNAL.X_EMAIL_SERVER</code>
     */
    public static final XEmailServer X_EMAIL_SERVER = new XEmailServer();
    private static final long serialVersionUID = 1L;
    /**
     * The column <code>DB_ETERNAL.X_EMAIL_SERVER.KEY</code>. 「key」- 邮件服务器主键
     */
    public final TableField<XEmailServerRecord, String> KEY = createField(DSL.name("KEY"), SQLDataType.VARCHAR(36).nullable(false), this, "「key」- 邮件服务器主键");
    /**
     * The column <code>DB_ETERNAL.X_EMAIL_SERVER.NAME</code>. 「name」- 邮件服务器名称
     */
    public final TableField<XEmailServerRecord, String> NAME = createField(DSL.name("NAME"), SQLDataType.VARCHAR(255), this, "「name」- 邮件服务器名称");
    /**
     * The column <code>DB_ETERNAL.X_EMAIL_SERVER.IP_V4</code>. 「ipV4」- IP v4地址
     */
    public final TableField<XEmailServerRecord, String> IP_V4 = createField(DSL.name("IP_V4"), SQLDataType.VARCHAR(15), this, "「ipV4」- IP v4地址");
    /**
     * The column <code>DB_ETERNAL.X_EMAIL_SERVER.IP_V6</code>. 「ipV6」- IP v6地址
     */
    public final TableField<XEmailServerRecord, String> IP_V6 = createField(DSL.name("IP_V6"), SQLDataType.VARCHAR(40), this, "「ipV6」- IP v6地址");
    /**
     * The column <code>DB_ETERNAL.X_EMAIL_SERVER.HOSTNAME</code>. 「hostname」-
     * 主机地址
     */
    public final TableField<XEmailServerRecord, String> HOSTNAME = createField(DSL.name("HOSTNAME"), SQLDataType.VARCHAR(255), this, "「hostname」- 主机地址");
    /**
     * The column <code>DB_ETERNAL.X_EMAIL_SERVER.PORT</code>. 「port」- 端口号
     */
    public final TableField<XEmailServerRecord, Integer> PORT = createField(DSL.name("PORT"), SQLDataType.INTEGER, this, "「port」- 端口号");
    /**
     * The column <code>DB_ETERNAL.X_EMAIL_SERVER.PROTOCOL</code>.
     * 「protocol」协议类型,POP3, STMP 等
     */
    public final TableField<XEmailServerRecord, String> PROTOCOL = createField(DSL.name("PROTOCOL"), SQLDataType.VARCHAR(64), this, "「protocol」协议类型,POP3, STMP 等");
    /**
     * The column <code>DB_ETERNAL.X_EMAIL_SERVER.SENDER</code>. 「sender」- 发送者账号
     */
    public final TableField<XEmailServerRecord, String> SENDER = createField(DSL.name("SENDER"), SQLDataType.VARCHAR(255), this, "「sender」- 发送者账号");
    /**
     * The column <code>DB_ETERNAL.X_EMAIL_SERVER.PASSWORD</code>. 「password」-
     * 口令
     */
    public final TableField<XEmailServerRecord, String> PASSWORD = createField(DSL.name("PASSWORD"), SQLDataType.VARCHAR(255), this, "「password」- 口令");
    /**
     * The column <code>DB_ETERNAL.X_EMAIL_SERVER.EMAIL_CONFIG</code>.
     * 「emailConfig」- 连接字符串中的配置key=value
     */
    public final TableField<XEmailServerRecord, String> EMAIL_CONFIG = createField(DSL.name("EMAIL_CONFIG"), SQLDataType.CLOB, this, "「emailConfig」- 连接字符串中的配置key=value");
    /**
     * The column <code>DB_ETERNAL.X_EMAIL_SERVER.APP_ID</code>. 「appId」- 所属应用ID
     */
    public final TableField<XEmailServerRecord, String> APP_ID = createField(DSL.name("APP_ID"), SQLDataType.VARCHAR(36), this, "「appId」- 所属应用ID");
    /**
     * The column <code>DB_ETERNAL.X_EMAIL_SERVER.ACTIVE</code>. 「active」- 是否启用
     */
    public final TableField<XEmailServerRecord, Boolean> ACTIVE = createField(DSL.name("ACTIVE"), SQLDataType.BIT, this, "「active」- 是否启用");
    /**
     * The column <code>DB_ETERNAL.X_EMAIL_SERVER.SIGMA</code>. 「sigma」- 统一标识
     */
    public final TableField<XEmailServerRecord, String> SIGMA = createField(DSL.name("SIGMA"), SQLDataType.VARCHAR(32), this, "「sigma」- 统一标识");
    /**
     * The column <code>DB_ETERNAL.X_EMAIL_SERVER.METADATA</code>. 「metadata」-
     * 附加配置
     */
    public final TableField<XEmailServerRecord, String> METADATA = createField(DSL.name("METADATA"), SQLDataType.CLOB, this, "「metadata」- 附加配置");
    /**
     * The column <code>DB_ETERNAL.X_EMAIL_SERVER.LANGUAGE</code>. 「language」-
     * 使用的语言
     */
    public final TableField<XEmailServerRecord, String> LANGUAGE = createField(DSL.name("LANGUAGE"), SQLDataType.VARCHAR(8), this, "「language」- 使用的语言");
    /**
     * The column <code>DB_ETERNAL.X_EMAIL_SERVER.CREATED_AT</code>.
     * 「createdAt」- 创建时间
     */
    public final TableField<XEmailServerRecord, LocalDateTime> CREATED_AT = createField(DSL.name("CREATED_AT"), SQLDataType.LOCALDATETIME(0), this, "「createdAt」- 创建时间");
    /**
     * The column <code>DB_ETERNAL.X_EMAIL_SERVER.CREATED_BY</code>.
     * 「createdBy」- 创建人
     */
    public final TableField<XEmailServerRecord, String> CREATED_BY = createField(DSL.name("CREATED_BY"), SQLDataType.VARCHAR(36), this, "「createdBy」- 创建人");
    /**
     * The column <code>DB_ETERNAL.X_EMAIL_SERVER.UPDATED_AT</code>.
     * 「updatedAt」- 更新时间
     */
    public final TableField<XEmailServerRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("UPDATED_AT"), SQLDataType.LOCALDATETIME(0), this, "「updatedAt」- 更新时间");
    /**
     * The column <code>DB_ETERNAL.X_EMAIL_SERVER.UPDATED_BY</code>.
     * 「updatedBy」- 更新人
     */
    public final TableField<XEmailServerRecord, String> UPDATED_BY = createField(DSL.name("UPDATED_BY"), SQLDataType.VARCHAR(36), this, "「updatedBy」- 更新人");

    private XEmailServer(Name alias, Table<XEmailServerRecord> aliased) {
        this(alias, aliased, null);
    }

    private XEmailServer(Name alias, Table<XEmailServerRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>DB_ETERNAL.X_EMAIL_SERVER</code> table reference
     */
    public XEmailServer(String alias) {
        this(DSL.name(alias), X_EMAIL_SERVER);
    }

    /**
     * Create an aliased <code>DB_ETERNAL.X_EMAIL_SERVER</code> table reference
     */
    public XEmailServer(Name alias) {
        this(alias, X_EMAIL_SERVER);
    }

    /**
     * Create a <code>DB_ETERNAL.X_EMAIL_SERVER</code> table reference
     */
    public XEmailServer() {
        this(DSL.name("X_EMAIL_SERVER"), null);
    }

    public <O extends Record> XEmailServer(Table<O> child, ForeignKey<O, XEmailServerRecord> key) {
        super(child, key, X_EMAIL_SERVER);
    }

    /**
     * The class holding records for this type
     */
    @Override
    public Class<XEmailServerRecord> getRecordType() {
        return XEmailServerRecord.class;
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Db.DB_ETERNAL;
    }

    @Override
    public UniqueKey<XEmailServerRecord> getPrimaryKey() {
        return Keys.KEY_X_EMAIL_SERVER_PRIMARY;
    }

    @Override
    public List<UniqueKey<XEmailServerRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_X_EMAIL_SERVER_APP_ID, Keys.KEY_X_EMAIL_SERVER_APP_ID_2);
    }

    @Override
    public XEmailServer as(String alias) {
        return new XEmailServer(DSL.name(alias), this);
    }

    @Override
    public XEmailServer as(Name alias) {
        return new XEmailServer(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public XEmailServer rename(String name) {
        return new XEmailServer(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public XEmailServer rename(Name name) {
        return new XEmailServer(name, null);
    }

    // -------------------------------------------------------------------------
    // Row19 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row19<String, String, String, String, String, Integer, String, String, String, String, String, Boolean, String, String, String, LocalDateTime, String, LocalDateTime, String> fieldsRow() {
        return (Row19) super.fieldsRow();
    }
}
