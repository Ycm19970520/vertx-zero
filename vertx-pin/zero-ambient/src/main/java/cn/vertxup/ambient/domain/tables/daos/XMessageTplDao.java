/*
 * This file is generated by jOOQ.
 */
package cn.vertxup.ambient.domain.tables.daos;


import cn.vertxup.ambient.domain.tables.XMessageTpl;
import cn.vertxup.ambient.domain.tables.records.XMessageTplRecord;

import io.github.jklingsporn.vertx.jooq.shared.internal.AbstractVertxDAO;

import java.time.LocalDateTime;
import java.util.Collection;

import org.jooq.Configuration;


import java.util.List;
import io.vertx.core.Future;
import io.github.jklingsporn.vertx.jooq.classic.jdbc.JDBCClassicQueryExecutor;
/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class XMessageTplDao extends AbstractVertxDAO<XMessageTplRecord, cn.vertxup.ambient.domain.tables.pojos.XMessageTpl, String, Future<List<cn.vertxup.ambient.domain.tables.pojos.XMessageTpl>>, Future<cn.vertxup.ambient.domain.tables.pojos.XMessageTpl>, Future<Integer>, Future<String>> implements io.github.jklingsporn.vertx.jooq.classic.VertxDAO<XMessageTplRecord,cn.vertxup.ambient.domain.tables.pojos.XMessageTpl,String> {

        /**
     * @param configuration The Configuration used for rendering and query
     * execution.
     *      * @param vertx the vertx instance
     */
        public XMessageTplDao(Configuration configuration, io.vertx.core.Vertx vertx) {
                super(XMessageTpl.X_MESSAGE_TPL, cn.vertxup.ambient.domain.tables.pojos.XMessageTpl.class, new JDBCClassicQueryExecutor<XMessageTplRecord,cn.vertxup.ambient.domain.tables.pojos.XMessageTpl,String>(configuration,cn.vertxup.ambient.domain.tables.pojos.XMessageTpl.class,vertx));
        }

        @Override
        protected String getId(cn.vertxup.ambient.domain.tables.pojos.XMessageTpl object) {
                return object.getKey();
        }

        /**
     * Find records that have <code>NAME IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XMessageTpl>> findManyByName(Collection<String> values) {
                return findManyByCondition(XMessageTpl.X_MESSAGE_TPL.NAME.in(values));
        }

        /**
     * Find records that have <code>NAME IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XMessageTpl>> findManyByName(Collection<String> values, int limit) {
                return findManyByCondition(XMessageTpl.X_MESSAGE_TPL.NAME.in(values),limit);
        }

        /**
     * Find records that have <code>CODE IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XMessageTpl>> findManyByCode(Collection<String> values) {
                return findManyByCondition(XMessageTpl.X_MESSAGE_TPL.CODE.in(values));
        }

        /**
     * Find records that have <code>CODE IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XMessageTpl>> findManyByCode(Collection<String> values, int limit) {
                return findManyByCondition(XMessageTpl.X_MESSAGE_TPL.CODE.in(values),limit);
        }

        /**
     * Find records that have <code>TYPE IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XMessageTpl>> findManyByType(Collection<String> values) {
                return findManyByCondition(XMessageTpl.X_MESSAGE_TPL.TYPE.in(values));
        }

        /**
     * Find records that have <code>TYPE IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XMessageTpl>> findManyByType(Collection<String> values, int limit) {
                return findManyByCondition(XMessageTpl.X_MESSAGE_TPL.TYPE.in(values),limit);
        }

        /**
     * Find records that have <code>EXPR_SUBJECT IN (values)</code>
     * asynchronously
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XMessageTpl>> findManyByExprSubject(Collection<String> values) {
                return findManyByCondition(XMessageTpl.X_MESSAGE_TPL.EXPR_SUBJECT.in(values));
        }

        /**
     * Find records that have <code>EXPR_SUBJECT IN (values)</code>
     * asynchronously limited by the given limit
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XMessageTpl>> findManyByExprSubject(Collection<String> values, int limit) {
                return findManyByCondition(XMessageTpl.X_MESSAGE_TPL.EXPR_SUBJECT.in(values),limit);
        }

        /**
     * Find records that have <code>EXPR_CONTENT IN (values)</code>
     * asynchronously
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XMessageTpl>> findManyByExprContent(Collection<String> values) {
                return findManyByCondition(XMessageTpl.X_MESSAGE_TPL.EXPR_CONTENT.in(values));
        }

        /**
     * Find records that have <code>EXPR_CONTENT IN (values)</code>
     * asynchronously limited by the given limit
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XMessageTpl>> findManyByExprContent(Collection<String> values, int limit) {
                return findManyByCondition(XMessageTpl.X_MESSAGE_TPL.EXPR_CONTENT.in(values),limit);
        }

        /**
     * Find records that have <code>EXPR_COMPONENT IN (values)</code>
     * asynchronously
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XMessageTpl>> findManyByExprComponent(Collection<String> values) {
                return findManyByCondition(XMessageTpl.X_MESSAGE_TPL.EXPR_COMPONENT.in(values));
        }

        /**
     * Find records that have <code>EXPR_COMPONENT IN (values)</code>
     * asynchronously limited by the given limit
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XMessageTpl>> findManyByExprComponent(Collection<String> values, int limit) {
                return findManyByCondition(XMessageTpl.X_MESSAGE_TPL.EXPR_COMPONENT.in(values),limit);
        }

        /**
     * Find records that have <code>APP_ID IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XMessageTpl>> findManyByAppId(Collection<String> values) {
                return findManyByCondition(XMessageTpl.X_MESSAGE_TPL.APP_ID.in(values));
        }

        /**
     * Find records that have <code>APP_ID IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XMessageTpl>> findManyByAppId(Collection<String> values, int limit) {
                return findManyByCondition(XMessageTpl.X_MESSAGE_TPL.APP_ID.in(values),limit);
        }

        /**
     * Find records that have <code>ACTIVE IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XMessageTpl>> findManyByActive(Collection<Boolean> values) {
                return findManyByCondition(XMessageTpl.X_MESSAGE_TPL.ACTIVE.in(values));
        }

        /**
     * Find records that have <code>ACTIVE IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XMessageTpl>> findManyByActive(Collection<Boolean> values, int limit) {
                return findManyByCondition(XMessageTpl.X_MESSAGE_TPL.ACTIVE.in(values),limit);
        }

        /**
     * Find records that have <code>SIGMA IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XMessageTpl>> findManyBySigma(Collection<String> values) {
                return findManyByCondition(XMessageTpl.X_MESSAGE_TPL.SIGMA.in(values));
        }

        /**
     * Find records that have <code>SIGMA IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XMessageTpl>> findManyBySigma(Collection<String> values, int limit) {
                return findManyByCondition(XMessageTpl.X_MESSAGE_TPL.SIGMA.in(values),limit);
        }

        /**
     * Find records that have <code>METADATA IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XMessageTpl>> findManyByMetadata(Collection<String> values) {
                return findManyByCondition(XMessageTpl.X_MESSAGE_TPL.METADATA.in(values));
        }

        /**
     * Find records that have <code>METADATA IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XMessageTpl>> findManyByMetadata(Collection<String> values, int limit) {
                return findManyByCondition(XMessageTpl.X_MESSAGE_TPL.METADATA.in(values),limit);
        }

        /**
     * Find records that have <code>LANGUAGE IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XMessageTpl>> findManyByLanguage(Collection<String> values) {
                return findManyByCondition(XMessageTpl.X_MESSAGE_TPL.LANGUAGE.in(values));
        }

        /**
     * Find records that have <code>LANGUAGE IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XMessageTpl>> findManyByLanguage(Collection<String> values, int limit) {
                return findManyByCondition(XMessageTpl.X_MESSAGE_TPL.LANGUAGE.in(values),limit);
        }

        /**
     * Find records that have <code>CREATED_AT IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XMessageTpl>> findManyByCreatedAt(Collection<LocalDateTime> values) {
                return findManyByCondition(XMessageTpl.X_MESSAGE_TPL.CREATED_AT.in(values));
        }

        /**
     * Find records that have <code>CREATED_AT IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XMessageTpl>> findManyByCreatedAt(Collection<LocalDateTime> values, int limit) {
                return findManyByCondition(XMessageTpl.X_MESSAGE_TPL.CREATED_AT.in(values),limit);
        }

        /**
     * Find records that have <code>CREATED_BY IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XMessageTpl>> findManyByCreatedBy(Collection<String> values) {
                return findManyByCondition(XMessageTpl.X_MESSAGE_TPL.CREATED_BY.in(values));
        }

        /**
     * Find records that have <code>CREATED_BY IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XMessageTpl>> findManyByCreatedBy(Collection<String> values, int limit) {
                return findManyByCondition(XMessageTpl.X_MESSAGE_TPL.CREATED_BY.in(values),limit);
        }

        /**
     * Find records that have <code>UPDATED_AT IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XMessageTpl>> findManyByUpdatedAt(Collection<LocalDateTime> values) {
                return findManyByCondition(XMessageTpl.X_MESSAGE_TPL.UPDATED_AT.in(values));
        }

        /**
     * Find records that have <code>UPDATED_AT IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XMessageTpl>> findManyByUpdatedAt(Collection<LocalDateTime> values, int limit) {
                return findManyByCondition(XMessageTpl.X_MESSAGE_TPL.UPDATED_AT.in(values),limit);
        }

        /**
     * Find records that have <code>UPDATED_BY IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XMessageTpl>> findManyByUpdatedBy(Collection<String> values) {
                return findManyByCondition(XMessageTpl.X_MESSAGE_TPL.UPDATED_BY.in(values));
        }

        /**
     * Find records that have <code>UPDATED_BY IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XMessageTpl>> findManyByUpdatedBy(Collection<String> values, int limit) {
                return findManyByCondition(XMessageTpl.X_MESSAGE_TPL.UPDATED_BY.in(values),limit);
        }

        @Override
        public JDBCClassicQueryExecutor<XMessageTplRecord,cn.vertxup.ambient.domain.tables.pojos.XMessageTpl,String> queryExecutor(){
                return (JDBCClassicQueryExecutor<XMessageTplRecord,cn.vertxup.ambient.domain.tables.pojos.XMessageTpl,String>) super.queryExecutor();
        }
}
