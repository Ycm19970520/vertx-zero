/*
 * This file is generated by jOOQ.
 */
package cn.vertxup.ambient.domain.tables;


import cn.vertxup.ambient.domain.Db;
import cn.vertxup.ambient.domain.Keys;
import cn.vertxup.ambient.domain.tables.records.XIntegrationRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class XIntegration extends TableImpl<XIntegrationRecord> {

    /**
     * The reference instance of <code>DB_ETERNAL.X_INTEGRATION</code>
     */
    public static final XIntegration X_INTEGRATION = new XIntegration();
    private static final long serialVersionUID = 1L;
    /**
     * The column <code>DB_ETERNAL.X_INTEGRATION.KEY</code>. 「key」- 集成配置主键
     */
    public final TableField<XIntegrationRecord, String> KEY = createField(DSL.name("KEY"), SQLDataType.VARCHAR(36).nullable(false), this, "「key」- 集成配置主键");
    /**
     * The column <code>DB_ETERNAL.X_INTEGRATION.NAME</code>. 「name」- 集成名称
     */
    public final TableField<XIntegrationRecord, String> NAME = createField(DSL.name("NAME"), SQLDataType.VARCHAR(255), this, "「name」- 集成名称");
    /**
     * The column <code>DB_ETERNAL.X_INTEGRATION.TYPE</code>. 「type」- 集成类型
     */
    public final TableField<XIntegrationRecord, String> TYPE = createField(DSL.name("TYPE"), SQLDataType.VARCHAR(255), this, "「type」- 集成类型");
    /**
     * The column <code>DB_ETERNAL.X_INTEGRATION.IP_V4</code>. 「ipV4」- IP v4地址
     */
    public final TableField<XIntegrationRecord, String> IP_V4 = createField(DSL.name("IP_V4"), SQLDataType.VARCHAR(15), this, "「ipV4」- IP v4地址");
    /**
     * The column <code>DB_ETERNAL.X_INTEGRATION.IP_V6</code>. 「ipV6」- IP v6地址
     */
    public final TableField<XIntegrationRecord, String> IP_V6 = createField(DSL.name("IP_V6"), SQLDataType.VARCHAR(40), this, "「ipV6」- IP v6地址");
    /**
     * The column <code>DB_ETERNAL.X_INTEGRATION.HOSTNAME</code>. 「hostname」-
     * 主机地址
     */
    public final TableField<XIntegrationRecord, String> HOSTNAME = createField(DSL.name("HOSTNAME"), SQLDataType.VARCHAR(255), this, "「hostname」- 主机地址");
    /**
     * The column <code>DB_ETERNAL.X_INTEGRATION.PROTOCOL</code>. 「protocol」-
     * 协议类型：HTTP, HTTPS, FTP
     */
    public final TableField<XIntegrationRecord, String> PROTOCOL = createField(DSL.name("PROTOCOL"), SQLDataType.VARCHAR(64), this, "「protocol」- 协议类型：HTTP, HTTPS, FTP");
    /**
     * The column <code>DB_ETERNAL.X_INTEGRATION.ENDPOINT</code>. 「endpoint」-
     * 端地址
     */
    public final TableField<XIntegrationRecord, String> ENDPOINT = createField(DSL.name("ENDPOINT"), SQLDataType.VARCHAR(255), this, "「endpoint」- 端地址");
    /**
     * The column <code>DB_ETERNAL.X_INTEGRATION.PATH</code>. 「path」- 集成专用根路径
     */
    public final TableField<XIntegrationRecord, String> PATH = createField(DSL.name("PATH"), SQLDataType.VARCHAR(255), this, "「path」- 集成专用根路径");
    /**
     * The column <code>DB_ETERNAL.X_INTEGRATION.OS_KEY</code>. 「osKey」- 开源专用Key
     */
    public final TableField<XIntegrationRecord, String> OS_KEY = createField(DSL.name("OS_KEY"), SQLDataType.VARCHAR(1024), this, "「osKey」- 开源专用Key");
    /**
     * The column <code>DB_ETERNAL.X_INTEGRATION.OS_SECRET</code>. 「osSecret」-
     * 开源专用Secret
     */
    public final TableField<XIntegrationRecord, String> OS_SECRET = createField(DSL.name("OS_SECRET"), SQLDataType.VARCHAR(1024), this, "「osSecret」- 开源专用Secret");
    /**
     * The column <code>DB_ETERNAL.X_INTEGRATION.OS_AUTHORIZE</code>.
     * 「osAuthorize」- Authorize接口
     */
    public final TableField<XIntegrationRecord, String> OS_AUTHORIZE = createField(DSL.name("OS_AUTHORIZE"), SQLDataType.VARCHAR(255), this, "「osAuthorize」- Authorize接口");
    /**
     * The column <code>DB_ETERNAL.X_INTEGRATION.OS_TOKEN</code>. 「osToken」-
     * Token接口
     */
    public final TableField<XIntegrationRecord, String> OS_TOKEN = createField(DSL.name("OS_TOKEN"), SQLDataType.VARCHAR(255), this, "「osToken」- Token接口");
    /**
     * The column <code>DB_ETERNAL.X_INTEGRATION.USERNAME</code>. 「username」- 账号
     */
    public final TableField<XIntegrationRecord, String> USERNAME = createField(DSL.name("USERNAME"), SQLDataType.VARCHAR(255), this, "「username」- 账号");
    /**
     * The column <code>DB_ETERNAL.X_INTEGRATION.PASSWORD</code>. 「password」- 密码
     */
    public final TableField<XIntegrationRecord, String> PASSWORD = createField(DSL.name("PASSWORD"), SQLDataType.VARCHAR(255), this, "「password」- 密码");
    /**
     * The column <code>DB_ETERNAL.X_INTEGRATION.PUBLIC_KEY</code>. 「publicKey」-
     * Key文件
     */
    public final TableField<XIntegrationRecord, String> PUBLIC_KEY = createField(DSL.name("PUBLIC_KEY"), SQLDataType.VARCHAR(255), this, "「publicKey」- Key文件");
    /**
     * The column <code>DB_ETERNAL.X_INTEGRATION.OPTIONS</code>. 「options」-
     * 集成相关配置
     */
    public final TableField<XIntegrationRecord, String> OPTIONS = createField(DSL.name("OPTIONS"), SQLDataType.CLOB, this, "「options」- 集成相关配置");
    /**
     * The column <code>DB_ETERNAL.X_INTEGRATION.APP_ID</code>. 「appId」-
     * 关联的应用程序ID
     */
    public final TableField<XIntegrationRecord, String> APP_ID = createField(DSL.name("APP_ID"), SQLDataType.VARCHAR(255), this, "「appId」- 关联的应用程序ID");
    /**
     * The column <code>DB_ETERNAL.X_INTEGRATION.ACTIVE</code>. 「active」- 是否启用
     */
    public final TableField<XIntegrationRecord, Boolean> ACTIVE = createField(DSL.name("ACTIVE"), SQLDataType.BIT, this, "「active」- 是否启用");
    /**
     * The column <code>DB_ETERNAL.X_INTEGRATION.SIGMA</code>. 「sigma」- 统一标识
     */
    public final TableField<XIntegrationRecord, String> SIGMA = createField(DSL.name("SIGMA"), SQLDataType.VARCHAR(32), this, "「sigma」- 统一标识");
    /**
     * The column <code>DB_ETERNAL.X_INTEGRATION.METADATA</code>. 「metadata」-
     * 附加配置
     */
    public final TableField<XIntegrationRecord, String> METADATA = createField(DSL.name("METADATA"), SQLDataType.CLOB, this, "「metadata」- 附加配置");
    /**
     * The column <code>DB_ETERNAL.X_INTEGRATION.LANGUAGE</code>. 「language」-
     * 使用的语言
     */
    public final TableField<XIntegrationRecord, String> LANGUAGE = createField(DSL.name("LANGUAGE"), SQLDataType.VARCHAR(8), this, "「language」- 使用的语言");
    /**
     * The column <code>DB_ETERNAL.X_INTEGRATION.CREATED_AT</code>. 「createdAt」-
     * 创建时间
     */
    public final TableField<XIntegrationRecord, LocalDateTime> CREATED_AT = createField(DSL.name("CREATED_AT"), SQLDataType.LOCALDATETIME(0), this, "「createdAt」- 创建时间");
    /**
     * The column <code>DB_ETERNAL.X_INTEGRATION.CREATED_BY</code>. 「createdBy」-
     * 创建人
     */
    public final TableField<XIntegrationRecord, String> CREATED_BY = createField(DSL.name("CREATED_BY"), SQLDataType.VARCHAR(36), this, "「createdBy」- 创建人");
    /**
     * The column <code>DB_ETERNAL.X_INTEGRATION.UPDATED_AT</code>. 「updatedAt」-
     * 更新时间
     */
    public final TableField<XIntegrationRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("UPDATED_AT"), SQLDataType.LOCALDATETIME(0), this, "「updatedAt」- 更新时间");
    /**
     * The column <code>DB_ETERNAL.X_INTEGRATION.UPDATED_BY</code>. 「updatedBy」-
     * 更新人
     */
    public final TableField<XIntegrationRecord, String> UPDATED_BY = createField(DSL.name("UPDATED_BY"), SQLDataType.VARCHAR(36), this, "「updatedBy」- 更新人");

    private XIntegration(Name alias, Table<XIntegrationRecord> aliased) {
        this(alias, aliased, null);
    }

    private XIntegration(Name alias, Table<XIntegrationRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>DB_ETERNAL.X_INTEGRATION</code> table reference
     */
    public XIntegration(String alias) {
        this(DSL.name(alias), X_INTEGRATION);
    }

    /**
     * Create an aliased <code>DB_ETERNAL.X_INTEGRATION</code> table reference
     */
    public XIntegration(Name alias) {
        this(alias, X_INTEGRATION);
    }

    /**
     * Create a <code>DB_ETERNAL.X_INTEGRATION</code> table reference
     */
    public XIntegration() {
        this(DSL.name("X_INTEGRATION"), null);
    }

    public <O extends Record> XIntegration(Table<O> child, ForeignKey<O, XIntegrationRecord> key) {
        super(child, key, X_INTEGRATION);
    }

    /**
     * The class holding records for this type
     */
    @Override
    public Class<XIntegrationRecord> getRecordType() {
        return XIntegrationRecord.class;
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Db.DB_ETERNAL;
    }

    @Override
    public UniqueKey<XIntegrationRecord> getPrimaryKey() {
        return Keys.KEY_X_INTEGRATION_PRIMARY;
    }

    @Override
    public List<UniqueKey<XIntegrationRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_X_INTEGRATION_ENDPOINT);
    }

    @Override
    public XIntegration as(String alias) {
        return new XIntegration(DSL.name(alias), this);
    }

    @Override
    public XIntegration as(Name alias) {
        return new XIntegration(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public XIntegration rename(String name) {
        return new XIntegration(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public XIntegration rename(Name name) {
        return new XIntegration(name, null);
    }
}
