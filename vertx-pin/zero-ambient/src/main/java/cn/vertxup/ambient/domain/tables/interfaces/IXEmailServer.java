/*
 * This file is generated by jOOQ.
 */
package cn.vertxup.ambient.domain.tables.interfaces;


import io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo;

import java.io.Serializable;
import java.time.LocalDateTime;


import static io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo.*;
/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public interface IXEmailServer extends VertxPojo, Serializable {

    /**
     * Setter for <code>DB_ETERNAL.X_EMAIL_SERVER.KEY</code>. 「key」- 邮件服务器主键
     */
    public IXEmailServer setKey(String value);

    /**
     * Getter for <code>DB_ETERNAL.X_EMAIL_SERVER.KEY</code>. 「key」- 邮件服务器主键
     */
    public String getKey();

    /**
     * Setter for <code>DB_ETERNAL.X_EMAIL_SERVER.NAME</code>. 「name」- 邮件服务器名称
     */
    public IXEmailServer setName(String value);

    /**
     * Getter for <code>DB_ETERNAL.X_EMAIL_SERVER.NAME</code>. 「name」- 邮件服务器名称
     */
    public String getName();

    /**
     * Setter for <code>DB_ETERNAL.X_EMAIL_SERVER.IP_V4</code>. 「ipV4」- IP v4地址
     */
    public IXEmailServer setIpV4(String value);

    /**
     * Getter for <code>DB_ETERNAL.X_EMAIL_SERVER.IP_V4</code>. 「ipV4」- IP v4地址
     */
    public String getIpV4();

    /**
     * Setter for <code>DB_ETERNAL.X_EMAIL_SERVER.IP_V6</code>. 「ipV6」- IP v6地址
     */
    public IXEmailServer setIpV6(String value);

    /**
     * Getter for <code>DB_ETERNAL.X_EMAIL_SERVER.IP_V6</code>. 「ipV6」- IP v6地址
     */
    public String getIpV6();

    /**
     * Setter for <code>DB_ETERNAL.X_EMAIL_SERVER.HOSTNAME</code>. 「hostname」-
     * 主机地址
     */
    public IXEmailServer setHostname(String value);

    /**
     * Getter for <code>DB_ETERNAL.X_EMAIL_SERVER.HOSTNAME</code>. 「hostname」-
     * 主机地址
     */
    public String getHostname();

    /**
     * Setter for <code>DB_ETERNAL.X_EMAIL_SERVER.PORT</code>. 「port」- 端口号
     */
    public IXEmailServer setPort(Integer value);

    /**
     * Getter for <code>DB_ETERNAL.X_EMAIL_SERVER.PORT</code>. 「port」- 端口号
     */
    public Integer getPort();

    /**
     * Setter for <code>DB_ETERNAL.X_EMAIL_SERVER.PROTOCOL</code>.
     * 「protocol」协议类型,POP3, STMP 等
     */
    public IXEmailServer setProtocol(String value);

    /**
     * Getter for <code>DB_ETERNAL.X_EMAIL_SERVER.PROTOCOL</code>.
     * 「protocol」协议类型,POP3, STMP 等
     */
    public String getProtocol();

    /**
     * Setter for <code>DB_ETERNAL.X_EMAIL_SERVER.SENDER</code>. 「sender」- 发送者账号
     */
    public IXEmailServer setSender(String value);

    /**
     * Getter for <code>DB_ETERNAL.X_EMAIL_SERVER.SENDER</code>. 「sender」- 发送者账号
     */
    public String getSender();

    /**
     * Setter for <code>DB_ETERNAL.X_EMAIL_SERVER.PASSWORD</code>. 「password」-
     * 口令
     */
    public IXEmailServer setPassword(String value);

    /**
     * Getter for <code>DB_ETERNAL.X_EMAIL_SERVER.PASSWORD</code>. 「password」-
     * 口令
     */
    public String getPassword();

    /**
     * Setter for <code>DB_ETERNAL.X_EMAIL_SERVER.OPTIONS</code>. 「options」-
     * 连接字符串中的配置key=value
     */
    public IXEmailServer setOptions(String value);

    /**
     * Getter for <code>DB_ETERNAL.X_EMAIL_SERVER.OPTIONS</code>. 「options」-
     * 连接字符串中的配置key=value
     */
    public String getOptions();

    /**
     * Setter for <code>DB_ETERNAL.X_EMAIL_SERVER.APP_ID</code>. 「appId」- 所属应用ID
     */
    public IXEmailServer setAppId(String value);

    /**
     * Getter for <code>DB_ETERNAL.X_EMAIL_SERVER.APP_ID</code>. 「appId」- 所属应用ID
     */
    public String getAppId();

    /**
     * Setter for <code>DB_ETERNAL.X_EMAIL_SERVER.ACTIVE</code>. 「active」- 是否启用
     */
    public IXEmailServer setActive(Boolean value);

    /**
     * Getter for <code>DB_ETERNAL.X_EMAIL_SERVER.ACTIVE</code>. 「active」- 是否启用
     */
    public Boolean getActive();

    /**
     * Setter for <code>DB_ETERNAL.X_EMAIL_SERVER.SIGMA</code>. 「sigma」- 统一标识
     */
    public IXEmailServer setSigma(String value);

    /**
     * Getter for <code>DB_ETERNAL.X_EMAIL_SERVER.SIGMA</code>. 「sigma」- 统一标识
     */
    public String getSigma();

    /**
     * Setter for <code>DB_ETERNAL.X_EMAIL_SERVER.METADATA</code>. 「metadata」-
     * 附加配置
     */
    public IXEmailServer setMetadata(String value);

    /**
     * Getter for <code>DB_ETERNAL.X_EMAIL_SERVER.METADATA</code>. 「metadata」-
     * 附加配置
     */
    public String getMetadata();

    /**
     * Setter for <code>DB_ETERNAL.X_EMAIL_SERVER.LANGUAGE</code>. 「language」-
     * 使用的语言
     */
    public IXEmailServer setLanguage(String value);

    /**
     * Getter for <code>DB_ETERNAL.X_EMAIL_SERVER.LANGUAGE</code>. 「language」-
     * 使用的语言
     */
    public String getLanguage();

    /**
     * Setter for <code>DB_ETERNAL.X_EMAIL_SERVER.CREATED_AT</code>.
     * 「createdAt」- 创建时间
     */
    public IXEmailServer setCreatedAt(LocalDateTime value);

    /**
     * Getter for <code>DB_ETERNAL.X_EMAIL_SERVER.CREATED_AT</code>.
     * 「createdAt」- 创建时间
     */
    public LocalDateTime getCreatedAt();

    /**
     * Setter for <code>DB_ETERNAL.X_EMAIL_SERVER.CREATED_BY</code>.
     * 「createdBy」- 创建人
     */
    public IXEmailServer setCreatedBy(String value);

    /**
     * Getter for <code>DB_ETERNAL.X_EMAIL_SERVER.CREATED_BY</code>.
     * 「createdBy」- 创建人
     */
    public String getCreatedBy();

    /**
     * Setter for <code>DB_ETERNAL.X_EMAIL_SERVER.UPDATED_AT</code>.
     * 「updatedAt」- 更新时间
     */
    public IXEmailServer setUpdatedAt(LocalDateTime value);

    /**
     * Getter for <code>DB_ETERNAL.X_EMAIL_SERVER.UPDATED_AT</code>.
     * 「updatedAt」- 更新时间
     */
    public LocalDateTime getUpdatedAt();

    /**
     * Setter for <code>DB_ETERNAL.X_EMAIL_SERVER.UPDATED_BY</code>.
     * 「updatedBy」- 更新人
     */
    public IXEmailServer setUpdatedBy(String value);

    /**
     * Getter for <code>DB_ETERNAL.X_EMAIL_SERVER.UPDATED_BY</code>.
     * 「updatedBy」- 更新人
     */
    public String getUpdatedBy();

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    /**
     * Load data from another generated Record/POJO implementing the common
     * interface IXEmailServer
     */
    public void from(IXEmailServer from);

    /**
     * Copy data into another generated Record/POJO implementing the common
     * interface IXEmailServer
     */
    public <E extends IXEmailServer> E into(E into);

        @Override
        public default IXEmailServer fromJson(io.vertx.core.json.JsonObject json) {
                setOrThrow(this::setKey,json::getString,"KEY","java.lang.String");
                setOrThrow(this::setName,json::getString,"NAME","java.lang.String");
                setOrThrow(this::setIpV4,json::getString,"IP_V4","java.lang.String");
                setOrThrow(this::setIpV6,json::getString,"IP_V6","java.lang.String");
                setOrThrow(this::setHostname,json::getString,"HOSTNAME","java.lang.String");
                setOrThrow(this::setPort,json::getInteger,"PORT","java.lang.Integer");
                setOrThrow(this::setProtocol,json::getString,"PROTOCOL","java.lang.String");
                setOrThrow(this::setSender,json::getString,"SENDER","java.lang.String");
                setOrThrow(this::setPassword,json::getString,"PASSWORD","java.lang.String");
                setOrThrow(this::setOptions,json::getString,"OPTIONS","java.lang.String");
                setOrThrow(this::setAppId,json::getString,"APP_ID","java.lang.String");
                setOrThrow(this::setActive,json::getBoolean,"ACTIVE","java.lang.Boolean");
                setOrThrow(this::setSigma,json::getString,"SIGMA","java.lang.String");
                setOrThrow(this::setMetadata,json::getString,"METADATA","java.lang.String");
                setOrThrow(this::setLanguage,json::getString,"LANGUAGE","java.lang.String");
                setOrThrow(this::setCreatedAt,key -> {String s = json.getString(key); return s==null?null:java.time.LocalDateTime.parse(s);},"CREATED_AT","java.time.LocalDateTime");
                setOrThrow(this::setCreatedBy,json::getString,"CREATED_BY","java.lang.String");
                setOrThrow(this::setUpdatedAt,key -> {String s = json.getString(key); return s==null?null:java.time.LocalDateTime.parse(s);},"UPDATED_AT","java.time.LocalDateTime");
                setOrThrow(this::setUpdatedBy,json::getString,"UPDATED_BY","java.lang.String");
                return this;
        }


        @Override
        public default io.vertx.core.json.JsonObject toJson() {
                io.vertx.core.json.JsonObject json = new io.vertx.core.json.JsonObject();
                json.put("KEY",getKey());
                json.put("NAME",getName());
                json.put("IP_V4",getIpV4());
                json.put("IP_V6",getIpV6());
                json.put("HOSTNAME",getHostname());
                json.put("PORT",getPort());
                json.put("PROTOCOL",getProtocol());
                json.put("SENDER",getSender());
                json.put("PASSWORD",getPassword());
                json.put("OPTIONS",getOptions());
                json.put("APP_ID",getAppId());
                json.put("ACTIVE",getActive());
                json.put("SIGMA",getSigma());
                json.put("METADATA",getMetadata());
                json.put("LANGUAGE",getLanguage());
                json.put("CREATED_AT",getCreatedAt()==null?null:getCreatedAt().toString());
                json.put("CREATED_BY",getCreatedBy());
                json.put("UPDATED_AT",getUpdatedAt()==null?null:getUpdatedAt().toString());
                json.put("UPDATED_BY",getUpdatedBy());
                return json;
        }

}
