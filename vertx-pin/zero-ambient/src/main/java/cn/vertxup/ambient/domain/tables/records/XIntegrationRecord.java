/*
 * This file is generated by jOOQ.
 */
package cn.vertxup.ambient.domain.tables.records;


import cn.vertxup.ambient.domain.tables.XIntegration;
import cn.vertxup.ambient.domain.tables.interfaces.IXIntegration;

import io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo;

import java.time.LocalDateTime;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record20;
import org.jooq.Row20;
import org.jooq.impl.UpdatableRecordImpl;


import static io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo.*;
/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class XIntegrationRecord extends UpdatableRecordImpl<XIntegrationRecord> implements VertxPojo, Record20<String, String, String, String, String, String, String, String, String, String, String, String, Boolean, String, String, String, LocalDateTime, String, LocalDateTime, String>, IXIntegration {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>DB_ETERNAL.X_INTEGRATION.KEY</code>. 「key」- 集成配置主键
     */
    @Override
    public XIntegrationRecord setKey(String value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.X_INTEGRATION.KEY</code>. 「key」- 集成配置主键
     */
    @Override
    public String getKey() {
        return (String) get(0);
    }

    /**
     * Setter for <code>DB_ETERNAL.X_INTEGRATION.IP_V4</code>. 「ipV4」- IP v4地址
     */
    @Override
    public XIntegrationRecord setIpV4(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.X_INTEGRATION.IP_V4</code>. 「ipV4」- IP v4地址
     */
    @Override
    public String getIpV4() {
        return (String) get(1);
    }

    /**
     * Setter for <code>DB_ETERNAL.X_INTEGRATION.IP_V6</code>. 「ipV6」- IP v6地址
     */
    @Override
    public XIntegrationRecord setIpV6(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.X_INTEGRATION.IP_V6</code>. 「ipV6」- IP v6地址
     */
    @Override
    public String getIpV6() {
        return (String) get(2);
    }

    /**
     * Setter for <code>DB_ETERNAL.X_INTEGRATION.HOSTNAME</code>. 「hostname」-
     * 主机地址
     */
    @Override
    public XIntegrationRecord setHostname(String value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.X_INTEGRATION.HOSTNAME</code>. 「hostname」-
     * 主机地址
     */
    @Override
    public String getHostname() {
        return (String) get(3);
    }

    /**
     * Setter for <code>DB_ETERNAL.X_INTEGRATION.PROTOCOL</code>. 「protocol」-
     * 协议类型：HTTP, HTTPS, FTP
     */
    @Override
    public XIntegrationRecord setProtocol(String value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.X_INTEGRATION.PROTOCOL</code>. 「protocol」-
     * 协议类型：HTTP, HTTPS, FTP
     */
    @Override
    public String getProtocol() {
        return (String) get(4);
    }

    /**
     * Setter for <code>DB_ETERNAL.X_INTEGRATION.ENDPOINT</code>. 「endpoint」-
     * 端地址
     */
    @Override
    public XIntegrationRecord setEndpoint(String value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.X_INTEGRATION.ENDPOINT</code>. 「endpoint」-
     * 端地址
     */
    @Override
    public String getEndpoint() {
        return (String) get(5);
    }

    /**
     * Setter for <code>DB_ETERNAL.X_INTEGRATION.PATH</code>. 「path」- 集成专用根路径
     */
    @Override
    public XIntegrationRecord setPath(String value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.X_INTEGRATION.PATH</code>. 「path」- 集成专用根路径
     */
    @Override
    public String getPath() {
        return (String) get(6);
    }

    /**
     * Setter for <code>DB_ETERNAL.X_INTEGRATION.USERNAME</code>. 「username」- 账号
     */
    @Override
    public XIntegrationRecord setUsername(String value) {
        set(7, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.X_INTEGRATION.USERNAME</code>. 「username」- 账号
     */
    @Override
    public String getUsername() {
        return (String) get(7);
    }

    /**
     * Setter for <code>DB_ETERNAL.X_INTEGRATION.PASSWORD</code>. 「password」- 密码
     */
    @Override
    public XIntegrationRecord setPassword(String value) {
        set(8, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.X_INTEGRATION.PASSWORD</code>. 「password」- 密码
     */
    @Override
    public String getPassword() {
        return (String) get(8);
    }

    /**
     * Setter for <code>DB_ETERNAL.X_INTEGRATION.PUBLIC_KEY</code>. 「publicKey」-
     * Key文件
     */
    @Override
    public XIntegrationRecord setPublicKey(String value) {
        set(9, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.X_INTEGRATION.PUBLIC_KEY</code>. 「publicKey」-
     * Key文件
     */
    @Override
    public String getPublicKey() {
        return (String) get(9);
    }

    /**
     * Setter for <code>DB_ETERNAL.X_INTEGRATION.OPTIONS</code>. 「options」-
     * 集成相关配置
     */
    @Override
    public XIntegrationRecord setOptions(String value) {
        set(10, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.X_INTEGRATION.OPTIONS</code>. 「options」-
     * 集成相关配置
     */
    @Override
    public String getOptions() {
        return (String) get(10);
    }

    /**
     * Setter for <code>DB_ETERNAL.X_INTEGRATION.APP_ID</code>. 「appId」-
     * 关联的应用程序ID
     */
    @Override
    public XIntegrationRecord setAppId(String value) {
        set(11, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.X_INTEGRATION.APP_ID</code>. 「appId」-
     * 关联的应用程序ID
     */
    @Override
    public String getAppId() {
        return (String) get(11);
    }

    /**
     * Setter for <code>DB_ETERNAL.X_INTEGRATION.ACTIVE</code>. 「active」- 是否启用
     */
    @Override
    public XIntegrationRecord setActive(Boolean value) {
        set(12, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.X_INTEGRATION.ACTIVE</code>. 「active」- 是否启用
     */
    @Override
    public Boolean getActive() {
        return (Boolean) get(12);
    }

    /**
     * Setter for <code>DB_ETERNAL.X_INTEGRATION.SIGMA</code>. 「sigma」- 统一标识
     */
    @Override
    public XIntegrationRecord setSigma(String value) {
        set(13, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.X_INTEGRATION.SIGMA</code>. 「sigma」- 统一标识
     */
    @Override
    public String getSigma() {
        return (String) get(13);
    }

    /**
     * Setter for <code>DB_ETERNAL.X_INTEGRATION.METADATA</code>. 「metadata」-
     * 附加配置
     */
    @Override
    public XIntegrationRecord setMetadata(String value) {
        set(14, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.X_INTEGRATION.METADATA</code>. 「metadata」-
     * 附加配置
     */
    @Override
    public String getMetadata() {
        return (String) get(14);
    }

    /**
     * Setter for <code>DB_ETERNAL.X_INTEGRATION.LANGUAGE</code>. 「language」-
     * 使用的语言
     */
    @Override
    public XIntegrationRecord setLanguage(String value) {
        set(15, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.X_INTEGRATION.LANGUAGE</code>. 「language」-
     * 使用的语言
     */
    @Override
    public String getLanguage() {
        return (String) get(15);
    }

    /**
     * Setter for <code>DB_ETERNAL.X_INTEGRATION.CREATED_AT</code>. 「createdAt」-
     * 创建时间
     */
    @Override
    public XIntegrationRecord setCreatedAt(LocalDateTime value) {
        set(16, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.X_INTEGRATION.CREATED_AT</code>. 「createdAt」-
     * 创建时间
     */
    @Override
    public LocalDateTime getCreatedAt() {
        return (LocalDateTime) get(16);
    }

    /**
     * Setter for <code>DB_ETERNAL.X_INTEGRATION.CREATED_BY</code>. 「createdBy」-
     * 创建人
     */
    @Override
    public XIntegrationRecord setCreatedBy(String value) {
        set(17, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.X_INTEGRATION.CREATED_BY</code>. 「createdBy」-
     * 创建人
     */
    @Override
    public String getCreatedBy() {
        return (String) get(17);
    }

    /**
     * Setter for <code>DB_ETERNAL.X_INTEGRATION.UPDATED_AT</code>. 「updatedAt」-
     * 更新时间
     */
    @Override
    public XIntegrationRecord setUpdatedAt(LocalDateTime value) {
        set(18, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.X_INTEGRATION.UPDATED_AT</code>. 「updatedAt」-
     * 更新时间
     */
    @Override
    public LocalDateTime getUpdatedAt() {
        return (LocalDateTime) get(18);
    }

    /**
     * Setter for <code>DB_ETERNAL.X_INTEGRATION.UPDATED_BY</code>. 「updatedBy」-
     * 更新人
     */
    @Override
    public XIntegrationRecord setUpdatedBy(String value) {
        set(19, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.X_INTEGRATION.UPDATED_BY</code>. 「updatedBy」-
     * 更新人
     */
    @Override
    public String getUpdatedBy() {
        return (String) get(19);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<String> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record20 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row20<String, String, String, String, String, String, String, String, String, String, String, String, Boolean, String, String, String, LocalDateTime, String, LocalDateTime, String> fieldsRow() {
        return (Row20) super.fieldsRow();
    }

    @Override
    public Row20<String, String, String, String, String, String, String, String, String, String, String, String, Boolean, String, String, String, LocalDateTime, String, LocalDateTime, String> valuesRow() {
        return (Row20) super.valuesRow();
    }

    @Override
    public Field<String> field1() {
        return XIntegration.X_INTEGRATION.KEY;
    }

    @Override
    public Field<String> field2() {
        return XIntegration.X_INTEGRATION.IP_V4;
    }

    @Override
    public Field<String> field3() {
        return XIntegration.X_INTEGRATION.IP_V6;
    }

    @Override
    public Field<String> field4() {
        return XIntegration.X_INTEGRATION.HOSTNAME;
    }

    @Override
    public Field<String> field5() {
        return XIntegration.X_INTEGRATION.PROTOCOL;
    }

    @Override
    public Field<String> field6() {
        return XIntegration.X_INTEGRATION.ENDPOINT;
    }

    @Override
    public Field<String> field7() {
        return XIntegration.X_INTEGRATION.PATH;
    }

    @Override
    public Field<String> field8() {
        return XIntegration.X_INTEGRATION.USERNAME;
    }

    @Override
    public Field<String> field9() {
        return XIntegration.X_INTEGRATION.PASSWORD;
    }

    @Override
    public Field<String> field10() {
        return XIntegration.X_INTEGRATION.PUBLIC_KEY;
    }

    @Override
    public Field<String> field11() {
        return XIntegration.X_INTEGRATION.OPTIONS;
    }

    @Override
    public Field<String> field12() {
        return XIntegration.X_INTEGRATION.APP_ID;
    }

    @Override
    public Field<Boolean> field13() {
        return XIntegration.X_INTEGRATION.ACTIVE;
    }

    @Override
    public Field<String> field14() {
        return XIntegration.X_INTEGRATION.SIGMA;
    }

    @Override
    public Field<String> field15() {
        return XIntegration.X_INTEGRATION.METADATA;
    }

    @Override
    public Field<String> field16() {
        return XIntegration.X_INTEGRATION.LANGUAGE;
    }

    @Override
    public Field<LocalDateTime> field17() {
        return XIntegration.X_INTEGRATION.CREATED_AT;
    }

    @Override
    public Field<String> field18() {
        return XIntegration.X_INTEGRATION.CREATED_BY;
    }

    @Override
    public Field<LocalDateTime> field19() {
        return XIntegration.X_INTEGRATION.UPDATED_AT;
    }

    @Override
    public Field<String> field20() {
        return XIntegration.X_INTEGRATION.UPDATED_BY;
    }

    @Override
    public String component1() {
        return getKey();
    }

    @Override
    public String component2() {
        return getIpV4();
    }

    @Override
    public String component3() {
        return getIpV6();
    }

    @Override
    public String component4() {
        return getHostname();
    }

    @Override
    public String component5() {
        return getProtocol();
    }

    @Override
    public String component6() {
        return getEndpoint();
    }

    @Override
    public String component7() {
        return getPath();
    }

    @Override
    public String component8() {
        return getUsername();
    }

    @Override
    public String component9() {
        return getPassword();
    }

    @Override
    public String component10() {
        return getPublicKey();
    }

    @Override
    public String component11() {
        return getOptions();
    }

    @Override
    public String component12() {
        return getAppId();
    }

    @Override
    public Boolean component13() {
        return getActive();
    }

    @Override
    public String component14() {
        return getSigma();
    }

    @Override
    public String component15() {
        return getMetadata();
    }

    @Override
    public String component16() {
        return getLanguage();
    }

    @Override
    public LocalDateTime component17() {
        return getCreatedAt();
    }

    @Override
    public String component18() {
        return getCreatedBy();
    }

    @Override
    public LocalDateTime component19() {
        return getUpdatedAt();
    }

    @Override
    public String component20() {
        return getUpdatedBy();
    }

    @Override
    public String value1() {
        return getKey();
    }

    @Override
    public String value2() {
        return getIpV4();
    }

    @Override
    public String value3() {
        return getIpV6();
    }

    @Override
    public String value4() {
        return getHostname();
    }

    @Override
    public String value5() {
        return getProtocol();
    }

    @Override
    public String value6() {
        return getEndpoint();
    }

    @Override
    public String value7() {
        return getPath();
    }

    @Override
    public String value8() {
        return getUsername();
    }

    @Override
    public String value9() {
        return getPassword();
    }

    @Override
    public String value10() {
        return getPublicKey();
    }

    @Override
    public String value11() {
        return getOptions();
    }

    @Override
    public String value12() {
        return getAppId();
    }

    @Override
    public Boolean value13() {
        return getActive();
    }

    @Override
    public String value14() {
        return getSigma();
    }

    @Override
    public String value15() {
        return getMetadata();
    }

    @Override
    public String value16() {
        return getLanguage();
    }

    @Override
    public LocalDateTime value17() {
        return getCreatedAt();
    }

    @Override
    public String value18() {
        return getCreatedBy();
    }

    @Override
    public LocalDateTime value19() {
        return getUpdatedAt();
    }

    @Override
    public String value20() {
        return getUpdatedBy();
    }

    @Override
    public XIntegrationRecord value1(String value) {
        setKey(value);
        return this;
    }

    @Override
    public XIntegrationRecord value2(String value) {
        setIpV4(value);
        return this;
    }

    @Override
    public XIntegrationRecord value3(String value) {
        setIpV6(value);
        return this;
    }

    @Override
    public XIntegrationRecord value4(String value) {
        setHostname(value);
        return this;
    }

    @Override
    public XIntegrationRecord value5(String value) {
        setProtocol(value);
        return this;
    }

    @Override
    public XIntegrationRecord value6(String value) {
        setEndpoint(value);
        return this;
    }

    @Override
    public XIntegrationRecord value7(String value) {
        setPath(value);
        return this;
    }

    @Override
    public XIntegrationRecord value8(String value) {
        setUsername(value);
        return this;
    }

    @Override
    public XIntegrationRecord value9(String value) {
        setPassword(value);
        return this;
    }

    @Override
    public XIntegrationRecord value10(String value) {
        setPublicKey(value);
        return this;
    }

    @Override
    public XIntegrationRecord value11(String value) {
        setOptions(value);
        return this;
    }

    @Override
    public XIntegrationRecord value12(String value) {
        setAppId(value);
        return this;
    }

    @Override
    public XIntegrationRecord value13(Boolean value) {
        setActive(value);
        return this;
    }

    @Override
    public XIntegrationRecord value14(String value) {
        setSigma(value);
        return this;
    }

    @Override
    public XIntegrationRecord value15(String value) {
        setMetadata(value);
        return this;
    }

    @Override
    public XIntegrationRecord value16(String value) {
        setLanguage(value);
        return this;
    }

    @Override
    public XIntegrationRecord value17(LocalDateTime value) {
        setCreatedAt(value);
        return this;
    }

    @Override
    public XIntegrationRecord value18(String value) {
        setCreatedBy(value);
        return this;
    }

    @Override
    public XIntegrationRecord value19(LocalDateTime value) {
        setUpdatedAt(value);
        return this;
    }

    @Override
    public XIntegrationRecord value20(String value) {
        setUpdatedBy(value);
        return this;
    }

    @Override
    public XIntegrationRecord values(String value1, String value2, String value3, String value4, String value5, String value6, String value7, String value8, String value9, String value10, String value11, String value12, Boolean value13, String value14, String value15, String value16, LocalDateTime value17, String value18, LocalDateTime value19, String value20) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        value9(value9);
        value10(value10);
        value11(value11);
        value12(value12);
        value13(value13);
        value14(value14);
        value15(value15);
        value16(value16);
        value17(value17);
        value18(value18);
        value19(value19);
        value20(value20);
        return this;
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    @Override
    public void from(IXIntegration from) {
        setKey(from.getKey());
        setIpV4(from.getIpV4());
        setIpV6(from.getIpV6());
        setHostname(from.getHostname());
        setProtocol(from.getProtocol());
        setEndpoint(from.getEndpoint());
        setPath(from.getPath());
        setUsername(from.getUsername());
        setPassword(from.getPassword());
        setPublicKey(from.getPublicKey());
        setOptions(from.getOptions());
        setAppId(from.getAppId());
        setActive(from.getActive());
        setSigma(from.getSigma());
        setMetadata(from.getMetadata());
        setLanguage(from.getLanguage());
        setCreatedAt(from.getCreatedAt());
        setCreatedBy(from.getCreatedBy());
        setUpdatedAt(from.getUpdatedAt());
        setUpdatedBy(from.getUpdatedBy());
    }

    @Override
    public <E extends IXIntegration> E into(E into) {
        into.from(this);
        return into;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached XIntegrationRecord
     */
    public XIntegrationRecord() {
        super(XIntegration.X_INTEGRATION);
    }

    /**
     * Create a detached, initialised XIntegrationRecord
     */
    public XIntegrationRecord(String key, String ipV4, String ipV6, String hostname, String protocol, String endpoint, String path, String username, String password, String publicKey, String options, String appId, Boolean active, String sigma, String metadata, String language, LocalDateTime createdAt, String createdBy, LocalDateTime updatedAt, String updatedBy) {
        super(XIntegration.X_INTEGRATION);

        setKey(key);
        setIpV4(ipV4);
        setIpV6(ipV6);
        setHostname(hostname);
        setProtocol(protocol);
        setEndpoint(endpoint);
        setPath(path);
        setUsername(username);
        setPassword(password);
        setPublicKey(publicKey);
        setOptions(options);
        setAppId(appId);
        setActive(active);
        setSigma(sigma);
        setMetadata(metadata);
        setLanguage(language);
        setCreatedAt(createdAt);
        setCreatedBy(createdBy);
        setUpdatedAt(updatedAt);
        setUpdatedBy(updatedBy);
    }

    /**
     * Create a detached, initialised XIntegrationRecord
     */
    public XIntegrationRecord(cn.vertxup.ambient.domain.tables.pojos.XIntegration value) {
        super(XIntegration.X_INTEGRATION);

        if (value != null) {
            setKey(value.getKey());
            setIpV4(value.getIpV4());
            setIpV6(value.getIpV6());
            setHostname(value.getHostname());
            setProtocol(value.getProtocol());
            setEndpoint(value.getEndpoint());
            setPath(value.getPath());
            setUsername(value.getUsername());
            setPassword(value.getPassword());
            setPublicKey(value.getPublicKey());
            setOptions(value.getOptions());
            setAppId(value.getAppId());
            setActive(value.getActive());
            setSigma(value.getSigma());
            setMetadata(value.getMetadata());
            setLanguage(value.getLanguage());
            setCreatedAt(value.getCreatedAt());
            setCreatedBy(value.getCreatedBy());
            setUpdatedAt(value.getUpdatedAt());
            setUpdatedBy(value.getUpdatedBy());
        }
    }

        public XIntegrationRecord(io.vertx.core.json.JsonObject json) {
                this();
                fromJson(json);
        }
}
