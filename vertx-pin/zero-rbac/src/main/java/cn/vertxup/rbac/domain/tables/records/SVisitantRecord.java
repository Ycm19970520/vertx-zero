/*
 * This file is generated by jOOQ.
*/
package cn.vertxup.rbac.domain.tables.records;


import cn.vertxup.rbac.domain.tables.SVisitant;
import cn.vertxup.rbac.domain.tables.interfaces.ISVisitant;

import java.time.LocalDateTime;

import javax.annotation.Generated;

import org.jooq.Record1;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.8"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SVisitantRecord extends UpdatableRecordImpl<SVisitantRecord> implements ISVisitant {

    private static final long serialVersionUID = -1648072183;

    /**
     * Setter for <code>DB_ETERNAL.S_VISITANT.KEY</code>. 「key」- 限定记录ID
     */
    @Override
    public SVisitantRecord setKey(String value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.S_VISITANT.KEY</code>. 「key」- 限定记录ID
     */
    @Override
    public String getKey() {
        return (String) get(0);
    }

    /**
     * Setter for <code>DB_ETERNAL.S_VISITANT.VIEW_ID</code>. 「viewId」- 视图访问者的读ID
     */
    @Override
    public SVisitantRecord setViewId(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.S_VISITANT.VIEW_ID</code>. 「viewId」- 视图访问者的读ID
     */
    @Override
    public String getViewId() {
        return (String) get(1);
    }

    /**
     * Setter for <code>DB_ETERNAL.S_VISITANT.TYPE</code>. 「type」- 访问者类型
     */
    @Override
    public SVisitantRecord setType(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.S_VISITANT.TYPE</code>. 「type」- 访问者类型
     */
    @Override
    public String getType() {
        return (String) get(2);
    }

    /**
     * Setter for <code>DB_ETERNAL.S_VISITANT.STATIC_KEY</code>. 「staticKey」- 模型下记录对应的ID，一般是配置的ID
     */
    @Override
    public SVisitantRecord setStaticKey(String value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.S_VISITANT.STATIC_KEY</code>. 「staticKey」- 模型下记录对应的ID，一般是配置的ID
     */
    @Override
    public String getStaticKey() {
        return (String) get(3);
    }

    /**
     * Setter for <code>DB_ETERNAL.S_VISITANT.DYNAMIC_ID</code>. 「dynamicId」- 动态类型中的模型ID
     */
    @Override
    public SVisitantRecord setDynamicId(String value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.S_VISITANT.DYNAMIC_ID</code>. 「dynamicId」- 动态类型中的模型ID
     */
    @Override
    public String getDynamicId() {
        return (String) get(4);
    }

    /**
     * Setter for <code>DB_ETERNAL.S_VISITANT.RELATED_ID</code>. 「relatedId」- 相关模型
     */
    @Override
    public SVisitantRecord setRelatedId(String value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.S_VISITANT.RELATED_ID</code>. 「relatedId」- 相关模型
     */
    @Override
    public String getRelatedId() {
        return (String) get(5);
    }

    /**
     * Setter for <code>DB_ETERNAL.S_VISITANT.RELATED_RESOURCE</code>. 「relatedResource」- 相关资源影响集合（主要用于写限制）
     */
    @Override
    public SVisitantRecord setRelatedResource(String value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.S_VISITANT.RELATED_RESOURCE</code>. 「relatedResource」- 相关资源影响集合（主要用于写限制）
     */
    @Override
    public String getRelatedResource() {
        return (String) get(6);
    }

    /**
     * Setter for <code>DB_ETERNAL.S_VISITANT.RELATED_CONFIG</code>. 「relatedConfig」- 相关资源影响配置（主要用于写限制）
     */
    @Override
    public SVisitantRecord setRelatedConfig(String value) {
        set(7, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.S_VISITANT.RELATED_CONFIG</code>. 「relatedConfig」- 相关资源影响配置（主要用于写限制）
     */
    @Override
    public String getRelatedConfig() {
        return (String) get(7);
    }

    /**
     * Setter for <code>DB_ETERNAL.S_VISITANT.ACL_VISIBLE</code>. 「aclVisible」- 可见的属性集
     */
    @Override
    public SVisitantRecord setAclVisible(String value) {
        set(8, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.S_VISITANT.ACL_VISIBLE</code>. 「aclVisible」- 可见的属性集
     */
    @Override
    public String getAclVisible() {
        return (String) get(8);
    }

    /**
     * Setter for <code>DB_ETERNAL.S_VISITANT.ACL_VIEW</code>. 「aclView」- 只读的属性集
     */
    @Override
    public SVisitantRecord setAclView(String value) {
        set(9, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.S_VISITANT.ACL_VIEW</code>. 「aclView」- 只读的属性集
     */
    @Override
    public String getAclView() {
        return (String) get(9);
    }

    /**
     * Setter for <code>DB_ETERNAL.S_VISITANT.ACL_VARIETY</code>. 「aclVariety」- 多样性的属性集，用于控制集合类型的属性
     */
    @Override
    public SVisitantRecord setAclVariety(String value) {
        set(10, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.S_VISITANT.ACL_VARIETY</code>. 「aclVariety」- 多样性的属性集，用于控制集合类型的属性
     */
    @Override
    public String getAclVariety() {
        return (String) get(10);
    }

    /**
     * Setter for <code>DB_ETERNAL.S_VISITANT.ACL_VARIETY_CONFIG</code>. 「aclVarietyConfig」- 多样性的属性集相关配置
     */
    @Override
    public SVisitantRecord setAclVarietyConfig(String value) {
        set(11, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.S_VISITANT.ACL_VARIETY_CONFIG</code>. 「aclVarietyConfig」- 多样性的属性集相关配置
     */
    @Override
    public String getAclVarietyConfig() {
        return (String) get(11);
    }

    /**
     * Setter for <code>DB_ETERNAL.S_VISITANT.ACL_VOW</code>. 「aclVow」- 引用类属性集
     */
    @Override
    public SVisitantRecord setAclVow(String value) {
        set(12, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.S_VISITANT.ACL_VOW</code>. 「aclVow」- 引用类属性集
     */
    @Override
    public String getAclVow() {
        return (String) get(12);
    }

    /**
     * Setter for <code>DB_ETERNAL.S_VISITANT.ACL_VOW_CONFIG</code>. 「aclVowConfig」- 引用类属性集相关配置
     */
    @Override
    public SVisitantRecord setAclVowConfig(String value) {
        set(13, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.S_VISITANT.ACL_VOW_CONFIG</code>. 「aclVowConfig」- 引用类属性集相关配置
     */
    @Override
    public String getAclVowConfig() {
        return (String) get(13);
    }

    /**
     * Setter for <code>DB_ETERNAL.S_VISITANT.ACL_DEPEND</code>. 「aclDepend」- 依赖属性集
     */
    @Override
    public SVisitantRecord setAclDepend(String value) {
        set(14, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.S_VISITANT.ACL_DEPEND</code>. 「aclDepend」- 依赖属性集
     */
    @Override
    public String getAclDepend() {
        return (String) get(14);
    }

    /**
     * Setter for <code>DB_ETERNAL.S_VISITANT.ACL_DEPEND_CONFIG</code>. 「aclDependConfig」- 依赖属性集配置
     */
    @Override
    public SVisitantRecord setAclDependConfig(String value) {
        set(15, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.S_VISITANT.ACL_DEPEND_CONFIG</code>. 「aclDependConfig」- 依赖属性集配置
     */
    @Override
    public String getAclDependConfig() {
        return (String) get(15);
    }

    /**
     * Setter for <code>DB_ETERNAL.S_VISITANT.SIGMA</code>. 「sigma」- 用户组绑定的统一标识
     */
    @Override
    public SVisitantRecord setSigma(String value) {
        set(16, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.S_VISITANT.SIGMA</code>. 「sigma」- 用户组绑定的统一标识
     */
    @Override
    public String getSigma() {
        return (String) get(16);
    }

    /**
     * Setter for <code>DB_ETERNAL.S_VISITANT.LANGUAGE</code>. 「language」- 使用的语言
     */
    @Override
    public SVisitantRecord setLanguage(String value) {
        set(17, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.S_VISITANT.LANGUAGE</code>. 「language」- 使用的语言
     */
    @Override
    public String getLanguage() {
        return (String) get(17);
    }

    /**
     * Setter for <code>DB_ETERNAL.S_VISITANT.ACTIVE</code>. 「active」- 是否启用
     */
    @Override
    public SVisitantRecord setActive(Boolean value) {
        set(18, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.S_VISITANT.ACTIVE</code>. 「active」- 是否启用
     */
    @Override
    public Boolean getActive() {
        return (Boolean) get(18);
    }

    /**
     * Setter for <code>DB_ETERNAL.S_VISITANT.METADATA</code>. 「metadata」- 附加配置数据
     */
    @Override
    public SVisitantRecord setMetadata(String value) {
        set(19, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.S_VISITANT.METADATA</code>. 「metadata」- 附加配置数据
     */
    @Override
    public String getMetadata() {
        return (String) get(19);
    }

    /**
     * Setter for <code>DB_ETERNAL.S_VISITANT.CREATED_AT</code>. 「createdAt」- 创建时间
     */
    @Override
    public SVisitantRecord setCreatedAt(LocalDateTime value) {
        set(20, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.S_VISITANT.CREATED_AT</code>. 「createdAt」- 创建时间
     */
    @Override
    public LocalDateTime getCreatedAt() {
        return (LocalDateTime) get(20);
    }

    /**
     * Setter for <code>DB_ETERNAL.S_VISITANT.CREATED_BY</code>. 「createdBy」- 创建人
     */
    @Override
    public SVisitantRecord setCreatedBy(String value) {
        set(21, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.S_VISITANT.CREATED_BY</code>. 「createdBy」- 创建人
     */
    @Override
    public String getCreatedBy() {
        return (String) get(21);
    }

    /**
     * Setter for <code>DB_ETERNAL.S_VISITANT.UPDATED_AT</code>. 「updatedAt」- 更新时间
     */
    @Override
    public SVisitantRecord setUpdatedAt(LocalDateTime value) {
        set(22, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.S_VISITANT.UPDATED_AT</code>. 「updatedAt」- 更新时间
     */
    @Override
    public LocalDateTime getUpdatedAt() {
        return (LocalDateTime) get(22);
    }

    /**
     * Setter for <code>DB_ETERNAL.S_VISITANT.UPDATED_BY</code>. 「updatedBy」- 更新人
     */
    @Override
    public SVisitantRecord setUpdatedBy(String value) {
        set(23, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.S_VISITANT.UPDATED_BY</code>. 「updatedBy」- 更新人
     */
    @Override
    public String getUpdatedBy() {
        return (String) get(23);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Record1<String> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public void from(ISVisitant from) {
        setKey(from.getKey());
        setViewId(from.getViewId());
        setType(from.getType());
        setStaticKey(from.getStaticKey());
        setDynamicId(from.getDynamicId());
        setRelatedId(from.getRelatedId());
        setRelatedResource(from.getRelatedResource());
        setRelatedConfig(from.getRelatedConfig());
        setAclVisible(from.getAclVisible());
        setAclView(from.getAclView());
        setAclVariety(from.getAclVariety());
        setAclVarietyConfig(from.getAclVarietyConfig());
        setAclVow(from.getAclVow());
        setAclVowConfig(from.getAclVowConfig());
        setAclDepend(from.getAclDepend());
        setAclDependConfig(from.getAclDependConfig());
        setSigma(from.getSigma());
        setLanguage(from.getLanguage());
        setActive(from.getActive());
        setMetadata(from.getMetadata());
        setCreatedAt(from.getCreatedAt());
        setCreatedBy(from.getCreatedBy());
        setUpdatedAt(from.getUpdatedAt());
        setUpdatedBy(from.getUpdatedBy());
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public <E extends ISVisitant> E into(E into) {
        into.from(this);
        return into;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached SVisitantRecord
     */
    public SVisitantRecord() {
        super(SVisitant.S_VISITANT);
    }

    /**
     * Create a detached, initialised SVisitantRecord
     */
    public SVisitantRecord(String key, String viewId, String type, String staticKey, String dynamicId, String relatedId, String relatedResource, String relatedConfig, String aclVisible, String aclView, String aclVariety, String aclVarietyConfig, String aclVow, String aclVowConfig, String aclDepend, String aclDependConfig, String sigma, String language, Boolean active, String metadata, LocalDateTime createdAt, String createdBy, LocalDateTime updatedAt, String updatedBy) {
        super(SVisitant.S_VISITANT);

        set(0, key);
        set(1, viewId);
        set(2, type);
        set(3, staticKey);
        set(4, dynamicId);
        set(5, relatedId);
        set(6, relatedResource);
        set(7, relatedConfig);
        set(8, aclVisible);
        set(9, aclView);
        set(10, aclVariety);
        set(11, aclVarietyConfig);
        set(12, aclVow);
        set(13, aclVowConfig);
        set(14, aclDepend);
        set(15, aclDependConfig);
        set(16, sigma);
        set(17, language);
        set(18, active);
        set(19, metadata);
        set(20, createdAt);
        set(21, createdBy);
        set(22, updatedAt);
        set(23, updatedBy);
    }
}
