/*
 * This file is generated by jOOQ.
*/
package cn.vertxup.rbac.domain.tables.interfaces;


import java.io.Serializable;
import java.time.LocalDateTime;

import javax.annotation.Generated;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.8"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public interface ISVisitant extends Serializable {

    /**
     * Setter for <code>DB_ETERNAL.S_VISITANT.KEY</code>. 「key」- 限定记录ID
     */
    public ISVisitant setKey(String value);

    /**
     * Getter for <code>DB_ETERNAL.S_VISITANT.KEY</code>. 「key」- 限定记录ID
     */
    public String getKey();

    /**
     * Setter for <code>DB_ETERNAL.S_VISITANT.CODE</code>. 「code」- 访问者系统编码
     */
    public ISVisitant setCode(String value);

    /**
     * Getter for <code>DB_ETERNAL.S_VISITANT.CODE</code>. 「code」- 访问者系统编码
     */
    public String getCode();

    /**
     * Setter for <code>DB_ETERNAL.S_VISITANT.VIEW_ID</code>. 「viewId」- 视图访问者的ID
     */
    public ISVisitant setViewId(String value);

    /**
     * Getter for <code>DB_ETERNAL.S_VISITANT.VIEW_ID</code>. 「viewId」- 视图访问者的ID
     */
    public String getViewId();

    /**
     * Setter for <code>DB_ETERNAL.S_VISITANT.TYPE</code>. 「type」- 访问者类型
     */
    public ISVisitant setType(String value);

    /**
     * Getter for <code>DB_ETERNAL.S_VISITANT.TYPE</code>. 「type」- 访问者类型
     */
    public String getType();

    /**
     * Setter for <code>DB_ETERNAL.S_VISITANT.MODEL_KEY</code>. 「modelKey」- 模型下记录对应的ID
     */
    public ISVisitant setModelKey(String value);

    /**
     * Getter for <code>DB_ETERNAL.S_VISITANT.MODEL_KEY</code>. 「modelKey」- 模型下记录对应的ID
     */
    public String getModelKey();

    /**
     * Setter for <code>DB_ETERNAL.S_VISITANT.MODEL_ID</code>. 「modelId」- 模型对应的 identifier 
     */
    public ISVisitant setModelId(String value);

    /**
     * Getter for <code>DB_ETERNAL.S_VISITANT.MODEL_ID</code>. 「modelId」- 模型对应的 identifier 
     */
    public String getModelId();

    /**
     * Setter for <code>DB_ETERNAL.S_VISITANT.ATTR_VISIBLE</code>. 「attrVisible」- 可见的属性集
     */
    public ISVisitant setAttrVisible(String value);

    /**
     * Getter for <code>DB_ETERNAL.S_VISITANT.ATTR_VISIBLE</code>. 「attrVisible」- 可见的属性集
     */
    public String getAttrVisible();

    /**
     * Setter for <code>DB_ETERNAL.S_VISITANT.ATTR_VIEW</code>. 「attrView」- 只读的属性集
     */
    public ISVisitant setAttrView(String value);

    /**
     * Getter for <code>DB_ETERNAL.S_VISITANT.ATTR_VIEW</code>. 「attrView」- 只读的属性集
     */
    public String getAttrView();

    /**
     * Setter for <code>DB_ETERNAL.S_VISITANT.ATTR_VARIETY</code>. 「attrVariety」- 多样性的属性集，用于控制集合类型的属性
     */
    public ISVisitant setAttrVariety(String value);

    /**
     * Getter for <code>DB_ETERNAL.S_VISITANT.ATTR_VARIETY</code>. 「attrVariety」- 多样性的属性集，用于控制集合类型的属性
     */
    public String getAttrVariety();

    /**
     * Setter for <code>DB_ETERNAL.S_VISITANT.ATTR_VARIETY_CONFIG</code>. 「attrVarietyConfig」- 多样性的属性集相关配置
     */
    public ISVisitant setAttrVarietyConfig(String value);

    /**
     * Getter for <code>DB_ETERNAL.S_VISITANT.ATTR_VARIETY_CONFIG</code>. 「attrVarietyConfig」- 多样性的属性集相关配置
     */
    public String getAttrVarietyConfig();

    /**
     * Setter for <code>DB_ETERNAL.S_VISITANT.ATTR_VOW</code>. 「attrVow」- 引用类属性集
     */
    public ISVisitant setAttrVow(String value);

    /**
     * Getter for <code>DB_ETERNAL.S_VISITANT.ATTR_VOW</code>. 「attrVow」- 引用类属性集
     */
    public String getAttrVow();

    /**
     * Setter for <code>DB_ETERNAL.S_VISITANT.ATTR_VOW_CONFIG</code>. 「attrVowConfig」- 引用类属性集相关配置
     */
    public ISVisitant setAttrVowConfig(String value);

    /**
     * Getter for <code>DB_ETERNAL.S_VISITANT.ATTR_VOW_CONFIG</code>. 「attrVowConfig」- 引用类属性集相关配置
     */
    public String getAttrVowConfig();

    /**
     * Setter for <code>DB_ETERNAL.S_VISITANT.SIGMA</code>. 「sigma」- 用户组绑定的统一标识
     */
    public ISVisitant setSigma(String value);

    /**
     * Getter for <code>DB_ETERNAL.S_VISITANT.SIGMA</code>. 「sigma」- 用户组绑定的统一标识
     */
    public String getSigma();

    /**
     * Setter for <code>DB_ETERNAL.S_VISITANT.LANGUAGE</code>. 「language」- 使用的语言
     */
    public ISVisitant setLanguage(String value);

    /**
     * Getter for <code>DB_ETERNAL.S_VISITANT.LANGUAGE</code>. 「language」- 使用的语言
     */
    public String getLanguage();

    /**
     * Setter for <code>DB_ETERNAL.S_VISITANT.ACTIVE</code>. 「active」- 是否启用
     */
    public ISVisitant setActive(Boolean value);

    /**
     * Getter for <code>DB_ETERNAL.S_VISITANT.ACTIVE</code>. 「active」- 是否启用
     */
    public Boolean getActive();

    /**
     * Setter for <code>DB_ETERNAL.S_VISITANT.METADATA</code>. 「metadata」- 附加配置数据
     */
    public ISVisitant setMetadata(String value);

    /**
     * Getter for <code>DB_ETERNAL.S_VISITANT.METADATA</code>. 「metadata」- 附加配置数据
     */
    public String getMetadata();

    /**
     * Setter for <code>DB_ETERNAL.S_VISITANT.CREATED_AT</code>. 「createdAt」- 创建时间
     */
    public ISVisitant setCreatedAt(LocalDateTime value);

    /**
     * Getter for <code>DB_ETERNAL.S_VISITANT.CREATED_AT</code>. 「createdAt」- 创建时间
     */
    public LocalDateTime getCreatedAt();

    /**
     * Setter for <code>DB_ETERNAL.S_VISITANT.CREATED_BY</code>. 「createdBy」- 创建人
     */
    public ISVisitant setCreatedBy(String value);

    /**
     * Getter for <code>DB_ETERNAL.S_VISITANT.CREATED_BY</code>. 「createdBy」- 创建人
     */
    public String getCreatedBy();

    /**
     * Setter for <code>DB_ETERNAL.S_VISITANT.UPDATED_AT</code>. 「updatedAt」- 更新时间
     */
    public ISVisitant setUpdatedAt(LocalDateTime value);

    /**
     * Getter for <code>DB_ETERNAL.S_VISITANT.UPDATED_AT</code>. 「updatedAt」- 更新时间
     */
    public LocalDateTime getUpdatedAt();

    /**
     * Setter for <code>DB_ETERNAL.S_VISITANT.UPDATED_BY</code>. 「updatedBy」- 更新人
     */
    public ISVisitant setUpdatedBy(String value);

    /**
     * Getter for <code>DB_ETERNAL.S_VISITANT.UPDATED_BY</code>. 「updatedBy」- 更新人
     */
    public String getUpdatedBy();

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    /**
     * Load data from another generated Record/POJO implementing the common interface ISVisitant
     */
    public void from(cn.vertxup.rbac.domain.tables.interfaces.ISVisitant from);

    /**
     * Copy data into another generated Record/POJO implementing the common interface ISVisitant
     */
    public <E extends cn.vertxup.rbac.domain.tables.interfaces.ISVisitant> E into(E into);

    default ISVisitant fromJson(io.vertx.core.json.JsonObject json) {
        setKey(json.getString("KEY"));
        setCode(json.getString("CODE"));
        setViewId(json.getString("VIEW_ID"));
        setType(json.getString("TYPE"));
        setModelKey(json.getString("MODEL_KEY"));
        setModelId(json.getString("MODEL_ID"));
        setAttrVisible(json.getString("ATTR_VISIBLE"));
        setAttrView(json.getString("ATTR_VIEW"));
        setAttrVariety(json.getString("ATTR_VARIETY"));
        setAttrVarietyConfig(json.getString("ATTR_VARIETY_CONFIG"));
        setAttrVow(json.getString("ATTR_VOW"));
        setAttrVowConfig(json.getString("ATTR_VOW_CONFIG"));
        setSigma(json.getString("SIGMA"));
        setLanguage(json.getString("LANGUAGE"));
        setActive(json.getBoolean("ACTIVE"));
        setMetadata(json.getString("METADATA"));
        // Omitting unrecognized type java.time.LocalDateTime for column CREATED_AT!
        setCreatedBy(json.getString("CREATED_BY"));
        // Omitting unrecognized type java.time.LocalDateTime for column UPDATED_AT!
        setUpdatedBy(json.getString("UPDATED_BY"));
        return this;
    }


    default io.vertx.core.json.JsonObject toJson() {
        io.vertx.core.json.JsonObject json = new io.vertx.core.json.JsonObject();
        json.put("KEY",getKey());
        json.put("CODE",getCode());
        json.put("VIEW_ID",getViewId());
        json.put("TYPE",getType());
        json.put("MODEL_KEY",getModelKey());
        json.put("MODEL_ID",getModelId());
        json.put("ATTR_VISIBLE",getAttrVisible());
        json.put("ATTR_VIEW",getAttrView());
        json.put("ATTR_VARIETY",getAttrVariety());
        json.put("ATTR_VARIETY_CONFIG",getAttrVarietyConfig());
        json.put("ATTR_VOW",getAttrVow());
        json.put("ATTR_VOW_CONFIG",getAttrVowConfig());
        json.put("SIGMA",getSigma());
        json.put("LANGUAGE",getLanguage());
        json.put("ACTIVE",getActive());
        json.put("METADATA",getMetadata());
        // Omitting unrecognized type java.time.LocalDateTime for column CREATED_AT!
        json.put("CREATED_BY",getCreatedBy());
        // Omitting unrecognized type java.time.LocalDateTime for column UPDATED_AT!
        json.put("UPDATED_BY",getUpdatedBy());
        return json;
    }

}
