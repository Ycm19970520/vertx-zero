package io.vertx.tp.workflow.uca.component;

import io.vertx.core.Future;
import io.vertx.core.json.JsonObject;
import io.vertx.tp.workflow.atom.WMove;
import io.vertx.tp.workflow.atom.WProcess;
import io.vertx.tp.workflow.atom.WRecord;
import io.vertx.tp.workflow.uca.runner.IsOn;
import org.camunda.bpm.engine.task.Task;

/**
 * @author <a href="http://www.origin-x.cn">Lang</a>
 */
public class TransferStandard extends AbstractTodo implements Transfer {
    @Override
    public Future<WRecord> moveAsync(final JsonObject params, final WProcess wProcess) {
        /*
         * Capture the next task for standard workflow
         * 1. Here camunda-workflow task has been finished
         * 2. Check condition in workflow engine
         * -- 2.1. Active task is not end
         * -- 2.2. Next task is user task
         * */
        return this.inputAsync(params).compose(normalized -> wProcess.next().compose(taskNext -> {
            /*
             * Data Processing, Check if create new ticket with todo here.
             * 1. Submit Direct
             * 2. Create new record here:
             * -- saveAsync instead of updateAsync
             * -- create new ticket
             * -- create new todo
             */
            final JsonObject dataTicket = KtTodo.closeJ(params, wProcess);

            final IsOn is = IsOn.get();
            if (wProcess.isContinue() && is.isUserEvent(taskNext)) {
                /*
                 * Create new WProcess based on process / task and move
                 *
                 * Here instance contains previous data such as:
                 * 1. Task
                 * 2. MetaInstance is running configuration
                 * 3. ProcessInstance
                 *
                 * The WMove should be generated by
                 * 1. Previous task definition key
                 * 2. Data with moving rules.
                 */
            } else {

            }
            return null;
        }));
    }

    private WProcess createNext(final WProcess process) {
        // Create new process
        final WProcess processNext = WProcess.create();

        // Active task extraction
        final Task task = process.task();
        final WMove move = this.moveGet(task.getTaskDefinitionKey());
        return null;
    }
}
