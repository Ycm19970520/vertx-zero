/*
 * This file is generated by jOOQ.
 */
package cn.vertxup.workflow.domain.tables;


import cn.vertxup.workflow.domain.Db;
import cn.vertxup.workflow.domain.Keys;
import cn.vertxup.workflow.domain.tables.records.WMovementRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class WMovement extends TableImpl<WMovementRecord> {

    /**
     * The reference instance of <code>DB_ETERNAL.W_MOVEMENT</code>
     */
    public static final WMovement W_MOVEMENT = new WMovement();
    private static final long serialVersionUID = 1L;
    /**
     * The column <code>DB_ETERNAL.W_MOVEMENT.KEY</code>. 「key」- 轨迹主键
     */
    public final TableField<WMovementRecord, String> KEY = createField(DSL.name("KEY"), SQLDataType.VARCHAR(36).nullable(false), this, "「key」- 轨迹主键");
    /**
     * The column <code>DB_ETERNAL.W_MOVEMENT.CODE</code>. 「code」- 轨迹编号（系统可用）
     */
    public final TableField<WMovementRecord, String> CODE = createField(DSL.name("CODE"), SQLDataType.VARCHAR(255), this, "「code」- 轨迹编号（系统可用）");
    /**
     * The column <code>DB_ETERNAL.W_MOVEMENT.NAME</code>. 「name」- 流程定义名称
     */
    public final TableField<WMovementRecord, String> NAME = createField(DSL.name("NAME"), SQLDataType.VARCHAR(255), this, "「name」- 流程定义名称");
    /**
     * The column <code>DB_ETERNAL.W_MOVEMENT.SOURCE_KEY</code>. 「sourceKey」
     */
    public final TableField<WMovementRecord, String> SOURCE_KEY = createField(DSL.name("SOURCE_KEY"), SQLDataType.VARCHAR(36), this, "「sourceKey」");
    /**
     * The column <code>DB_ETERNAL.W_MOVEMENT.TARGET_KEY</code>. 「targetKey」
     */
    public final TableField<WMovementRecord, String> TARGET_KEY = createField(DSL.name("TARGET_KEY"), SQLDataType.VARCHAR(36), this, "「targetKey」");
    /**
     * The column <code>DB_ETERNAL.W_MOVEMENT.FLOW_INSTANCE_ID</code>.
     * 「flowInstanceId」- 所属流程实例ID
     */
    public final TableField<WMovementRecord, String> FLOW_INSTANCE_ID = createField(DSL.name("FLOW_INSTANCE_ID"), SQLDataType.VARCHAR(36), this, "「flowInstanceId」- 所属流程实例ID");
    /**
     * The column <code>DB_ETERNAL.W_MOVEMENT.MOVE_NAME</code>. 「moveName」-
     * 执行人姓名
     */
    public final TableField<WMovementRecord, String> MOVE_NAME = createField(DSL.name("MOVE_NAME"), SQLDataType.VARCHAR(255), this, "「moveName」- 执行人姓名");
    /**
     * The column <code>DB_ETERNAL.W_MOVEMENT.MOVE_BY</code>. 「moveBy」- 执行人员
     */
    public final TableField<WMovementRecord, String> MOVE_BY = createField(DSL.name("MOVE_BY"), SQLDataType.VARCHAR(36), this, "「moveBy」- 执行人员");
    /**
     * The column <code>DB_ETERNAL.W_MOVEMENT.MOVE_AT</code>. 「moveAt」- 执行时间
     */
    public final TableField<WMovementRecord, LocalDateTime> MOVE_AT = createField(DSL.name("MOVE_AT"), SQLDataType.LOCALDATETIME(0), this, "「moveAt」- 执行时间");
    /**
     * The column <code>DB_ETERNAL.W_MOVEMENT.MOVE_COMPONENT</code>.
     * 「moveComponent」- 执行扩展组件
     */
    public final TableField<WMovementRecord, String> MOVE_COMPONENT = createField(DSL.name("MOVE_COMPONENT"), SQLDataType.CLOB, this, "「moveComponent」- 执行扩展组件");
    /**
     * The column <code>DB_ETERNAL.W_MOVEMENT.ACTIVE</code>. 「active」- 是否启用
     */
    public final TableField<WMovementRecord, Boolean> ACTIVE = createField(DSL.name("ACTIVE"), SQLDataType.BIT, this, "「active」- 是否启用");
    /**
     * The column <code>DB_ETERNAL.W_MOVEMENT.SIGMA</code>. 「sigma」- 统一标识
     */
    public final TableField<WMovementRecord, String> SIGMA = createField(DSL.name("SIGMA"), SQLDataType.VARCHAR(32), this, "「sigma」- 统一标识");
    /**
     * The column <code>DB_ETERNAL.W_MOVEMENT.METADATA</code>. 「metadata」- 附加配置
     */
    public final TableField<WMovementRecord, String> METADATA = createField(DSL.name("METADATA"), SQLDataType.CLOB, this, "「metadata」- 附加配置");
    /**
     * The column <code>DB_ETERNAL.W_MOVEMENT.LANGUAGE</code>. 「language」- 使用的语言
     */
    public final TableField<WMovementRecord, String> LANGUAGE = createField(DSL.name("LANGUAGE"), SQLDataType.VARCHAR(8), this, "「language」- 使用的语言");
    /**
     * The column <code>DB_ETERNAL.W_MOVEMENT.CREATED_AT</code>. 「createdAt」-
     * 创建时间
     */
    public final TableField<WMovementRecord, LocalDateTime> CREATED_AT = createField(DSL.name("CREATED_AT"), SQLDataType.LOCALDATETIME(0), this, "「createdAt」- 创建时间");
    /**
     * The column <code>DB_ETERNAL.W_MOVEMENT.CREATED_BY</code>. 「createdBy」-
     * 创建人
     */
    public final TableField<WMovementRecord, String> CREATED_BY = createField(DSL.name("CREATED_BY"), SQLDataType.VARCHAR(36), this, "「createdBy」- 创建人");
    /**
     * The column <code>DB_ETERNAL.W_MOVEMENT.UPDATED_AT</code>. 「updatedAt」-
     * 更新时间
     */
    public final TableField<WMovementRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("UPDATED_AT"), SQLDataType.LOCALDATETIME(0), this, "「updatedAt」- 更新时间");
    /**
     * The column <code>DB_ETERNAL.W_MOVEMENT.UPDATED_BY</code>. 「updatedBy」-
     * 更新人
     */
    public final TableField<WMovementRecord, String> UPDATED_BY = createField(DSL.name("UPDATED_BY"), SQLDataType.VARCHAR(36), this, "「updatedBy」- 更新人");

    private WMovement(Name alias, Table<WMovementRecord> aliased) {
        this(alias, aliased, null);
    }

    private WMovement(Name alias, Table<WMovementRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>DB_ETERNAL.W_MOVEMENT</code> table reference
     */
    public WMovement(String alias) {
        this(DSL.name(alias), W_MOVEMENT);
    }

    /**
     * Create an aliased <code>DB_ETERNAL.W_MOVEMENT</code> table reference
     */
    public WMovement(Name alias) {
        this(alias, W_MOVEMENT);
    }

    /**
     * Create a <code>DB_ETERNAL.W_MOVEMENT</code> table reference
     */
    public WMovement() {
        this(DSL.name("W_MOVEMENT"), null);
    }

    public <O extends Record> WMovement(Table<O> child, ForeignKey<O, WMovementRecord> key) {
        super(child, key, W_MOVEMENT);
    }

    /**
     * The class holding records for this type
     */
    @Override
    public Class<WMovementRecord> getRecordType() {
        return WMovementRecord.class;
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Db.DB_ETERNAL;
    }

    @Override
    public UniqueKey<WMovementRecord> getPrimaryKey() {
        return Keys.KEY_W_MOVEMENT_PRIMARY;
    }

    @Override
    public List<UniqueKey<WMovementRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_W_MOVEMENT_CODE);
    }

    @Override
    public WMovement as(String alias) {
        return new WMovement(DSL.name(alias), this);
    }

    @Override
    public WMovement as(Name alias) {
        return new WMovement(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public WMovement rename(String name) {
        return new WMovement(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public WMovement rename(Name name) {
        return new WMovement(name, null);
    }

    // -------------------------------------------------------------------------
    // Row18 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row18<String, String, String, String, String, String, String, String, LocalDateTime, String, Boolean, String, String, String, LocalDateTime, String, LocalDateTime, String> fieldsRow() {
        return (Row18) super.fieldsRow();
    }
}
