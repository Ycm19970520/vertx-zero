/*
 * This file is generated by jOOQ.
 */
package cn.vertxup.workflow.domain.tables.interfaces;


import io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo;

import java.io.Serializable;
import java.time.LocalDateTime;


import static io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo.*;
/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public interface IWMovement extends VertxPojo, Serializable {

    /**
     * Setter for <code>DB_ETERNAL.W_MOVEMENT.KEY</code>. 「key」- 轨迹主键
     */
    public IWMovement setKey(String value);

    /**
     * Getter for <code>DB_ETERNAL.W_MOVEMENT.KEY</code>. 「key」- 轨迹主键
     */
    public String getKey();

    /**
     * Setter for <code>DB_ETERNAL.W_MOVEMENT.CODE</code>. 「code」- 轨迹编号（系统可用）
     */
    public IWMovement setCode(String value);

    /**
     * Getter for <code>DB_ETERNAL.W_MOVEMENT.CODE</code>. 「code」- 轨迹编号（系统可用）
     */
    public String getCode();

    /**
     * Setter for <code>DB_ETERNAL.W_MOVEMENT.NAME</code>. 「name」- 流程定义名称
     */
    public IWMovement setName(String value);

    /**
     * Getter for <code>DB_ETERNAL.W_MOVEMENT.NAME</code>. 「name」- 流程定义名称
     */
    public String getName();

    /**
     * Setter for <code>DB_ETERNAL.W_MOVEMENT.SOURCE_KEY</code>. 「sourceKey」
     */
    public IWMovement setSourceKey(String value);

    /**
     * Getter for <code>DB_ETERNAL.W_MOVEMENT.SOURCE_KEY</code>. 「sourceKey」
     */
    public String getSourceKey();

    /**
     * Setter for <code>DB_ETERNAL.W_MOVEMENT.TARGET_KEY</code>. 「targetKey」
     */
    public IWMovement setTargetKey(String value);

    /**
     * Getter for <code>DB_ETERNAL.W_MOVEMENT.TARGET_KEY</code>. 「targetKey」
     */
    public String getTargetKey();

    /**
     * Setter for <code>DB_ETERNAL.W_MOVEMENT.FLOW_INSTANCE_ID</code>.
     * 「flowInstanceId」- 所属流程实例ID
     */
    public IWMovement setFlowInstanceId(String value);

    /**
     * Getter for <code>DB_ETERNAL.W_MOVEMENT.FLOW_INSTANCE_ID</code>.
     * 「flowInstanceId」- 所属流程实例ID
     */
    public String getFlowInstanceId();

    /**
     * Setter for <code>DB_ETERNAL.W_MOVEMENT.MOVE_NAME</code>. 「moveName」-
     * 执行人姓名
     */
    public IWMovement setMoveName(String value);

    /**
     * Getter for <code>DB_ETERNAL.W_MOVEMENT.MOVE_NAME</code>. 「moveName」-
     * 执行人姓名
     */
    public String getMoveName();

    /**
     * Setter for <code>DB_ETERNAL.W_MOVEMENT.MOVE_BY</code>. 「moveBy」- 执行人员
     */
    public IWMovement setMoveBy(String value);

    /**
     * Getter for <code>DB_ETERNAL.W_MOVEMENT.MOVE_BY</code>. 「moveBy」- 执行人员
     */
    public String getMoveBy();

    /**
     * Setter for <code>DB_ETERNAL.W_MOVEMENT.MOVE_AT</code>. 「moveAt」- 执行时间
     */
    public IWMovement setMoveAt(LocalDateTime value);

    /**
     * Getter for <code>DB_ETERNAL.W_MOVEMENT.MOVE_AT</code>. 「moveAt」- 执行时间
     */
    public LocalDateTime getMoveAt();

    /**
     * Setter for <code>DB_ETERNAL.W_MOVEMENT.MOVE_COMPONENT</code>.
     * 「moveComponent」- 执行扩展组件
     */
    public IWMovement setMoveComponent(String value);

    /**
     * Getter for <code>DB_ETERNAL.W_MOVEMENT.MOVE_COMPONENT</code>.
     * 「moveComponent」- 执行扩展组件
     */
    public String getMoveComponent();

    /**
     * Setter for <code>DB_ETERNAL.W_MOVEMENT.ACTIVE</code>. 「active」- 是否启用
     */
    public IWMovement setActive(Boolean value);

    /**
     * Getter for <code>DB_ETERNAL.W_MOVEMENT.ACTIVE</code>. 「active」- 是否启用
     */
    public Boolean getActive();

    /**
     * Setter for <code>DB_ETERNAL.W_MOVEMENT.SIGMA</code>. 「sigma」- 统一标识
     */
    public IWMovement setSigma(String value);

    /**
     * Getter for <code>DB_ETERNAL.W_MOVEMENT.SIGMA</code>. 「sigma」- 统一标识
     */
    public String getSigma();

    /**
     * Setter for <code>DB_ETERNAL.W_MOVEMENT.METADATA</code>. 「metadata」- 附加配置
     */
    public IWMovement setMetadata(String value);

    /**
     * Getter for <code>DB_ETERNAL.W_MOVEMENT.METADATA</code>. 「metadata」- 附加配置
     */
    public String getMetadata();

    /**
     * Setter for <code>DB_ETERNAL.W_MOVEMENT.LANGUAGE</code>. 「language」- 使用的语言
     */
    public IWMovement setLanguage(String value);

    /**
     * Getter for <code>DB_ETERNAL.W_MOVEMENT.LANGUAGE</code>. 「language」- 使用的语言
     */
    public String getLanguage();

    /**
     * Setter for <code>DB_ETERNAL.W_MOVEMENT.CREATED_AT</code>. 「createdAt」-
     * 创建时间
     */
    public IWMovement setCreatedAt(LocalDateTime value);

    /**
     * Getter for <code>DB_ETERNAL.W_MOVEMENT.CREATED_AT</code>. 「createdAt」-
     * 创建时间
     */
    public LocalDateTime getCreatedAt();

    /**
     * Setter for <code>DB_ETERNAL.W_MOVEMENT.CREATED_BY</code>. 「createdBy」-
     * 创建人
     */
    public IWMovement setCreatedBy(String value);

    /**
     * Getter for <code>DB_ETERNAL.W_MOVEMENT.CREATED_BY</code>. 「createdBy」-
     * 创建人
     */
    public String getCreatedBy();

    /**
     * Setter for <code>DB_ETERNAL.W_MOVEMENT.UPDATED_AT</code>. 「updatedAt」-
     * 更新时间
     */
    public IWMovement setUpdatedAt(LocalDateTime value);

    /**
     * Getter for <code>DB_ETERNAL.W_MOVEMENT.UPDATED_AT</code>. 「updatedAt」-
     * 更新时间
     */
    public LocalDateTime getUpdatedAt();

    /**
     * Setter for <code>DB_ETERNAL.W_MOVEMENT.UPDATED_BY</code>. 「updatedBy」-
     * 更新人
     */
    public IWMovement setUpdatedBy(String value);

    /**
     * Getter for <code>DB_ETERNAL.W_MOVEMENT.UPDATED_BY</code>. 「updatedBy」-
     * 更新人
     */
    public String getUpdatedBy();

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    /**
     * Load data from another generated Record/POJO implementing the common
     * interface IWMovement
     */
    public void from(IWMovement from);

    /**
     * Copy data into another generated Record/POJO implementing the common
     * interface IWMovement
     */
    public <E extends IWMovement> E into(E into);

        @Override
        public default IWMovement fromJson(io.vertx.core.json.JsonObject json) {
                setOrThrow(this::setKey,json::getString,"KEY","java.lang.String");
                setOrThrow(this::setCode,json::getString,"CODE","java.lang.String");
                setOrThrow(this::setName,json::getString,"NAME","java.lang.String");
                setOrThrow(this::setSourceKey,json::getString,"SOURCE_KEY","java.lang.String");
                setOrThrow(this::setTargetKey,json::getString,"TARGET_KEY","java.lang.String");
                setOrThrow(this::setFlowInstanceId,json::getString,"FLOW_INSTANCE_ID","java.lang.String");
                setOrThrow(this::setMoveName,json::getString,"MOVE_NAME","java.lang.String");
                setOrThrow(this::setMoveBy,json::getString,"MOVE_BY","java.lang.String");
                setOrThrow(this::setMoveAt,key -> {String s = json.getString(key); return s==null?null:java.time.LocalDateTime.parse(s);},"MOVE_AT","java.time.LocalDateTime");
                setOrThrow(this::setMoveComponent,json::getString,"MOVE_COMPONENT","java.lang.String");
                setOrThrow(this::setActive,json::getBoolean,"ACTIVE","java.lang.Boolean");
                setOrThrow(this::setSigma,json::getString,"SIGMA","java.lang.String");
                setOrThrow(this::setMetadata,json::getString,"METADATA","java.lang.String");
                setOrThrow(this::setLanguage,json::getString,"LANGUAGE","java.lang.String");
                setOrThrow(this::setCreatedAt,key -> {String s = json.getString(key); return s==null?null:java.time.LocalDateTime.parse(s);},"CREATED_AT","java.time.LocalDateTime");
                setOrThrow(this::setCreatedBy,json::getString,"CREATED_BY","java.lang.String");
                setOrThrow(this::setUpdatedAt,key -> {String s = json.getString(key); return s==null?null:java.time.LocalDateTime.parse(s);},"UPDATED_AT","java.time.LocalDateTime");
                setOrThrow(this::setUpdatedBy,json::getString,"UPDATED_BY","java.lang.String");
                return this;
        }


        @Override
        public default io.vertx.core.json.JsonObject toJson() {
                io.vertx.core.json.JsonObject json = new io.vertx.core.json.JsonObject();
                json.put("KEY",getKey());
                json.put("CODE",getCode());
                json.put("NAME",getName());
                json.put("SOURCE_KEY",getSourceKey());
                json.put("TARGET_KEY",getTargetKey());
                json.put("FLOW_INSTANCE_ID",getFlowInstanceId());
                json.put("MOVE_NAME",getMoveName());
                json.put("MOVE_BY",getMoveBy());
                json.put("MOVE_AT",getMoveAt()==null?null:getMoveAt().toString());
                json.put("MOVE_COMPONENT",getMoveComponent());
                json.put("ACTIVE",getActive());
                json.put("SIGMA",getSigma());
                json.put("METADATA",getMetadata());
                json.put("LANGUAGE",getLanguage());
                json.put("CREATED_AT",getCreatedAt()==null?null:getCreatedAt().toString());
                json.put("CREATED_BY",getCreatedBy());
                json.put("UPDATED_AT",getUpdatedAt()==null?null:getUpdatedAt().toString());
                json.put("UPDATED_BY",getUpdatedBy());
                return json;
        }

}
