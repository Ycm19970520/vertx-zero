/*
 * This file is generated by jOOQ.
 */
package cn.vertxup.workflow.domain.tables;


import cn.vertxup.workflow.domain.Db;
import cn.vertxup.workflow.domain.Keys;
import cn.vertxup.workflow.domain.tables.records.WInstanceRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class WInstance extends TableImpl<WInstanceRecord> {

    /**
     * The reference instance of <code>DB_ETERNAL.W_INSTANCE</code>
     */
    public static final WInstance W_INSTANCE = new WInstance();
    private static final long serialVersionUID = 1L;
    /**
     * The column <code>DB_ETERNAL.W_INSTANCE.KEY</code>. 「key」- 流程定义主键
     */
    public final TableField<WInstanceRecord, String> KEY = createField(DSL.name("KEY"), SQLDataType.VARCHAR(36).nullable(false), this, "「key」- 流程定义主键");
    /**
     * The column <code>DB_ETERNAL.W_INSTANCE.CODE</code>. 「code」- 流程定义编号（系统可用）
     */
    public final TableField<WInstanceRecord, String> CODE = createField(DSL.name("CODE"), SQLDataType.VARCHAR(255), this, "「code」- 流程定义编号（系统可用）");
    /**
     * The column <code>DB_ETERNAL.W_INSTANCE.NAME</code>. 「name」- 流程标题
     */
    public final TableField<WInstanceRecord, String> NAME = createField(DSL.name("NAME"), SQLDataType.VARCHAR(255), this, "「name」- 流程标题");
    /**
     * The column <code>DB_ETERNAL.W_INSTANCE.TODO_ID</code>. 「todoId」- 绑定TodoId
     */
    public final TableField<WInstanceRecord, String> TODO_ID = createField(DSL.name("TODO_ID"), SQLDataType.VARCHAR(36), this, "「todoId」- 绑定TodoId");
    /**
     * The column <code>DB_ETERNAL.W_INSTANCE.INSTANCE_ID</code>. 「instanceId」-
     * 实例ID（查询Task专用）：getProcessInstanceId
     */
    public final TableField<WInstanceRecord, String> INSTANCE_ID = createField(DSL.name("INSTANCE_ID"), SQLDataType.VARCHAR(64).nullable(false), this, "「instanceId」- 实例ID（查询Task专用）：getProcessInstanceId");
    /**
     * The column <code>DB_ETERNAL.W_INSTANCE.INSTANCE_ROOT_ID</code>.
     * 「instanceRootId」- 根实例ID：getRootProcessInstanceId
     */
    public final TableField<WInstanceRecord, String> INSTANCE_ROOT_ID = createField(DSL.name("INSTANCE_ROOT_ID"), SQLDataType.VARCHAR(64), this, "「instanceRootId」- 根实例ID：getRootProcessInstanceId");
    /**
     * The column <code>DB_ETERNAL.W_INSTANCE.INSTANCE_CASE_ID</code>.
     * 「instanceCaseId」- getCaseInstanceId
     */
    public final TableField<WInstanceRecord, String> INSTANCE_CASE_ID = createField(DSL.name("INSTANCE_CASE_ID"), SQLDataType.VARCHAR(64), this, "「instanceCaseId」- getCaseInstanceId");
    /**
     * The column <code>DB_ETERNAL.W_INSTANCE.TENANT_ID</code>. 「tenantId」- 租户ID
     */
    public final TableField<WInstanceRecord, String> TENANT_ID = createField(DSL.name("TENANT_ID"), SQLDataType.VARCHAR(64), this, "「tenantId」- 租户ID");
    /**
     * The column <code>DB_ETERNAL.W_INSTANCE.P_DEFINITION_ID</code>.
     * 「pDefinitionId」- 定义ID, getProcessDefinitionId
     */
    public final TableField<WInstanceRecord, String> P_DEFINITION_ID = createField(DSL.name("P_DEFINITION_ID"), SQLDataType.VARCHAR(64), this, "「pDefinitionId」- 定义ID, getProcessDefinitionId");
    /**
     * The column <code>DB_ETERNAL.W_INSTANCE.P_EXECUTION_ID</code>.
     * 「pExecutionId」- 任务执行ID（查询Task专用）- getId
     */
    public final TableField<WInstanceRecord, String> P_EXECUTION_ID = createField(DSL.name("P_EXECUTION_ID"), SQLDataType.VARCHAR(64), this, "「pExecutionId」- 任务执行ID（查询Task专用）- getId");
    /**
     * The column <code>DB_ETERNAL.W_INSTANCE.P_BUSINESS_KEY</code>.
     * 「pBusinessId」- getBusinessKey
     */
    public final TableField<WInstanceRecord, String> P_BUSINESS_KEY = createField(DSL.name("P_BUSINESS_KEY"), SQLDataType.VARCHAR(64), this, "「pBusinessId」- getBusinessKey");
    /**
     * The column <code>DB_ETERNAL.W_INSTANCE.ACTIVE</code>. 「active」- 是否启用
     */
    public final TableField<WInstanceRecord, Boolean> ACTIVE = createField(DSL.name("ACTIVE"), SQLDataType.BIT, this, "「active」- 是否启用");
    /**
     * The column <code>DB_ETERNAL.W_INSTANCE.SIGMA</code>. 「sigma」- 统一标识
     */
    public final TableField<WInstanceRecord, String> SIGMA = createField(DSL.name("SIGMA"), SQLDataType.VARCHAR(32), this, "「sigma」- 统一标识");
    /**
     * The column <code>DB_ETERNAL.W_INSTANCE.METADATA</code>. 「metadata」- 附加配置
     */
    public final TableField<WInstanceRecord, String> METADATA = createField(DSL.name("METADATA"), SQLDataType.CLOB, this, "「metadata」- 附加配置");
    /**
     * The column <code>DB_ETERNAL.W_INSTANCE.LANGUAGE</code>. 「language」- 使用的语言
     */
    public final TableField<WInstanceRecord, String> LANGUAGE = createField(DSL.name("LANGUAGE"), SQLDataType.VARCHAR(8), this, "「language」- 使用的语言");
    /**
     * The column <code>DB_ETERNAL.W_INSTANCE.CREATED_AT</code>. 「createdAt」-
     * 创建时间
     */
    public final TableField<WInstanceRecord, LocalDateTime> CREATED_AT = createField(DSL.name("CREATED_AT"), SQLDataType.LOCALDATETIME(0), this, "「createdAt」- 创建时间");
    /**
     * The column <code>DB_ETERNAL.W_INSTANCE.CREATED_BY</code>. 「createdBy」-
     * 创建人
     */
    public final TableField<WInstanceRecord, String> CREATED_BY = createField(DSL.name("CREATED_BY"), SQLDataType.VARCHAR(36), this, "「createdBy」- 创建人");
    /**
     * The column <code>DB_ETERNAL.W_INSTANCE.UPDATED_AT</code>. 「updatedAt」-
     * 更新时间
     */
    public final TableField<WInstanceRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("UPDATED_AT"), SQLDataType.LOCALDATETIME(0), this, "「updatedAt」- 更新时间");
    /**
     * The column <code>DB_ETERNAL.W_INSTANCE.UPDATED_BY</code>. 「updatedBy」-
     * 更新人
     */
    public final TableField<WInstanceRecord, String> UPDATED_BY = createField(DSL.name("UPDATED_BY"), SQLDataType.VARCHAR(36), this, "「updatedBy」- 更新人");

    private WInstance(Name alias, Table<WInstanceRecord> aliased) {
        this(alias, aliased, null);
    }

    private WInstance(Name alias, Table<WInstanceRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>DB_ETERNAL.W_INSTANCE</code> table reference
     */
    public WInstance(String alias) {
        this(DSL.name(alias), W_INSTANCE);
    }

    /**
     * Create an aliased <code>DB_ETERNAL.W_INSTANCE</code> table reference
     */
    public WInstance(Name alias) {
        this(alias, W_INSTANCE);
    }

    /**
     * Create a <code>DB_ETERNAL.W_INSTANCE</code> table reference
     */
    public WInstance() {
        this(DSL.name("W_INSTANCE"), null);
    }

    public <O extends Record> WInstance(Table<O> child, ForeignKey<O, WInstanceRecord> key) {
        super(child, key, W_INSTANCE);
    }

    /**
     * The class holding records for this type
     */
    @Override
    public Class<WInstanceRecord> getRecordType() {
        return WInstanceRecord.class;
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Db.DB_ETERNAL;
    }

    @Override
    public UniqueKey<WInstanceRecord> getPrimaryKey() {
        return Keys.KEY_W_INSTANCE_PRIMARY;
    }

    @Override
    public List<UniqueKey<WInstanceRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_W_INSTANCE_CODE, Keys.KEY_W_INSTANCE_INSTANCE_ID);
    }

    @Override
    public WInstance as(String alias) {
        return new WInstance(DSL.name(alias), this);
    }

    @Override
    public WInstance as(Name alias) {
        return new WInstance(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public WInstance rename(String name) {
        return new WInstance(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public WInstance rename(Name name) {
        return new WInstance(name, null);
    }

    // -------------------------------------------------------------------------
    // Row19 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row19<String, String, String, String, String, String, String, String, String, String, String, Boolean, String, String, String, LocalDateTime, String, LocalDateTime, String> fieldsRow() {
        return (Row19) super.fieldsRow();
    }
}
