/*
 * This file is generated by jOOQ.
 */
package cn.vertxup.workflow.domain.tables.interfaces;


import io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo;

import java.io.Serializable;
import java.time.LocalDateTime;


import static io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo.*;
/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public interface IWFlow extends VertxPojo, Serializable {

    /**
     * Setter for <code>DB_ETERNAL.W_FLOW.KEY</code>. 「key」- 流程定义主键
     */
    public IWFlow setKey(String value);

    /**
     * Getter for <code>DB_ETERNAL.W_FLOW.KEY</code>. 「key」- 流程定义主键
     */
    public String getKey();

    /**
     * Setter for <code>DB_ETERNAL.W_FLOW.NAMESPACE</code>. 「namespace」-
     * 所在名空间（区分应用的第二维度）
     */
    public IWFlow setNamespace(String value);

    /**
     * Getter for <code>DB_ETERNAL.W_FLOW.NAMESPACE</code>. 「namespace」-
     * 所在名空间（区分应用的第二维度）
     */
    public String getNamespace();

    /**
     * Setter for <code>DB_ETERNAL.W_FLOW.NAME</code>. 「name」- 流程定义名称
     */
    public IWFlow setName(String value);

    /**
     * Getter for <code>DB_ETERNAL.W_FLOW.NAME</code>. 「name」- 流程定义名称
     */
    public String getName();

    /**
     * Setter for <code>DB_ETERNAL.W_FLOW.CODE</code>. 「code」- 流程定义编号（系统可用）
     */
    public IWFlow setCode(String value);

    /**
     * Getter for <code>DB_ETERNAL.W_FLOW.CODE</code>. 「code」- 流程定义编号（系统可用）
     */
    public String getCode();

    /**
     * Setter for <code>DB_ETERNAL.W_FLOW.TYPE</code>. 「type」- 流程类型，BPMN，JBPM等
     */
    public IWFlow setType(String value);

    /**
     * Getter for <code>DB_ETERNAL.W_FLOW.TYPE</code>. 「type」- 流程类型，BPMN，JBPM等
     */
    public String getType();

    /**
     * Setter for <code>DB_ETERNAL.W_FLOW.GRAPHIC_ID</code>. 「graphicId」-
     * 图关联，1对1
     */
    public IWFlow setGraphicId(String value);

    /**
     * Getter for <code>DB_ETERNAL.W_FLOW.GRAPHIC_ID</code>. 「graphicId」-
     * 图关联，1对1
     */
    public String getGraphicId();

    /**
     * Setter for <code>DB_ETERNAL.W_FLOW.RUN_COMPONENT</code>. 「runComponent」-
     * 执行组件
     */
    public IWFlow setRunComponent(String value);

    /**
     * Getter for <code>DB_ETERNAL.W_FLOW.RUN_COMPONENT</code>. 「runComponent」-
     * 执行组件
     */
    public String getRunComponent();

    /**
     * Setter for <code>DB_ETERNAL.W_FLOW.DATA_XML</code>. 「dataXml」- 内容的XML格式
     */
    public IWFlow setDataXml(String value);

    /**
     * Getter for <code>DB_ETERNAL.W_FLOW.DATA_XML</code>. 「dataXml」- 内容的XML格式
     */
    public String getDataXml();

    /**
     * Setter for <code>DB_ETERNAL.W_FLOW.DATA_JSON</code>. 「dataJson」-
     * 内容的JSON格式
     */
    public IWFlow setDataJson(String value);

    /**
     * Getter for <code>DB_ETERNAL.W_FLOW.DATA_JSON</code>. 「dataJson」-
     * 内容的JSON格式
     */
    public String getDataJson();

    /**
     * Setter for <code>DB_ETERNAL.W_FLOW.DATA_FILE</code>. 「dataFile」- 内容的文件格式
     */
    public IWFlow setDataFile(String value);

    /**
     * Getter for <code>DB_ETERNAL.W_FLOW.DATA_FILE</code>. 「dataFile」- 内容的文件格式
     */
    public String getDataFile();

    /**
     * Setter for <code>DB_ETERNAL.W_FLOW.COMMENT</code>. 「comment」 - 流程定义备注
     */
    public IWFlow setComment(String value);

    /**
     * Getter for <code>DB_ETERNAL.W_FLOW.COMMENT</code>. 「comment」 - 流程定义备注
     */
    public String getComment();

    /**
     * Setter for <code>DB_ETERNAL.W_FLOW.ACTIVE</code>. 「active」- 是否启用
     */
    public IWFlow setActive(Boolean value);

    /**
     * Getter for <code>DB_ETERNAL.W_FLOW.ACTIVE</code>. 「active」- 是否启用
     */
    public Boolean getActive();

    /**
     * Setter for <code>DB_ETERNAL.W_FLOW.SIGMA</code>. 「sigma」- 统一标识
     */
    public IWFlow setSigma(String value);

    /**
     * Getter for <code>DB_ETERNAL.W_FLOW.SIGMA</code>. 「sigma」- 统一标识
     */
    public String getSigma();

    /**
     * Setter for <code>DB_ETERNAL.W_FLOW.METADATA</code>. 「metadata」- 附加配置
     */
    public IWFlow setMetadata(String value);

    /**
     * Getter for <code>DB_ETERNAL.W_FLOW.METADATA</code>. 「metadata」- 附加配置
     */
    public String getMetadata();

    /**
     * Setter for <code>DB_ETERNAL.W_FLOW.LANGUAGE</code>. 「language」- 使用的语言
     */
    public IWFlow setLanguage(String value);

    /**
     * Getter for <code>DB_ETERNAL.W_FLOW.LANGUAGE</code>. 「language」- 使用的语言
     */
    public String getLanguage();

    /**
     * Setter for <code>DB_ETERNAL.W_FLOW.CREATED_AT</code>. 「createdAt」- 创建时间
     */
    public IWFlow setCreatedAt(LocalDateTime value);

    /**
     * Getter for <code>DB_ETERNAL.W_FLOW.CREATED_AT</code>. 「createdAt」- 创建时间
     */
    public LocalDateTime getCreatedAt();

    /**
     * Setter for <code>DB_ETERNAL.W_FLOW.CREATED_BY</code>. 「createdBy」- 创建人
     */
    public IWFlow setCreatedBy(String value);

    /**
     * Getter for <code>DB_ETERNAL.W_FLOW.CREATED_BY</code>. 「createdBy」- 创建人
     */
    public String getCreatedBy();

    /**
     * Setter for <code>DB_ETERNAL.W_FLOW.UPDATED_AT</code>. 「updatedAt」- 更新时间
     */
    public IWFlow setUpdatedAt(LocalDateTime value);

    /**
     * Getter for <code>DB_ETERNAL.W_FLOW.UPDATED_AT</code>. 「updatedAt」- 更新时间
     */
    public LocalDateTime getUpdatedAt();

    /**
     * Setter for <code>DB_ETERNAL.W_FLOW.UPDATED_BY</code>. 「updatedBy」- 更新人
     */
    public IWFlow setUpdatedBy(String value);

    /**
     * Getter for <code>DB_ETERNAL.W_FLOW.UPDATED_BY</code>. 「updatedBy」- 更新人
     */
    public String getUpdatedBy();

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    /**
     * Load data from another generated Record/POJO implementing the common
     * interface IWFlow
     */
    public void from(IWFlow from);

    /**
     * Copy data into another generated Record/POJO implementing the common
     * interface IWFlow
     */
    public <E extends IWFlow> E into(E into);

        @Override
        public default IWFlow fromJson(io.vertx.core.json.JsonObject json) {
                setOrThrow(this::setKey,json::getString,"KEY","java.lang.String");
                setOrThrow(this::setNamespace,json::getString,"NAMESPACE","java.lang.String");
                setOrThrow(this::setName,json::getString,"NAME","java.lang.String");
                setOrThrow(this::setCode,json::getString,"CODE","java.lang.String");
                setOrThrow(this::setType,json::getString,"TYPE","java.lang.String");
                setOrThrow(this::setGraphicId,json::getString,"GRAPHIC_ID","java.lang.String");
                setOrThrow(this::setRunComponent,json::getString,"RUN_COMPONENT","java.lang.String");
                setOrThrow(this::setDataXml,json::getString,"DATA_XML","java.lang.String");
                setOrThrow(this::setDataJson,json::getString,"DATA_JSON","java.lang.String");
                setOrThrow(this::setDataFile,json::getString,"DATA_FILE","java.lang.String");
                setOrThrow(this::setComment,json::getString,"COMMENT","java.lang.String");
                setOrThrow(this::setActive,json::getBoolean,"ACTIVE","java.lang.Boolean");
                setOrThrow(this::setSigma,json::getString,"SIGMA","java.lang.String");
                setOrThrow(this::setMetadata,json::getString,"METADATA","java.lang.String");
                setOrThrow(this::setLanguage,json::getString,"LANGUAGE","java.lang.String");
                setOrThrow(this::setCreatedAt,key -> {String s = json.getString(key); return s==null?null:java.time.LocalDateTime.parse(s);},"CREATED_AT","java.time.LocalDateTime");
                setOrThrow(this::setCreatedBy,json::getString,"CREATED_BY","java.lang.String");
                setOrThrow(this::setUpdatedAt,key -> {String s = json.getString(key); return s==null?null:java.time.LocalDateTime.parse(s);},"UPDATED_AT","java.time.LocalDateTime");
                setOrThrow(this::setUpdatedBy,json::getString,"UPDATED_BY","java.lang.String");
                return this;
        }


        @Override
        public default io.vertx.core.json.JsonObject toJson() {
                io.vertx.core.json.JsonObject json = new io.vertx.core.json.JsonObject();
                json.put("KEY",getKey());
                json.put("NAMESPACE",getNamespace());
                json.put("NAME",getName());
                json.put("CODE",getCode());
                json.put("TYPE",getType());
                json.put("GRAPHIC_ID",getGraphicId());
                json.put("RUN_COMPONENT",getRunComponent());
                json.put("DATA_XML",getDataXml());
                json.put("DATA_JSON",getDataJson());
                json.put("DATA_FILE",getDataFile());
                json.put("COMMENT",getComment());
                json.put("ACTIVE",getActive());
                json.put("SIGMA",getSigma());
                json.put("METADATA",getMetadata());
                json.put("LANGUAGE",getLanguage());
                json.put("CREATED_AT",getCreatedAt()==null?null:getCreatedAt().toString());
                json.put("CREATED_BY",getCreatedBy());
                json.put("UPDATED_AT",getUpdatedAt()==null?null:getUpdatedAt().toString());
                json.put("UPDATED_BY",getUpdatedBy());
                return json;
        }

}
