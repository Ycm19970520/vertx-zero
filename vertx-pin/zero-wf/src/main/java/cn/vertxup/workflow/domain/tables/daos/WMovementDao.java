/*
 * This file is generated by jOOQ.
 */
package cn.vertxup.workflow.domain.tables.daos;


import cn.vertxup.workflow.domain.tables.WMovement;
import cn.vertxup.workflow.domain.tables.records.WMovementRecord;

import io.github.jklingsporn.vertx.jooq.shared.internal.AbstractVertxDAO;

import java.time.LocalDateTime;
import java.util.Collection;

import org.jooq.Configuration;


import java.util.List;
import io.vertx.core.Future;
import io.github.jklingsporn.vertx.jooq.classic.jdbc.JDBCClassicQueryExecutor;
/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class WMovementDao extends AbstractVertxDAO<WMovementRecord, cn.vertxup.workflow.domain.tables.pojos.WMovement, String, Future<List<cn.vertxup.workflow.domain.tables.pojos.WMovement>>, Future<cn.vertxup.workflow.domain.tables.pojos.WMovement>, Future<Integer>, Future<String>> implements io.github.jklingsporn.vertx.jooq.classic.VertxDAO<WMovementRecord,cn.vertxup.workflow.domain.tables.pojos.WMovement,String> {

        /**
     * @param configuration The Configuration used for rendering and query
     * execution.
     *      * @param vertx the vertx instance
     */
        public WMovementDao(Configuration configuration, io.vertx.core.Vertx vertx) {
                super(WMovement.W_MOVEMENT, cn.vertxup.workflow.domain.tables.pojos.WMovement.class, new JDBCClassicQueryExecutor<WMovementRecord,cn.vertxup.workflow.domain.tables.pojos.WMovement,String>(configuration,cn.vertxup.workflow.domain.tables.pojos.WMovement.class,vertx));
        }

        @Override
        protected String getId(cn.vertxup.workflow.domain.tables.pojos.WMovement object) {
                return object.getKey();
        }

        /**
     * Find records that have <code>CODE IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.workflow.domain.tables.pojos.WMovement>> findManyByCode(Collection<String> values) {
                return findManyByCondition(WMovement.W_MOVEMENT.CODE.in(values));
        }

        /**
     * Find records that have <code>CODE IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.workflow.domain.tables.pojos.WMovement>> findManyByCode(Collection<String> values, int limit) {
                return findManyByCondition(WMovement.W_MOVEMENT.CODE.in(values),limit);
        }

        /**
     * Find records that have <code>NAME IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.workflow.domain.tables.pojos.WMovement>> findManyByName(Collection<String> values) {
                return findManyByCondition(WMovement.W_MOVEMENT.NAME.in(values));
        }

        /**
     * Find records that have <code>NAME IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.workflow.domain.tables.pojos.WMovement>> findManyByName(Collection<String> values, int limit) {
                return findManyByCondition(WMovement.W_MOVEMENT.NAME.in(values),limit);
        }

        /**
     * Find records that have <code>SOURCE_KEY IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.workflow.domain.tables.pojos.WMovement>> findManyBySourceKey(Collection<String> values) {
                return findManyByCondition(WMovement.W_MOVEMENT.SOURCE_KEY.in(values));
        }

        /**
     * Find records that have <code>SOURCE_KEY IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.workflow.domain.tables.pojos.WMovement>> findManyBySourceKey(Collection<String> values, int limit) {
                return findManyByCondition(WMovement.W_MOVEMENT.SOURCE_KEY.in(values),limit);
        }

        /**
     * Find records that have <code>TARGET_KEY IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.workflow.domain.tables.pojos.WMovement>> findManyByTargetKey(Collection<String> values) {
                return findManyByCondition(WMovement.W_MOVEMENT.TARGET_KEY.in(values));
        }

        /**
     * Find records that have <code>TARGET_KEY IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.workflow.domain.tables.pojos.WMovement>> findManyByTargetKey(Collection<String> values, int limit) {
                return findManyByCondition(WMovement.W_MOVEMENT.TARGET_KEY.in(values),limit);
        }

        /**
     * Find records that have <code>FLOW_INSTANCE_ID IN (values)</code>
     * asynchronously
     */
        public Future<List<cn.vertxup.workflow.domain.tables.pojos.WMovement>> findManyByFlowInstanceId(Collection<String> values) {
                return findManyByCondition(WMovement.W_MOVEMENT.FLOW_INSTANCE_ID.in(values));
        }

        /**
     * Find records that have <code>FLOW_INSTANCE_ID IN (values)</code>
     * asynchronously limited by the given limit
     */
        public Future<List<cn.vertxup.workflow.domain.tables.pojos.WMovement>> findManyByFlowInstanceId(Collection<String> values, int limit) {
                return findManyByCondition(WMovement.W_MOVEMENT.FLOW_INSTANCE_ID.in(values),limit);
        }

        /**
     * Find records that have <code>MOVE_NAME IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.workflow.domain.tables.pojos.WMovement>> findManyByMoveName(Collection<String> values) {
                return findManyByCondition(WMovement.W_MOVEMENT.MOVE_NAME.in(values));
        }

        /**
     * Find records that have <code>MOVE_NAME IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.workflow.domain.tables.pojos.WMovement>> findManyByMoveName(Collection<String> values, int limit) {
                return findManyByCondition(WMovement.W_MOVEMENT.MOVE_NAME.in(values),limit);
        }

        /**
     * Find records that have <code>MOVE_BY IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.workflow.domain.tables.pojos.WMovement>> findManyByMoveBy(Collection<String> values) {
                return findManyByCondition(WMovement.W_MOVEMENT.MOVE_BY.in(values));
        }

        /**
     * Find records that have <code>MOVE_BY IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.workflow.domain.tables.pojos.WMovement>> findManyByMoveBy(Collection<String> values, int limit) {
                return findManyByCondition(WMovement.W_MOVEMENT.MOVE_BY.in(values),limit);
        }

        /**
     * Find records that have <code>MOVE_AT IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.workflow.domain.tables.pojos.WMovement>> findManyByMoveAt(Collection<LocalDateTime> values) {
                return findManyByCondition(WMovement.W_MOVEMENT.MOVE_AT.in(values));
        }

        /**
     * Find records that have <code>MOVE_AT IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.workflow.domain.tables.pojos.WMovement>> findManyByMoveAt(Collection<LocalDateTime> values, int limit) {
                return findManyByCondition(WMovement.W_MOVEMENT.MOVE_AT.in(values),limit);
        }

        /**
     * Find records that have <code>MOVE_COMPONENT IN (values)</code>
     * asynchronously
     */
        public Future<List<cn.vertxup.workflow.domain.tables.pojos.WMovement>> findManyByMoveComponent(Collection<String> values) {
                return findManyByCondition(WMovement.W_MOVEMENT.MOVE_COMPONENT.in(values));
        }

        /**
     * Find records that have <code>MOVE_COMPONENT IN (values)</code>
     * asynchronously limited by the given limit
     */
        public Future<List<cn.vertxup.workflow.domain.tables.pojos.WMovement>> findManyByMoveComponent(Collection<String> values, int limit) {
                return findManyByCondition(WMovement.W_MOVEMENT.MOVE_COMPONENT.in(values),limit);
        }

        /**
     * Find records that have <code>ACTIVE IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.workflow.domain.tables.pojos.WMovement>> findManyByActive(Collection<Boolean> values) {
                return findManyByCondition(WMovement.W_MOVEMENT.ACTIVE.in(values));
        }

        /**
     * Find records that have <code>ACTIVE IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.workflow.domain.tables.pojos.WMovement>> findManyByActive(Collection<Boolean> values, int limit) {
                return findManyByCondition(WMovement.W_MOVEMENT.ACTIVE.in(values),limit);
        }

        /**
     * Find records that have <code>SIGMA IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.workflow.domain.tables.pojos.WMovement>> findManyBySigma(Collection<String> values) {
                return findManyByCondition(WMovement.W_MOVEMENT.SIGMA.in(values));
        }

        /**
     * Find records that have <code>SIGMA IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.workflow.domain.tables.pojos.WMovement>> findManyBySigma(Collection<String> values, int limit) {
                return findManyByCondition(WMovement.W_MOVEMENT.SIGMA.in(values),limit);
        }

        /**
     * Find records that have <code>METADATA IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.workflow.domain.tables.pojos.WMovement>> findManyByMetadata(Collection<String> values) {
                return findManyByCondition(WMovement.W_MOVEMENT.METADATA.in(values));
        }

        /**
     * Find records that have <code>METADATA IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.workflow.domain.tables.pojos.WMovement>> findManyByMetadata(Collection<String> values, int limit) {
                return findManyByCondition(WMovement.W_MOVEMENT.METADATA.in(values),limit);
        }

        /**
     * Find records that have <code>LANGUAGE IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.workflow.domain.tables.pojos.WMovement>> findManyByLanguage(Collection<String> values) {
                return findManyByCondition(WMovement.W_MOVEMENT.LANGUAGE.in(values));
        }

        /**
     * Find records that have <code>LANGUAGE IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.workflow.domain.tables.pojos.WMovement>> findManyByLanguage(Collection<String> values, int limit) {
                return findManyByCondition(WMovement.W_MOVEMENT.LANGUAGE.in(values),limit);
        }

        /**
     * Find records that have <code>CREATED_AT IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.workflow.domain.tables.pojos.WMovement>> findManyByCreatedAt(Collection<LocalDateTime> values) {
                return findManyByCondition(WMovement.W_MOVEMENT.CREATED_AT.in(values));
        }

        /**
     * Find records that have <code>CREATED_AT IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.workflow.domain.tables.pojos.WMovement>> findManyByCreatedAt(Collection<LocalDateTime> values, int limit) {
                return findManyByCondition(WMovement.W_MOVEMENT.CREATED_AT.in(values),limit);
        }

        /**
     * Find records that have <code>CREATED_BY IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.workflow.domain.tables.pojos.WMovement>> findManyByCreatedBy(Collection<String> values) {
                return findManyByCondition(WMovement.W_MOVEMENT.CREATED_BY.in(values));
        }

        /**
     * Find records that have <code>CREATED_BY IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.workflow.domain.tables.pojos.WMovement>> findManyByCreatedBy(Collection<String> values, int limit) {
                return findManyByCondition(WMovement.W_MOVEMENT.CREATED_BY.in(values),limit);
        }

        /**
     * Find records that have <code>UPDATED_AT IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.workflow.domain.tables.pojos.WMovement>> findManyByUpdatedAt(Collection<LocalDateTime> values) {
                return findManyByCondition(WMovement.W_MOVEMENT.UPDATED_AT.in(values));
        }

        /**
     * Find records that have <code>UPDATED_AT IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.workflow.domain.tables.pojos.WMovement>> findManyByUpdatedAt(Collection<LocalDateTime> values, int limit) {
                return findManyByCondition(WMovement.W_MOVEMENT.UPDATED_AT.in(values),limit);
        }

        /**
     * Find records that have <code>UPDATED_BY IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.workflow.domain.tables.pojos.WMovement>> findManyByUpdatedBy(Collection<String> values) {
                return findManyByCondition(WMovement.W_MOVEMENT.UPDATED_BY.in(values));
        }

        /**
     * Find records that have <code>UPDATED_BY IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.workflow.domain.tables.pojos.WMovement>> findManyByUpdatedBy(Collection<String> values, int limit) {
                return findManyByCondition(WMovement.W_MOVEMENT.UPDATED_BY.in(values),limit);
        }

        @Override
        public JDBCClassicQueryExecutor<WMovementRecord,cn.vertxup.workflow.domain.tables.pojos.WMovement,String> queryExecutor(){
                return (JDBCClassicQueryExecutor<WMovementRecord,cn.vertxup.workflow.domain.tables.pojos.WMovement,String>) super.queryExecutor();
        }
}
