/*
 * This file is generated by jOOQ.
 */
package cn.vertxup.workflow.domain.tables.pojos;


import cn.vertxup.workflow.domain.tables.interfaces.IWMovement;

import io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo;

import java.time.LocalDateTime;


import static io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo.*;
/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class WMovement implements VertxPojo, IWMovement {

    private static final long serialVersionUID = 1L;

    private String        key;
    private String        code;
    private String        name;
    private String        sourceKey;
    private String        targetKey;
    private String        flowInstanceId;
    private String        moveName;
    private String        moveBy;
    private LocalDateTime moveAt;
    private String        moveComponent;
    private Boolean       active;
    private String        sigma;
    private String        metadata;
    private String        language;
    private LocalDateTime createdAt;
    private String        createdBy;
    private LocalDateTime updatedAt;
    private String        updatedBy;

    public WMovement() {}

    public WMovement(IWMovement value) {
        this.key = value.getKey();
        this.code = value.getCode();
        this.name = value.getName();
        this.sourceKey = value.getSourceKey();
        this.targetKey = value.getTargetKey();
        this.flowInstanceId = value.getFlowInstanceId();
        this.moveName = value.getMoveName();
        this.moveBy = value.getMoveBy();
        this.moveAt = value.getMoveAt();
        this.moveComponent = value.getMoveComponent();
        this.active = value.getActive();
        this.sigma = value.getSigma();
        this.metadata = value.getMetadata();
        this.language = value.getLanguage();
        this.createdAt = value.getCreatedAt();
        this.createdBy = value.getCreatedBy();
        this.updatedAt = value.getUpdatedAt();
        this.updatedBy = value.getUpdatedBy();
    }

    public WMovement(
        String        key,
        String        code,
        String        name,
        String        sourceKey,
        String        targetKey,
        String        flowInstanceId,
        String        moveName,
        String        moveBy,
        LocalDateTime moveAt,
        String        moveComponent,
        Boolean       active,
        String        sigma,
        String        metadata,
        String        language,
        LocalDateTime createdAt,
        String        createdBy,
        LocalDateTime updatedAt,
        String        updatedBy
    ) {
        this.key = key;
        this.code = code;
        this.name = name;
        this.sourceKey = sourceKey;
        this.targetKey = targetKey;
        this.flowInstanceId = flowInstanceId;
        this.moveName = moveName;
        this.moveBy = moveBy;
        this.moveAt = moveAt;
        this.moveComponent = moveComponent;
        this.active = active;
        this.sigma = sigma;
        this.metadata = metadata;
        this.language = language;
        this.createdAt = createdAt;
        this.createdBy = createdBy;
        this.updatedAt = updatedAt;
        this.updatedBy = updatedBy;
    }

        public WMovement(io.vertx.core.json.JsonObject json) {
                this();
                fromJson(json);
        }

    /**
     * Getter for <code>DB_ETERNAL.W_MOVEMENT.KEY</code>. 「key」- 轨迹主键
     */
    @Override
    public String getKey() {
        return this.key;
    }

    /**
     * Setter for <code>DB_ETERNAL.W_MOVEMENT.KEY</code>. 「key」- 轨迹主键
     */
    @Override
    public WMovement setKey(String key) {
        this.key = key;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.W_MOVEMENT.CODE</code>. 「code」- 轨迹编号（系统可用）
     */
    @Override
    public String getCode() {
        return this.code;
    }

    /**
     * Setter for <code>DB_ETERNAL.W_MOVEMENT.CODE</code>. 「code」- 轨迹编号（系统可用）
     */
    @Override
    public WMovement setCode(String code) {
        this.code = code;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.W_MOVEMENT.NAME</code>. 「name」- 流程定义名称
     */
    @Override
    public String getName() {
        return this.name;
    }

    /**
     * Setter for <code>DB_ETERNAL.W_MOVEMENT.NAME</code>. 「name」- 流程定义名称
     */
    @Override
    public WMovement setName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.W_MOVEMENT.SOURCE_KEY</code>. 「sourceKey」
     */
    @Override
    public String getSourceKey() {
        return this.sourceKey;
    }

    /**
     * Setter for <code>DB_ETERNAL.W_MOVEMENT.SOURCE_KEY</code>. 「sourceKey」
     */
    @Override
    public WMovement setSourceKey(String sourceKey) {
        this.sourceKey = sourceKey;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.W_MOVEMENT.TARGET_KEY</code>. 「targetKey」
     */
    @Override
    public String getTargetKey() {
        return this.targetKey;
    }

    /**
     * Setter for <code>DB_ETERNAL.W_MOVEMENT.TARGET_KEY</code>. 「targetKey」
     */
    @Override
    public WMovement setTargetKey(String targetKey) {
        this.targetKey = targetKey;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.W_MOVEMENT.FLOW_INSTANCE_ID</code>.
     * 「flowInstanceId」- 所属流程实例ID
     */
    @Override
    public String getFlowInstanceId() {
        return this.flowInstanceId;
    }

    /**
     * Setter for <code>DB_ETERNAL.W_MOVEMENT.FLOW_INSTANCE_ID</code>.
     * 「flowInstanceId」- 所属流程实例ID
     */
    @Override
    public WMovement setFlowInstanceId(String flowInstanceId) {
        this.flowInstanceId = flowInstanceId;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.W_MOVEMENT.MOVE_NAME</code>. 「moveName」-
     * 执行人姓名
     */
    @Override
    public String getMoveName() {
        return this.moveName;
    }

    /**
     * Setter for <code>DB_ETERNAL.W_MOVEMENT.MOVE_NAME</code>. 「moveName」-
     * 执行人姓名
     */
    @Override
    public WMovement setMoveName(String moveName) {
        this.moveName = moveName;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.W_MOVEMENT.MOVE_BY</code>. 「moveBy」- 执行人员
     */
    @Override
    public String getMoveBy() {
        return this.moveBy;
    }

    /**
     * Setter for <code>DB_ETERNAL.W_MOVEMENT.MOVE_BY</code>. 「moveBy」- 执行人员
     */
    @Override
    public WMovement setMoveBy(String moveBy) {
        this.moveBy = moveBy;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.W_MOVEMENT.MOVE_AT</code>. 「moveAt」- 执行时间
     */
    @Override
    public LocalDateTime getMoveAt() {
        return this.moveAt;
    }

    /**
     * Setter for <code>DB_ETERNAL.W_MOVEMENT.MOVE_AT</code>. 「moveAt」- 执行时间
     */
    @Override
    public WMovement setMoveAt(LocalDateTime moveAt) {
        this.moveAt = moveAt;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.W_MOVEMENT.MOVE_COMPONENT</code>.
     * 「moveComponent」- 执行扩展组件
     */
    @Override
    public String getMoveComponent() {
        return this.moveComponent;
    }

    /**
     * Setter for <code>DB_ETERNAL.W_MOVEMENT.MOVE_COMPONENT</code>.
     * 「moveComponent」- 执行扩展组件
     */
    @Override
    public WMovement setMoveComponent(String moveComponent) {
        this.moveComponent = moveComponent;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.W_MOVEMENT.ACTIVE</code>. 「active」- 是否启用
     */
    @Override
    public Boolean getActive() {
        return this.active;
    }

    /**
     * Setter for <code>DB_ETERNAL.W_MOVEMENT.ACTIVE</code>. 「active」- 是否启用
     */
    @Override
    public WMovement setActive(Boolean active) {
        this.active = active;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.W_MOVEMENT.SIGMA</code>. 「sigma」- 统一标识
     */
    @Override
    public String getSigma() {
        return this.sigma;
    }

    /**
     * Setter for <code>DB_ETERNAL.W_MOVEMENT.SIGMA</code>. 「sigma」- 统一标识
     */
    @Override
    public WMovement setSigma(String sigma) {
        this.sigma = sigma;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.W_MOVEMENT.METADATA</code>. 「metadata」- 附加配置
     */
    @Override
    public String getMetadata() {
        return this.metadata;
    }

    /**
     * Setter for <code>DB_ETERNAL.W_MOVEMENT.METADATA</code>. 「metadata」- 附加配置
     */
    @Override
    public WMovement setMetadata(String metadata) {
        this.metadata = metadata;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.W_MOVEMENT.LANGUAGE</code>. 「language」- 使用的语言
     */
    @Override
    public String getLanguage() {
        return this.language;
    }

    /**
     * Setter for <code>DB_ETERNAL.W_MOVEMENT.LANGUAGE</code>. 「language」- 使用的语言
     */
    @Override
    public WMovement setLanguage(String language) {
        this.language = language;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.W_MOVEMENT.CREATED_AT</code>. 「createdAt」-
     * 创建时间
     */
    @Override
    public LocalDateTime getCreatedAt() {
        return this.createdAt;
    }

    /**
     * Setter for <code>DB_ETERNAL.W_MOVEMENT.CREATED_AT</code>. 「createdAt」-
     * 创建时间
     */
    @Override
    public WMovement setCreatedAt(LocalDateTime createdAt) {
        this.createdAt = createdAt;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.W_MOVEMENT.CREATED_BY</code>. 「createdBy」-
     * 创建人
     */
    @Override
    public String getCreatedBy() {
        return this.createdBy;
    }

    /**
     * Setter for <code>DB_ETERNAL.W_MOVEMENT.CREATED_BY</code>. 「createdBy」-
     * 创建人
     */
    @Override
    public WMovement setCreatedBy(String createdBy) {
        this.createdBy = createdBy;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.W_MOVEMENT.UPDATED_AT</code>. 「updatedAt」-
     * 更新时间
     */
    @Override
    public LocalDateTime getUpdatedAt() {
        return this.updatedAt;
    }

    /**
     * Setter for <code>DB_ETERNAL.W_MOVEMENT.UPDATED_AT</code>. 「updatedAt」-
     * 更新时间
     */
    @Override
    public WMovement setUpdatedAt(LocalDateTime updatedAt) {
        this.updatedAt = updatedAt;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.W_MOVEMENT.UPDATED_BY</code>. 「updatedBy」-
     * 更新人
     */
    @Override
    public String getUpdatedBy() {
        return this.updatedBy;
    }

    /**
     * Setter for <code>DB_ETERNAL.W_MOVEMENT.UPDATED_BY</code>. 「updatedBy」-
     * 更新人
     */
    @Override
    public WMovement setUpdatedBy(String updatedBy) {
        this.updatedBy = updatedBy;
        return this;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("WMovement (");

        sb.append(key);
        sb.append(", ").append(code);
        sb.append(", ").append(name);
        sb.append(", ").append(sourceKey);
        sb.append(", ").append(targetKey);
        sb.append(", ").append(flowInstanceId);
        sb.append(", ").append(moveName);
        sb.append(", ").append(moveBy);
        sb.append(", ").append(moveAt);
        sb.append(", ").append(moveComponent);
        sb.append(", ").append(active);
        sb.append(", ").append(sigma);
        sb.append(", ").append(metadata);
        sb.append(", ").append(language);
        sb.append(", ").append(createdAt);
        sb.append(", ").append(createdBy);
        sb.append(", ").append(updatedAt);
        sb.append(", ").append(updatedBy);

        sb.append(")");
        return sb.toString();
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    @Override
    public void from(IWMovement from) {
        setKey(from.getKey());
        setCode(from.getCode());
        setName(from.getName());
        setSourceKey(from.getSourceKey());
        setTargetKey(from.getTargetKey());
        setFlowInstanceId(from.getFlowInstanceId());
        setMoveName(from.getMoveName());
        setMoveBy(from.getMoveBy());
        setMoveAt(from.getMoveAt());
        setMoveComponent(from.getMoveComponent());
        setActive(from.getActive());
        setSigma(from.getSigma());
        setMetadata(from.getMetadata());
        setLanguage(from.getLanguage());
        setCreatedAt(from.getCreatedAt());
        setCreatedBy(from.getCreatedBy());
        setUpdatedAt(from.getUpdatedAt());
        setUpdatedBy(from.getUpdatedBy());
    }

    @Override
    public <E extends IWMovement> E into(E into) {
        into.from(this);
        return into;
    }
}
