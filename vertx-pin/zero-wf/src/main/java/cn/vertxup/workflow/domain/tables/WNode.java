/*
 * This file is generated by jOOQ.
 */
package cn.vertxup.workflow.domain.tables;


import cn.vertxup.workflow.domain.Db;
import cn.vertxup.workflow.domain.Keys;
import cn.vertxup.workflow.domain.tables.records.WNodeRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class WNode extends TableImpl<WNodeRecord> {

    /**
     * The reference instance of <code>DB_ETERNAL.W_NODE</code>
     */
    public static final WNode W_NODE = new WNode();
    private static final long serialVersionUID = 1L;
    /**
     * The column <code>DB_ETERNAL.W_NODE.KEY</code>. 「key」- 节点定义主键
     */
    public final TableField<WNodeRecord, String> KEY = createField(DSL.name("KEY"), SQLDataType.VARCHAR(36).nullable(false), this, "「key」- 节点定义主键");
    /**
     * The column <code>DB_ETERNAL.W_NODE.NAME</code>. 「name」- 节点定义名称
     */
    public final TableField<WNodeRecord, String> NAME = createField(DSL.name("NAME"), SQLDataType.VARCHAR(255), this, "「name」- 节点定义名称");
    /**
     * The column <code>DB_ETERNAL.W_NODE.CODE</code>. 「code」- 节点定义编号（系统可用）
     */
    public final TableField<WNodeRecord, String> CODE = createField(DSL.name("CODE"), SQLDataType.VARCHAR(255), this, "「code」- 节点定义编号（系统可用）");
    /**
     * The column <code>DB_ETERNAL.W_NODE.TYPE</code>. 「type」- 节点类型，START | END
     * | MIDDLE | DECISION
     */
    public final TableField<WNodeRecord, String> TYPE = createField(DSL.name("TYPE"), SQLDataType.VARCHAR(36), this, "「type」- 节点类型，START | END | MIDDLE | DECISION");
    /**
     * The column <code>DB_ETERNAL.W_NODE.FLOW_ID</code>. 「flowId」- 所属流程图
     */
    public final TableField<WNodeRecord, String> FLOW_ID = createField(DSL.name("FLOW_ID"), SQLDataType.VARCHAR(36), this, "「flowId」- 所属流程图");
    /**
     * The column <code>DB_ETERNAL.W_NODE.FORM_CODE</code>. 「formCode」- 表单代码
     */
    public final TableField<WNodeRecord, String> FORM_CODE = createField(DSL.name("FORM_CODE"), SQLDataType.VARCHAR(255), this, "「formCode」- 表单代码");
    /**
     * The column <code>DB_ETERNAL.W_NODE.FORM_RULE</code>. 「formRule」- 动态表单规则
     */
    public final TableField<WNodeRecord, String> FORM_RULE = createField(DSL.name("FORM_RULE"), SQLDataType.CLOB, this, "「formRule」- 动态表单规则");
    /**
     * The column <code>DB_ETERNAL.W_NODE.MODEL_ID</code>. 「modelId」-
     * 关联的模型identifier，用于描述
     */
    public final TableField<WNodeRecord, String> MODEL_ID = createField(DSL.name("MODEL_ID"), SQLDataType.VARCHAR(255), this, "「modelId」- 关联的模型identifier，用于描述");
    /**
     * The column <code>DB_ETERNAL.W_NODE.MODEL_KEY</code>. 「modelKey」-
     * 关联的模型记录ID，用于描述哪一个Model中的记录
     */
    public final TableField<WNodeRecord, String> MODEL_KEY = createField(DSL.name("MODEL_KEY"), SQLDataType.VARCHAR(36), this, "「modelKey」- 关联的模型记录ID，用于描述哪一个Model中的记录");
    /**
     * The column <code>DB_ETERNAL.W_NODE.ENTITY_ID</code>. 「entityId」- 主实体
     */
    public final TableField<WNodeRecord, String> ENTITY_ID = createField(DSL.name("ENTITY_ID"), SQLDataType.VARCHAR(255), this, "「entityId」- 主实体");
    /**
     * The column <code>DB_ETERNAL.W_NODE.ENTITY_KEY</code>. 「entityKey」- 主实体主键
     */
    public final TableField<WNodeRecord, String> ENTITY_KEY = createField(DSL.name("ENTITY_KEY"), SQLDataType.VARCHAR(36), this, "「entityKey」- 主实体主键");
    /**
     * The column <code>DB_ETERNAL.W_NODE.RULE_ROLE</code>. 「ruleRole」- 角色规则
     */
    public final TableField<WNodeRecord, String> RULE_ROLE = createField(DSL.name("RULE_ROLE"), SQLDataType.CLOB, this, "「ruleRole」- 角色规则");
    /**
     * The column <code>DB_ETERNAL.W_NODE.RULE_GROUP</code>. 「ruleGroup」- 组规则
     */
    public final TableField<WNodeRecord, String> RULE_GROUP = createField(DSL.name("RULE_GROUP"), SQLDataType.CLOB, this, "「ruleGroup」- 组规则");
    /**
     * The column <code>DB_ETERNAL.W_NODE.RULE_USER</code>. 「ruleUser」- 用户规则规则
     */
    public final TableField<WNodeRecord, String> RULE_USER = createField(DSL.name("RULE_USER"), SQLDataType.CLOB, this, "「ruleUser」- 用户规则规则");
    /**
     * The column <code>DB_ETERNAL.W_NODE.ACTIVE</code>. 「active」- 是否启用
     */
    public final TableField<WNodeRecord, Boolean> ACTIVE = createField(DSL.name("ACTIVE"), SQLDataType.BIT, this, "「active」- 是否启用");
    /**
     * The column <code>DB_ETERNAL.W_NODE.SIGMA</code>. 「sigma」- 统一标识
     */
    public final TableField<WNodeRecord, String> SIGMA = createField(DSL.name("SIGMA"), SQLDataType.VARCHAR(32), this, "「sigma」- 统一标识");
    /**
     * The column <code>DB_ETERNAL.W_NODE.METADATA</code>. 「metadata」- 附加配置
     */
    public final TableField<WNodeRecord, String> METADATA = createField(DSL.name("METADATA"), SQLDataType.CLOB, this, "「metadata」- 附加配置");
    /**
     * The column <code>DB_ETERNAL.W_NODE.LANGUAGE</code>. 「language」- 使用的语言
     */
    public final TableField<WNodeRecord, String> LANGUAGE = createField(DSL.name("LANGUAGE"), SQLDataType.VARCHAR(8), this, "「language」- 使用的语言");
    /**
     * The column <code>DB_ETERNAL.W_NODE.CREATED_AT</code>. 「createdAt」- 创建时间
     */
    public final TableField<WNodeRecord, LocalDateTime> CREATED_AT = createField(DSL.name("CREATED_AT"), SQLDataType.LOCALDATETIME(0), this, "「createdAt」- 创建时间");
    /**
     * The column <code>DB_ETERNAL.W_NODE.CREATED_BY</code>. 「createdBy」- 创建人
     */
    public final TableField<WNodeRecord, String> CREATED_BY = createField(DSL.name("CREATED_BY"), SQLDataType.VARCHAR(36), this, "「createdBy」- 创建人");
    /**
     * The column <code>DB_ETERNAL.W_NODE.UPDATED_AT</code>. 「updatedAt」- 更新时间
     */
    public final TableField<WNodeRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("UPDATED_AT"), SQLDataType.LOCALDATETIME(0), this, "「updatedAt」- 更新时间");
    /**
     * The column <code>DB_ETERNAL.W_NODE.UPDATED_BY</code>. 「updatedBy」- 更新人
     */
    public final TableField<WNodeRecord, String> UPDATED_BY = createField(DSL.name("UPDATED_BY"), SQLDataType.VARCHAR(36), this, "「updatedBy」- 更新人");

    private WNode(Name alias, Table<WNodeRecord> aliased) {
        this(alias, aliased, null);
    }

    private WNode(Name alias, Table<WNodeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>DB_ETERNAL.W_NODE</code> table reference
     */
    public WNode(String alias) {
        this(DSL.name(alias), W_NODE);
    }

    /**
     * Create an aliased <code>DB_ETERNAL.W_NODE</code> table reference
     */
    public WNode(Name alias) {
        this(alias, W_NODE);
    }

    /**
     * Create a <code>DB_ETERNAL.W_NODE</code> table reference
     */
    public WNode() {
        this(DSL.name("W_NODE"), null);
    }

    public <O extends Record> WNode(Table<O> child, ForeignKey<O, WNodeRecord> key) {
        super(child, key, W_NODE);
    }

    /**
     * The class holding records for this type
     */
    @Override
    public Class<WNodeRecord> getRecordType() {
        return WNodeRecord.class;
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Db.DB_ETERNAL;
    }

    @Override
    public UniqueKey<WNodeRecord> getPrimaryKey() {
        return Keys.KEY_W_NODE_PRIMARY;
    }

    @Override
    public List<UniqueKey<WNodeRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_W_NODE_CODE);
    }

    @Override
    public WNode as(String alias) {
        return new WNode(DSL.name(alias), this);
    }

    @Override
    public WNode as(Name alias) {
        return new WNode(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public WNode rename(String name) {
        return new WNode(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public WNode rename(Name name) {
        return new WNode(name, null);
    }

    // -------------------------------------------------------------------------
    // Row22 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row22<String, String, String, String, String, String, String, String, String, String, String, String, String, String, Boolean, String, String, String, LocalDateTime, String, LocalDateTime, String> fieldsRow() {
        return (Row22) super.fieldsRow();
    }
}
