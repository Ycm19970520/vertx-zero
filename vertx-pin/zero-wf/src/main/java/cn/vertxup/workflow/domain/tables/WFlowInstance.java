/*
 * This file is generated by jOOQ.
 */
package cn.vertxup.workflow.domain.tables;


import cn.vertxup.workflow.domain.Db;
import cn.vertxup.workflow.domain.Keys;
import cn.vertxup.workflow.domain.tables.records.WFlowInstanceRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class WFlowInstance extends TableImpl<WFlowInstanceRecord> {

    /**
     * The reference instance of <code>DB_ETERNAL.W_FLOW_INSTANCE</code>
     */
    public static final WFlowInstance W_FLOW_INSTANCE = new WFlowInstance();
    private static final long serialVersionUID = 1L;
    /**
     * The column <code>DB_ETERNAL.W_FLOW_INSTANCE.KEY</code>. 「key」- 流程定义主键
     */
    public final TableField<WFlowInstanceRecord, String> KEY = createField(DSL.name("KEY"), SQLDataType.VARCHAR(36).nullable(false), this, "「key」- 流程定义主键");
    /**
     * The column <code>DB_ETERNAL.W_FLOW_INSTANCE.CODE</code>. 「code」-
     * 流程定义编号（系统可用）
     */
    public final TableField<WFlowInstanceRecord, String> CODE = createField(DSL.name("CODE"), SQLDataType.VARCHAR(255), this, "「code」- 流程定义编号（系统可用）");
    /**
     * The column <code>DB_ETERNAL.W_FLOW_INSTANCE.SERIAL</code>. 「serial」-
     * 流程实例编号
     */
    public final TableField<WFlowInstanceRecord, String> SERIAL = createField(DSL.name("SERIAL"), SQLDataType.VARCHAR(255), this, "「serial」- 流程实例编号");
    /**
     * The column <code>DB_ETERNAL.W_FLOW_INSTANCE.NAME</code>. 「name」- 流程定义名称
     */
    public final TableField<WFlowInstanceRecord, String> NAME = createField(DSL.name("NAME"), SQLDataType.VARCHAR(255), this, "「name」- 流程定义名称");
    /**
     * The column <code>DB_ETERNAL.W_FLOW_INSTANCE.PHASE</code>. 「phase」-
     * 流程实例所属周期
     */
    public final TableField<WFlowInstanceRecord, String> PHASE = createField(DSL.name("PHASE"), SQLDataType.VARCHAR(255), this, "「phase」- 流程实例所属周期");
    /**
     * The column <code>DB_ETERNAL.W_FLOW_INSTANCE.FLOW_ID</code>. 「flowId」-
     * 所属流程图
     */
    public final TableField<WFlowInstanceRecord, String> FLOW_ID = createField(DSL.name("FLOW_ID"), SQLDataType.VARCHAR(36), this, "「flowId」- 所属流程图");
    /**
     * The column <code>DB_ETERNAL.W_FLOW_INSTANCE.USER_ID</code>. 「userId」-
     * 所属人员ID
     */
    public final TableField<WFlowInstanceRecord, String> USER_ID = createField(DSL.name("USER_ID"), SQLDataType.VARCHAR(36), this, "「userId」- 所属人员ID");
    /**
     * The column <code>DB_ETERNAL.W_FLOW_INSTANCE.COORDINATE</code>.
     * 「coordinate」- 所属流程坐标描述
     */
    public final TableField<WFlowInstanceRecord, String> COORDINATE = createField(DSL.name("COORDINATE"), SQLDataType.CLOB, this, "「coordinate」- 所属流程坐标描述");
    /**
     * The column <code>DB_ETERNAL.W_FLOW_INSTANCE.ACTIVE</code>. 「active」- 是否启用
     */
    public final TableField<WFlowInstanceRecord, Boolean> ACTIVE = createField(DSL.name("ACTIVE"), SQLDataType.BIT, this, "「active」- 是否启用");
    /**
     * The column <code>DB_ETERNAL.W_FLOW_INSTANCE.SIGMA</code>. 「sigma」- 统一标识
     */
    public final TableField<WFlowInstanceRecord, String> SIGMA = createField(DSL.name("SIGMA"), SQLDataType.VARCHAR(32), this, "「sigma」- 统一标识");
    /**
     * The column <code>DB_ETERNAL.W_FLOW_INSTANCE.METADATA</code>. 「metadata」-
     * 附加配置
     */
    public final TableField<WFlowInstanceRecord, String> METADATA = createField(DSL.name("METADATA"), SQLDataType.CLOB, this, "「metadata」- 附加配置");
    /**
     * The column <code>DB_ETERNAL.W_FLOW_INSTANCE.LANGUAGE</code>. 「language」-
     * 使用的语言
     */
    public final TableField<WFlowInstanceRecord, String> LANGUAGE = createField(DSL.name("LANGUAGE"), SQLDataType.VARCHAR(8), this, "「language」- 使用的语言");
    /**
     * The column <code>DB_ETERNAL.W_FLOW_INSTANCE.CREATED_AT</code>.
     * 「createdAt」- 创建时间
     */
    public final TableField<WFlowInstanceRecord, LocalDateTime> CREATED_AT = createField(DSL.name("CREATED_AT"), SQLDataType.LOCALDATETIME(0), this, "「createdAt」- 创建时间");
    /**
     * The column <code>DB_ETERNAL.W_FLOW_INSTANCE.CREATED_BY</code>.
     * 「createdBy」- 创建人
     */
    public final TableField<WFlowInstanceRecord, String> CREATED_BY = createField(DSL.name("CREATED_BY"), SQLDataType.VARCHAR(36), this, "「createdBy」- 创建人");
    /**
     * The column <code>DB_ETERNAL.W_FLOW_INSTANCE.UPDATED_AT</code>.
     * 「updatedAt」- 更新时间
     */
    public final TableField<WFlowInstanceRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("UPDATED_AT"), SQLDataType.LOCALDATETIME(0), this, "「updatedAt」- 更新时间");
    /**
     * The column <code>DB_ETERNAL.W_FLOW_INSTANCE.UPDATED_BY</code>.
     * 「updatedBy」- 更新人
     */
    public final TableField<WFlowInstanceRecord, String> UPDATED_BY = createField(DSL.name("UPDATED_BY"), SQLDataType.VARCHAR(36), this, "「updatedBy」- 更新人");

    private WFlowInstance(Name alias, Table<WFlowInstanceRecord> aliased) {
        this(alias, aliased, null);
    }

    private WFlowInstance(Name alias, Table<WFlowInstanceRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>DB_ETERNAL.W_FLOW_INSTANCE</code> table reference
     */
    public WFlowInstance(String alias) {
        this(DSL.name(alias), W_FLOW_INSTANCE);
    }

    /**
     * Create an aliased <code>DB_ETERNAL.W_FLOW_INSTANCE</code> table reference
     */
    public WFlowInstance(Name alias) {
        this(alias, W_FLOW_INSTANCE);
    }

    /**
     * Create a <code>DB_ETERNAL.W_FLOW_INSTANCE</code> table reference
     */
    public WFlowInstance() {
        this(DSL.name("W_FLOW_INSTANCE"), null);
    }

    public <O extends Record> WFlowInstance(Table<O> child, ForeignKey<O, WFlowInstanceRecord> key) {
        super(child, key, W_FLOW_INSTANCE);
    }

    /**
     * The class holding records for this type
     */
    @Override
    public Class<WFlowInstanceRecord> getRecordType() {
        return WFlowInstanceRecord.class;
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Db.DB_ETERNAL;
    }

    @Override
    public UniqueKey<WFlowInstanceRecord> getPrimaryKey() {
        return Keys.KEY_W_FLOW_INSTANCE_PRIMARY;
    }

    @Override
    public List<UniqueKey<WFlowInstanceRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_W_FLOW_INSTANCE_CODE, Keys.KEY_W_FLOW_INSTANCE_SERIAL);
    }

    @Override
    public WFlowInstance as(String alias) {
        return new WFlowInstance(DSL.name(alias), this);
    }

    @Override
    public WFlowInstance as(Name alias) {
        return new WFlowInstance(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public WFlowInstance rename(String name) {
        return new WFlowInstance(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public WFlowInstance rename(Name name) {
        return new WFlowInstance(name, null);
    }

    // -------------------------------------------------------------------------
    // Row16 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row16<String, String, String, String, String, String, String, String, Boolean, String, String, String, LocalDateTime, String, LocalDateTime, String> fieldsRow() {
        return (Row16) super.fieldsRow();
    }
}
