/*
 * This file is generated by jOOQ.
 */
package cn.vertxup.workflow.domain.tables.interfaces;


import io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo;

import java.io.Serializable;
import java.time.LocalDateTime;


import static io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo.*;
/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public interface IWInstance extends VertxPojo, Serializable {

    /**
     * Setter for <code>DB_ETERNAL.W_INSTANCE.KEY</code>. 「key」- 流程定义主键
     */
    public IWInstance setKey(String value);

    /**
     * Getter for <code>DB_ETERNAL.W_INSTANCE.KEY</code>. 「key」- 流程定义主键
     */
    public String getKey();

    /**
     * Setter for <code>DB_ETERNAL.W_INSTANCE.CODE</code>. 「code」- 流程定义编号（系统可用）
     */
    public IWInstance setCode(String value);

    /**
     * Getter for <code>DB_ETERNAL.W_INSTANCE.CODE</code>. 「code」- 流程定义编号（系统可用）
     */
    public String getCode();

    /**
     * Setter for <code>DB_ETERNAL.W_INSTANCE.NAME</code>. 「name」- 流程标题
     */
    public IWInstance setName(String value);

    /**
     * Getter for <code>DB_ETERNAL.W_INSTANCE.NAME</code>. 「name」- 流程标题
     */
    public String getName();

    /**
     * Setter for <code>DB_ETERNAL.W_INSTANCE.INSTANCE_ID</code>. 「instanceId」-
     * 实例ID（查询Task专用）：getProcessInstanceId
     */
    public IWInstance setInstanceId(String value);

    /**
     * Getter for <code>DB_ETERNAL.W_INSTANCE.INSTANCE_ID</code>. 「instanceId」-
     * 实例ID（查询Task专用）：getProcessInstanceId
     */
    public String getInstanceId();

    /**
     * Setter for <code>DB_ETERNAL.W_INSTANCE.INSTANCE_ROOT_ID</code>.
     * 「instanceRootId」- 根实例ID：getRootProcessInstanceId
     */
    public IWInstance setInstanceRootId(String value);

    /**
     * Getter for <code>DB_ETERNAL.W_INSTANCE.INSTANCE_ROOT_ID</code>.
     * 「instanceRootId」- 根实例ID：getRootProcessInstanceId
     */
    public String getInstanceRootId();

    /**
     * Setter for <code>DB_ETERNAL.W_INSTANCE.INSTANCE_CASE_ID</code>.
     * 「instanceCaseId」- getCaseInstanceId
     */
    public IWInstance setInstanceCaseId(String value);

    /**
     * Getter for <code>DB_ETERNAL.W_INSTANCE.INSTANCE_CASE_ID</code>.
     * 「instanceCaseId」- getCaseInstanceId
     */
    public String getInstanceCaseId();

    /**
     * Setter for <code>DB_ETERNAL.W_INSTANCE.TENANT_ID</code>. 「tenantId」- 租户ID
     */
    public IWInstance setTenantId(String value);

    /**
     * Getter for <code>DB_ETERNAL.W_INSTANCE.TENANT_ID</code>. 「tenantId」- 租户ID
     */
    public String getTenantId();

    /**
     * Setter for <code>DB_ETERNAL.W_INSTANCE.P_DEFINITION_ID</code>.
     * 「pDefinitionId」- 定义ID, getProcessDefinitionId
     */
    public IWInstance setPDefinitionId(String value);

    /**
     * Getter for <code>DB_ETERNAL.W_INSTANCE.P_DEFINITION_ID</code>.
     * 「pDefinitionId」- 定义ID, getProcessDefinitionId
     */
    public String getPDefinitionId();

    /**
     * Setter for <code>DB_ETERNAL.W_INSTANCE.P_EXECUTION_ID</code>.
     * 「pExecutionId」- 任务执行ID（查询Task专用）- getId
     */
    public IWInstance setPExecutionId(String value);

    /**
     * Getter for <code>DB_ETERNAL.W_INSTANCE.P_EXECUTION_ID</code>.
     * 「pExecutionId」- 任务执行ID（查询Task专用）- getId
     */
    public String getPExecutionId();

    /**
     * Setter for <code>DB_ETERNAL.W_INSTANCE.P_BUSINESS_KEY</code>.
     * 「pBusinessId」- getBusinessKey
     */
    public IWInstance setPBusinessKey(String value);

    /**
     * Getter for <code>DB_ETERNAL.W_INSTANCE.P_BUSINESS_KEY</code>.
     * 「pBusinessId」- getBusinessKey
     */
    public String getPBusinessKey();

    /**
     * Setter for <code>DB_ETERNAL.W_INSTANCE.ACTIVE</code>. 「active」- 是否启用
     */
    public IWInstance setActive(Boolean value);

    /**
     * Getter for <code>DB_ETERNAL.W_INSTANCE.ACTIVE</code>. 「active」- 是否启用
     */
    public Boolean getActive();

    /**
     * Setter for <code>DB_ETERNAL.W_INSTANCE.SIGMA</code>. 「sigma」- 统一标识
     */
    public IWInstance setSigma(String value);

    /**
     * Getter for <code>DB_ETERNAL.W_INSTANCE.SIGMA</code>. 「sigma」- 统一标识
     */
    public String getSigma();

    /**
     * Setter for <code>DB_ETERNAL.W_INSTANCE.METADATA</code>. 「metadata」- 附加配置
     */
    public IWInstance setMetadata(String value);

    /**
     * Getter for <code>DB_ETERNAL.W_INSTANCE.METADATA</code>. 「metadata」- 附加配置
     */
    public String getMetadata();

    /**
     * Setter for <code>DB_ETERNAL.W_INSTANCE.LANGUAGE</code>. 「language」- 使用的语言
     */
    public IWInstance setLanguage(String value);

    /**
     * Getter for <code>DB_ETERNAL.W_INSTANCE.LANGUAGE</code>. 「language」- 使用的语言
     */
    public String getLanguage();

    /**
     * Setter for <code>DB_ETERNAL.W_INSTANCE.CREATED_AT</code>. 「createdAt」-
     * 创建时间
     */
    public IWInstance setCreatedAt(LocalDateTime value);

    /**
     * Getter for <code>DB_ETERNAL.W_INSTANCE.CREATED_AT</code>. 「createdAt」-
     * 创建时间
     */
    public LocalDateTime getCreatedAt();

    /**
     * Setter for <code>DB_ETERNAL.W_INSTANCE.CREATED_BY</code>. 「createdBy」-
     * 创建人
     */
    public IWInstance setCreatedBy(String value);

    /**
     * Getter for <code>DB_ETERNAL.W_INSTANCE.CREATED_BY</code>. 「createdBy」-
     * 创建人
     */
    public String getCreatedBy();

    /**
     * Setter for <code>DB_ETERNAL.W_INSTANCE.UPDATED_AT</code>. 「updatedAt」-
     * 更新时间
     */
    public IWInstance setUpdatedAt(LocalDateTime value);

    /**
     * Getter for <code>DB_ETERNAL.W_INSTANCE.UPDATED_AT</code>. 「updatedAt」-
     * 更新时间
     */
    public LocalDateTime getUpdatedAt();

    /**
     * Setter for <code>DB_ETERNAL.W_INSTANCE.UPDATED_BY</code>. 「updatedBy」-
     * 更新人
     */
    public IWInstance setUpdatedBy(String value);

    /**
     * Getter for <code>DB_ETERNAL.W_INSTANCE.UPDATED_BY</code>. 「updatedBy」-
     * 更新人
     */
    public String getUpdatedBy();

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    /**
     * Load data from another generated Record/POJO implementing the common
     * interface IWInstance
     */
    public void from(IWInstance from);

    /**
     * Copy data into another generated Record/POJO implementing the common
     * interface IWInstance
     */
    public <E extends IWInstance> E into(E into);

        @Override
        public default IWInstance fromJson(io.vertx.core.json.JsonObject json) {
                setOrThrow(this::setKey,json::getString,"KEY","java.lang.String");
                setOrThrow(this::setCode,json::getString,"CODE","java.lang.String");
                setOrThrow(this::setName,json::getString,"NAME","java.lang.String");
                setOrThrow(this::setInstanceId,json::getString,"INSTANCE_ID","java.lang.String");
                setOrThrow(this::setInstanceRootId,json::getString,"INSTANCE_ROOT_ID","java.lang.String");
                setOrThrow(this::setInstanceCaseId,json::getString,"INSTANCE_CASE_ID","java.lang.String");
                setOrThrow(this::setTenantId,json::getString,"TENANT_ID","java.lang.String");
                setOrThrow(this::setPDefinitionId,json::getString,"P_DEFINITION_ID","java.lang.String");
                setOrThrow(this::setPExecutionId,json::getString,"P_EXECUTION_ID","java.lang.String");
                setOrThrow(this::setPBusinessKey,json::getString,"P_BUSINESS_KEY","java.lang.String");
                setOrThrow(this::setActive,json::getBoolean,"ACTIVE","java.lang.Boolean");
                setOrThrow(this::setSigma,json::getString,"SIGMA","java.lang.String");
                setOrThrow(this::setMetadata,json::getString,"METADATA","java.lang.String");
                setOrThrow(this::setLanguage,json::getString,"LANGUAGE","java.lang.String");
                setOrThrow(this::setCreatedAt,key -> {String s = json.getString(key); return s==null?null:java.time.LocalDateTime.parse(s);},"CREATED_AT","java.time.LocalDateTime");
                setOrThrow(this::setCreatedBy,json::getString,"CREATED_BY","java.lang.String");
                setOrThrow(this::setUpdatedAt,key -> {String s = json.getString(key); return s==null?null:java.time.LocalDateTime.parse(s);},"UPDATED_AT","java.time.LocalDateTime");
                setOrThrow(this::setUpdatedBy,json::getString,"UPDATED_BY","java.lang.String");
                return this;
        }


        @Override
        public default io.vertx.core.json.JsonObject toJson() {
                io.vertx.core.json.JsonObject json = new io.vertx.core.json.JsonObject();
                json.put("KEY",getKey());
                json.put("CODE",getCode());
                json.put("NAME",getName());
                json.put("INSTANCE_ID",getInstanceId());
                json.put("INSTANCE_ROOT_ID",getInstanceRootId());
                json.put("INSTANCE_CASE_ID",getInstanceCaseId());
                json.put("TENANT_ID",getTenantId());
                json.put("P_DEFINITION_ID",getPDefinitionId());
                json.put("P_EXECUTION_ID",getPExecutionId());
                json.put("P_BUSINESS_KEY",getPBusinessKey());
                json.put("ACTIVE",getActive());
                json.put("SIGMA",getSigma());
                json.put("METADATA",getMetadata());
                json.put("LANGUAGE",getLanguage());
                json.put("CREATED_AT",getCreatedAt()==null?null:getCreatedAt().toString());
                json.put("CREATED_BY",getCreatedBy());
                json.put("UPDATED_AT",getUpdatedAt()==null?null:getUpdatedAt().toString());
                json.put("UPDATED_BY",getUpdatedBy());
                return json;
        }

}
