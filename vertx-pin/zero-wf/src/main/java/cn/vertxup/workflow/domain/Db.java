/*
 * This file is generated by jOOQ.
 */
package cn.vertxup.workflow.domain;


import cn.vertxup.workflow.domain.tables.WFlow;
import cn.vertxup.workflow.domain.tables.WFlowInstance;
import cn.vertxup.workflow.domain.tables.WMovement;
import cn.vertxup.workflow.domain.tables.WNode;
import io.vertx.tp.ke.refine.Ke;
import org.jooq.Catalog;
import org.jooq.Table;
import org.jooq.impl.SchemaImpl;

import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class Db extends SchemaImpl {

    /**
     * The reference instance of <code>DB_ETERNAL</code>
     */
    public static final Db DB_ETERNAL = new Db();
    private static final long serialVersionUID = 1L;
    /**
     * The table <code>DB_ETERNAL.W_FLOW</code>.
     */
    public final WFlow W_FLOW = WFlow.W_FLOW;

    /**
     * The table <code>DB_ETERNAL.W_FLOW_INSTANCE</code>.
     */
    public final WFlowInstance W_FLOW_INSTANCE = WFlowInstance.W_FLOW_INSTANCE;

    /**
     * The table <code>DB_ETERNAL.W_MOVEMENT</code>.
     */
    public final WMovement W_MOVEMENT = WMovement.W_MOVEMENT;

    /**
     * The table <code>DB_ETERNAL.W_NODE</code>.
     */
    public final WNode W_NODE = WNode.W_NODE;

    /**
     * No further instances allowed
     */
    private Db() {
        super(Ke.getDatabase(), null);
    }


    @Override
    public Catalog getCatalog() {
        return DefaultCatalog.DEFAULT_CATALOG;
    }

    @Override
    public final List<Table<?>> getTables() {
        return Arrays.asList(
            WFlow.W_FLOW,
            WFlowInstance.W_FLOW_INSTANCE,
            WMovement.W_MOVEMENT,
            WNode.W_NODE
        );
    }
}
