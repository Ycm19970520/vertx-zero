/*
 * This file is generated by jOOQ.
 */
package cn.vertxup.fm.domain.tables.daos;


import cn.vertxup.fm.domain.tables.FDebtItem;
import cn.vertxup.fm.domain.tables.records.FDebtItemRecord;

import io.github.jklingsporn.vertx.jooq.shared.internal.AbstractVertxDAO;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.Collection;

import org.jooq.Configuration;


import java.util.List;
import io.vertx.core.Future;
import io.github.jklingsporn.vertx.jooq.classic.jdbc.JDBCClassicQueryExecutor;
/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class FDebtItemDao extends AbstractVertxDAO<FDebtItemRecord, cn.vertxup.fm.domain.tables.pojos.FDebtItem, String, Future<List<cn.vertxup.fm.domain.tables.pojos.FDebtItem>>, Future<cn.vertxup.fm.domain.tables.pojos.FDebtItem>, Future<Integer>, Future<String>> implements io.github.jklingsporn.vertx.jooq.classic.VertxDAO<FDebtItemRecord,cn.vertxup.fm.domain.tables.pojos.FDebtItem,String> {

        /**
     * @param configuration The Configuration used for rendering and query
     * execution.
     *      * @param vertx the vertx instance
     */
        public FDebtItemDao(Configuration configuration, io.vertx.core.Vertx vertx) {
                super(FDebtItem.F_DEBT_ITEM, cn.vertxup.fm.domain.tables.pojos.FDebtItem.class, new JDBCClassicQueryExecutor<FDebtItemRecord,cn.vertxup.fm.domain.tables.pojos.FDebtItem,String>(configuration,cn.vertxup.fm.domain.tables.pojos.FDebtItem.class,vertx));
        }

        @Override
        protected String getId(cn.vertxup.fm.domain.tables.pojos.FDebtItem object) {
                return object.getKey();
        }

        /**
     * Find records that have <code>NAME IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FDebtItem>> findManyByName(Collection<String> values) {
                return findManyByCondition(FDebtItem.F_DEBT_ITEM.NAME.in(values));
        }

        /**
     * Find records that have <code>NAME IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FDebtItem>> findManyByName(Collection<String> values, int limit) {
                return findManyByCondition(FDebtItem.F_DEBT_ITEM.NAME.in(values),limit);
        }

        /**
     * Find records that have <code>CODE IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FDebtItem>> findManyByCode(Collection<String> values) {
                return findManyByCondition(FDebtItem.F_DEBT_ITEM.CODE.in(values));
        }

        /**
     * Find records that have <code>CODE IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FDebtItem>> findManyByCode(Collection<String> values, int limit) {
                return findManyByCondition(FDebtItem.F_DEBT_ITEM.CODE.in(values),limit);
        }

        /**
     * Find records that have <code>SERIAL IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FDebtItem>> findManyBySerial(Collection<String> values) {
                return findManyByCondition(FDebtItem.F_DEBT_ITEM.SERIAL.in(values));
        }

        /**
     * Find records that have <code>SERIAL IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FDebtItem>> findManyBySerial(Collection<String> values, int limit) {
                return findManyByCondition(FDebtItem.F_DEBT_ITEM.SERIAL.in(values),limit);
        }

        /**
     * Find records that have <code>AMOUNT IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FDebtItem>> findManyByAmount(Collection<BigDecimal> values) {
                return findManyByCondition(FDebtItem.F_DEBT_ITEM.AMOUNT.in(values));
        }

        /**
     * Find records that have <code>AMOUNT IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FDebtItem>> findManyByAmount(Collection<BigDecimal> values, int limit) {
                return findManyByCondition(FDebtItem.F_DEBT_ITEM.AMOUNT.in(values),limit);
        }

        /**
     * Find records that have <code>DEBT_ID IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FDebtItem>> findManyByDebtId(Collection<String> values) {
                return findManyByCondition(FDebtItem.F_DEBT_ITEM.DEBT_ID.in(values));
        }

        /**
     * Find records that have <code>DEBT_ID IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FDebtItem>> findManyByDebtId(Collection<String> values, int limit) {
                return findManyByCondition(FDebtItem.F_DEBT_ITEM.DEBT_ID.in(values),limit);
        }

        /**
     * Find records that have <code>PAYMENT_ID IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FDebtItem>> findManyByPaymentId(Collection<String> values) {
                return findManyByCondition(FDebtItem.F_DEBT_ITEM.PAYMENT_ID.in(values));
        }

        /**
     * Find records that have <code>PAYMENT_ID IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FDebtItem>> findManyByPaymentId(Collection<String> values, int limit) {
                return findManyByCondition(FDebtItem.F_DEBT_ITEM.PAYMENT_ID.in(values),limit);
        }

        /**
     * Find records that have <code>SIGMA IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FDebtItem>> findManyBySigma(Collection<String> values) {
                return findManyByCondition(FDebtItem.F_DEBT_ITEM.SIGMA.in(values));
        }

        /**
     * Find records that have <code>SIGMA IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FDebtItem>> findManyBySigma(Collection<String> values, int limit) {
                return findManyByCondition(FDebtItem.F_DEBT_ITEM.SIGMA.in(values),limit);
        }

        /**
     * Find records that have <code>LANGUAGE IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FDebtItem>> findManyByLanguage(Collection<String> values) {
                return findManyByCondition(FDebtItem.F_DEBT_ITEM.LANGUAGE.in(values));
        }

        /**
     * Find records that have <code>LANGUAGE IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FDebtItem>> findManyByLanguage(Collection<String> values, int limit) {
                return findManyByCondition(FDebtItem.F_DEBT_ITEM.LANGUAGE.in(values),limit);
        }

        /**
     * Find records that have <code>ACTIVE IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FDebtItem>> findManyByActive(Collection<Boolean> values) {
                return findManyByCondition(FDebtItem.F_DEBT_ITEM.ACTIVE.in(values));
        }

        /**
     * Find records that have <code>ACTIVE IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FDebtItem>> findManyByActive(Collection<Boolean> values, int limit) {
                return findManyByCondition(FDebtItem.F_DEBT_ITEM.ACTIVE.in(values),limit);
        }

        /**
     * Find records that have <code>METADATA IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FDebtItem>> findManyByMetadata(Collection<String> values) {
                return findManyByCondition(FDebtItem.F_DEBT_ITEM.METADATA.in(values));
        }

        /**
     * Find records that have <code>METADATA IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FDebtItem>> findManyByMetadata(Collection<String> values, int limit) {
                return findManyByCondition(FDebtItem.F_DEBT_ITEM.METADATA.in(values),limit);
        }

        /**
     * Find records that have <code>CREATED_AT IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FDebtItem>> findManyByCreatedAt(Collection<LocalDateTime> values) {
                return findManyByCondition(FDebtItem.F_DEBT_ITEM.CREATED_AT.in(values));
        }

        /**
     * Find records that have <code>CREATED_AT IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FDebtItem>> findManyByCreatedAt(Collection<LocalDateTime> values, int limit) {
                return findManyByCondition(FDebtItem.F_DEBT_ITEM.CREATED_AT.in(values),limit);
        }

        /**
     * Find records that have <code>CREATED_BY IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FDebtItem>> findManyByCreatedBy(Collection<String> values) {
                return findManyByCondition(FDebtItem.F_DEBT_ITEM.CREATED_BY.in(values));
        }

        /**
     * Find records that have <code>CREATED_BY IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FDebtItem>> findManyByCreatedBy(Collection<String> values, int limit) {
                return findManyByCondition(FDebtItem.F_DEBT_ITEM.CREATED_BY.in(values),limit);
        }

        /**
     * Find records that have <code>UPDATED_AT IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FDebtItem>> findManyByUpdatedAt(Collection<LocalDateTime> values) {
                return findManyByCondition(FDebtItem.F_DEBT_ITEM.UPDATED_AT.in(values));
        }

        /**
     * Find records that have <code>UPDATED_AT IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FDebtItem>> findManyByUpdatedAt(Collection<LocalDateTime> values, int limit) {
                return findManyByCondition(FDebtItem.F_DEBT_ITEM.UPDATED_AT.in(values),limit);
        }

        /**
     * Find records that have <code>UPDATED_BY IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FDebtItem>> findManyByUpdatedBy(Collection<String> values) {
                return findManyByCondition(FDebtItem.F_DEBT_ITEM.UPDATED_BY.in(values));
        }

        /**
     * Find records that have <code>UPDATED_BY IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FDebtItem>> findManyByUpdatedBy(Collection<String> values, int limit) {
                return findManyByCondition(FDebtItem.F_DEBT_ITEM.UPDATED_BY.in(values),limit);
        }

        @Override
        public JDBCClassicQueryExecutor<FDebtItemRecord,cn.vertxup.fm.domain.tables.pojos.FDebtItem,String> queryExecutor(){
                return (JDBCClassicQueryExecutor<FDebtItemRecord,cn.vertxup.fm.domain.tables.pojos.FDebtItem,String>) super.queryExecutor();
        }
}
