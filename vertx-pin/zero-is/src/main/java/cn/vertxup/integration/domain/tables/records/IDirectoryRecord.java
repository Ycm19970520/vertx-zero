/*
 * This file is generated by jOOQ.
 */
package cn.vertxup.integration.domain.tables.records;


import cn.vertxup.integration.domain.tables.IDirectory;
import cn.vertxup.integration.domain.tables.interfaces.IIDirectory;

import io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo;

import java.time.LocalDateTime;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record22;
import org.jooq.Row22;
import org.jooq.impl.UpdatableRecordImpl;


import static io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo.*;
/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class IDirectoryRecord extends UpdatableRecordImpl<IDirectoryRecord> implements VertxPojo, Record22<String, String, String, String, String, String, String, String, String, Boolean, String, String, String, String, String, String, Boolean, String, LocalDateTime, String, LocalDateTime, String>, IIDirectory {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>DB_ETERNAL.I_DIRECTORY.KEY</code>. 「key」- 目录主键
     */
    @Override
    public IDirectoryRecord setKey(String value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.I_DIRECTORY.KEY</code>. 「key」- 目录主键
     */
    @Override
    public String getKey() {
        return (String) get(0);
    }

    /**
     * Setter for <code>DB_ETERNAL.I_DIRECTORY.NAME</code>. 「name」- 目录名称
     */
    @Override
    public IDirectoryRecord setName(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.I_DIRECTORY.NAME</code>. 「name」- 目录名称
     */
    @Override
    public String getName() {
        return (String) get(1);
    }

    /**
     * Setter for <code>DB_ETERNAL.I_DIRECTORY.CODE</code>. 「code」- 目录编号
     */
    @Override
    public IDirectoryRecord setCode(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.I_DIRECTORY.CODE</code>. 「code」- 目录编号
     */
    @Override
    public String getCode() {
        return (String) get(2);
    }

    /**
     * Setter for <code>DB_ETERNAL.I_DIRECTORY.STORE_PATH</code>. 「storePath」-
     * 目录根路径
     */
    @Override
    public IDirectoryRecord setStorePath(String value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.I_DIRECTORY.STORE_PATH</code>. 「storePath」-
     * 目录根路径
     */
    @Override
    public String getStorePath() {
        return (String) get(3);
    }

    /**
     * Setter for <code>DB_ETERNAL.I_DIRECTORY.PARENT_ID</code>. 「parentId」-
     * 父目录ID
     */
    @Override
    public IDirectoryRecord setParentId(String value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.I_DIRECTORY.PARENT_ID</code>. 「parentId」-
     * 父目录ID
     */
    @Override
    public String getParentId() {
        return (String) get(4);
    }

    /**
     * Setter for <code>DB_ETERNAL.I_DIRECTORY.CATEGORY</code>. 「category」-
     * 目录连接的类型树
     */
    @Override
    public IDirectoryRecord setCategory(String value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.I_DIRECTORY.CATEGORY</code>. 「category」-
     * 目录连接的类型树
     */
    @Override
    public String getCategory() {
        return (String) get(5);
    }

    /**
     * Setter for <code>DB_ETERNAL.I_DIRECTORY.TYPE</code>. 「type」- 目录类型：ROOT /
     * STORE
     */
    @Override
    public IDirectoryRecord setType(String value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.I_DIRECTORY.TYPE</code>. 「type」- 目录类型：ROOT /
     * STORE
     */
    @Override
    public String getType() {
        return (String) get(6);
    }

    /**
     * Setter for <code>DB_ETERNAL.I_DIRECTORY.OWNER</code>. 「owner」- 目录访问人
     */
    @Override
    public IDirectoryRecord setOwner(String value) {
        set(7, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.I_DIRECTORY.OWNER</code>. 「owner」- 目录访问人
     */
    @Override
    public String getOwner() {
        return (String) get(7);
    }

    /**
     * Setter for <code>DB_ETERNAL.I_DIRECTORY.RUN_COMPONENT</code>.
     * 「runComponent」- 目录执行组件，抓文件专用
     */
    @Override
    public IDirectoryRecord setRunComponent(String value) {
        set(8, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.I_DIRECTORY.RUN_COMPONENT</code>.
     * 「runComponent」- 目录执行组件，抓文件专用
     */
    @Override
    public String getRunComponent() {
        return (String) get(8);
    }

    /**
     * Setter for <code>DB_ETERNAL.I_DIRECTORY.VISIT</code>. 「visit」- 公有 / 私有
     */
    @Override
    public IDirectoryRecord setVisit(Boolean value) {
        set(9, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.I_DIRECTORY.VISIT</code>. 「visit」- 公有 / 私有
     */
    @Override
    public Boolean getVisit() {
        return (Boolean) get(9);
    }

    /**
     * Setter for <code>DB_ETERNAL.I_DIRECTORY.VISIT_MODE</code>. 「visitMode」-
     * 目录模式：只读 / 可写，以后扩展为其他
     */
    @Override
    public IDirectoryRecord setVisitMode(String value) {
        set(10, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.I_DIRECTORY.VISIT_MODE</code>. 「visitMode」-
     * 目录模式：只读 / 可写，以后扩展为其他
     */
    @Override
    public String getVisitMode() {
        return (String) get(10);
    }

    /**
     * Setter for <code>DB_ETERNAL.I_DIRECTORY.VISIT_USER</code>. 「visitUser」-
     * 目录访问者
     */
    @Override
    public IDirectoryRecord setVisitUser(String value) {
        set(11, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.I_DIRECTORY.VISIT_USER</code>. 「visitUser」-
     * 目录访问者
     */
    @Override
    public String getVisitUser() {
        return (String) get(11);
    }

    /**
     * Setter for <code>DB_ETERNAL.I_DIRECTORY.VISIT_GROUP</code>. 「visitGroup」-
     * 目录访问组
     */
    @Override
    public IDirectoryRecord setVisitGroup(String value) {
        set(12, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.I_DIRECTORY.VISIT_GROUP</code>. 「visitGroup」-
     * 目录访问组
     */
    @Override
    public String getVisitGroup() {
        return (String) get(12);
    }

    /**
     * Setter for <code>DB_ETERNAL.I_DIRECTORY.VISIT_COMPONENT</code>.
     * 「visitComponent」- 目录访问控制专用组件
     */
    @Override
    public IDirectoryRecord setVisitComponent(String value) {
        set(13, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.I_DIRECTORY.VISIT_COMPONENT</code>.
     * 「visitComponent」- 目录访问控制专用组件
     */
    @Override
    public String getVisitComponent() {
        return (String) get(13);
    }

    /**
     * Setter for <code>DB_ETERNAL.I_DIRECTORY.SIGMA</code>. 「sigma」- 统一标识
     */
    @Override
    public IDirectoryRecord setSigma(String value) {
        set(14, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.I_DIRECTORY.SIGMA</code>. 「sigma」- 统一标识
     */
    @Override
    public String getSigma() {
        return (String) get(14);
    }

    /**
     * Setter for <code>DB_ETERNAL.I_DIRECTORY.LANGUAGE</code>. 「language」-
     * 使用的语言
     */
    @Override
    public IDirectoryRecord setLanguage(String value) {
        set(15, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.I_DIRECTORY.LANGUAGE</code>. 「language」-
     * 使用的语言
     */
    @Override
    public String getLanguage() {
        return (String) get(15);
    }

    /**
     * Setter for <code>DB_ETERNAL.I_DIRECTORY.ACTIVE</code>. 「active」- 是否启用
     */
    @Override
    public IDirectoryRecord setActive(Boolean value) {
        set(16, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.I_DIRECTORY.ACTIVE</code>. 「active」- 是否启用
     */
    @Override
    public Boolean getActive() {
        return (Boolean) get(16);
    }

    /**
     * Setter for <code>DB_ETERNAL.I_DIRECTORY.METADATA</code>. 「metadata」-
     * 附加配置数据
     */
    @Override
    public IDirectoryRecord setMetadata(String value) {
        set(17, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.I_DIRECTORY.METADATA</code>. 「metadata」-
     * 附加配置数据
     */
    @Override
    public String getMetadata() {
        return (String) get(17);
    }

    /**
     * Setter for <code>DB_ETERNAL.I_DIRECTORY.CREATED_AT</code>. 「createdAt」-
     * 创建时间
     */
    @Override
    public IDirectoryRecord setCreatedAt(LocalDateTime value) {
        set(18, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.I_DIRECTORY.CREATED_AT</code>. 「createdAt」-
     * 创建时间
     */
    @Override
    public LocalDateTime getCreatedAt() {
        return (LocalDateTime) get(18);
    }

    /**
     * Setter for <code>DB_ETERNAL.I_DIRECTORY.CREATED_BY</code>. 「createdBy」-
     * 创建人
     */
    @Override
    public IDirectoryRecord setCreatedBy(String value) {
        set(19, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.I_DIRECTORY.CREATED_BY</code>. 「createdBy」-
     * 创建人
     */
    @Override
    public String getCreatedBy() {
        return (String) get(19);
    }

    /**
     * Setter for <code>DB_ETERNAL.I_DIRECTORY.UPDATED_AT</code>. 「updatedAt」-
     * 更新时间
     */
    @Override
    public IDirectoryRecord setUpdatedAt(LocalDateTime value) {
        set(20, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.I_DIRECTORY.UPDATED_AT</code>. 「updatedAt」-
     * 更新时间
     */
    @Override
    public LocalDateTime getUpdatedAt() {
        return (LocalDateTime) get(20);
    }

    /**
     * Setter for <code>DB_ETERNAL.I_DIRECTORY.UPDATED_BY</code>. 「updatedBy」-
     * 更新人
     */
    @Override
    public IDirectoryRecord setUpdatedBy(String value) {
        set(21, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.I_DIRECTORY.UPDATED_BY</code>. 「updatedBy」-
     * 更新人
     */
    @Override
    public String getUpdatedBy() {
        return (String) get(21);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<String> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record22 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row22<String, String, String, String, String, String, String, String, String, Boolean, String, String, String, String, String, String, Boolean, String, LocalDateTime, String, LocalDateTime, String> fieldsRow() {
        return (Row22) super.fieldsRow();
    }

    @Override
    public Row22<String, String, String, String, String, String, String, String, String, Boolean, String, String, String, String, String, String, Boolean, String, LocalDateTime, String, LocalDateTime, String> valuesRow() {
        return (Row22) super.valuesRow();
    }

    @Override
    public Field<String> field1() {
        return IDirectory.I_DIRECTORY.KEY;
    }

    @Override
    public Field<String> field2() {
        return IDirectory.I_DIRECTORY.NAME;
    }

    @Override
    public Field<String> field3() {
        return IDirectory.I_DIRECTORY.CODE;
    }

    @Override
    public Field<String> field4() {
        return IDirectory.I_DIRECTORY.STORE_PATH;
    }

    @Override
    public Field<String> field5() {
        return IDirectory.I_DIRECTORY.PARENT_ID;
    }

    @Override
    public Field<String> field6() {
        return IDirectory.I_DIRECTORY.CATEGORY;
    }

    @Override
    public Field<String> field7() {
        return IDirectory.I_DIRECTORY.TYPE;
    }

    @Override
    public Field<String> field8() {
        return IDirectory.I_DIRECTORY.OWNER;
    }

    @Override
    public Field<String> field9() {
        return IDirectory.I_DIRECTORY.RUN_COMPONENT;
    }

    @Override
    public Field<Boolean> field10() {
        return IDirectory.I_DIRECTORY.VISIT;
    }

    @Override
    public Field<String> field11() {
        return IDirectory.I_DIRECTORY.VISIT_MODE;
    }

    @Override
    public Field<String> field12() {
        return IDirectory.I_DIRECTORY.VISIT_USER;
    }

    @Override
    public Field<String> field13() {
        return IDirectory.I_DIRECTORY.VISIT_GROUP;
    }

    @Override
    public Field<String> field14() {
        return IDirectory.I_DIRECTORY.VISIT_COMPONENT;
    }

    @Override
    public Field<String> field15() {
        return IDirectory.I_DIRECTORY.SIGMA;
    }

    @Override
    public Field<String> field16() {
        return IDirectory.I_DIRECTORY.LANGUAGE;
    }

    @Override
    public Field<Boolean> field17() {
        return IDirectory.I_DIRECTORY.ACTIVE;
    }

    @Override
    public Field<String> field18() {
        return IDirectory.I_DIRECTORY.METADATA;
    }

    @Override
    public Field<LocalDateTime> field19() {
        return IDirectory.I_DIRECTORY.CREATED_AT;
    }

    @Override
    public Field<String> field20() {
        return IDirectory.I_DIRECTORY.CREATED_BY;
    }

    @Override
    public Field<LocalDateTime> field21() {
        return IDirectory.I_DIRECTORY.UPDATED_AT;
    }

    @Override
    public Field<String> field22() {
        return IDirectory.I_DIRECTORY.UPDATED_BY;
    }

    @Override
    public String component1() {
        return getKey();
    }

    @Override
    public String component2() {
        return getName();
    }

    @Override
    public String component3() {
        return getCode();
    }

    @Override
    public String component4() {
        return getStorePath();
    }

    @Override
    public String component5() {
        return getParentId();
    }

    @Override
    public String component6() {
        return getCategory();
    }

    @Override
    public String component7() {
        return getType();
    }

    @Override
    public String component8() {
        return getOwner();
    }

    @Override
    public String component9() {
        return getRunComponent();
    }

    @Override
    public Boolean component10() {
        return getVisit();
    }

    @Override
    public String component11() {
        return getVisitMode();
    }

    @Override
    public String component12() {
        return getVisitUser();
    }

    @Override
    public String component13() {
        return getVisitGroup();
    }

    @Override
    public String component14() {
        return getVisitComponent();
    }

    @Override
    public String component15() {
        return getSigma();
    }

    @Override
    public String component16() {
        return getLanguage();
    }

    @Override
    public Boolean component17() {
        return getActive();
    }

    @Override
    public String component18() {
        return getMetadata();
    }

    @Override
    public LocalDateTime component19() {
        return getCreatedAt();
    }

    @Override
    public String component20() {
        return getCreatedBy();
    }

    @Override
    public LocalDateTime component21() {
        return getUpdatedAt();
    }

    @Override
    public String component22() {
        return getUpdatedBy();
    }

    @Override
    public String value1() {
        return getKey();
    }

    @Override
    public String value2() {
        return getName();
    }

    @Override
    public String value3() {
        return getCode();
    }

    @Override
    public String value4() {
        return getStorePath();
    }

    @Override
    public String value5() {
        return getParentId();
    }

    @Override
    public String value6() {
        return getCategory();
    }

    @Override
    public String value7() {
        return getType();
    }

    @Override
    public String value8() {
        return getOwner();
    }

    @Override
    public String value9() {
        return getRunComponent();
    }

    @Override
    public Boolean value10() {
        return getVisit();
    }

    @Override
    public String value11() {
        return getVisitMode();
    }

    @Override
    public String value12() {
        return getVisitUser();
    }

    @Override
    public String value13() {
        return getVisitGroup();
    }

    @Override
    public String value14() {
        return getVisitComponent();
    }

    @Override
    public String value15() {
        return getSigma();
    }

    @Override
    public String value16() {
        return getLanguage();
    }

    @Override
    public Boolean value17() {
        return getActive();
    }

    @Override
    public String value18() {
        return getMetadata();
    }

    @Override
    public LocalDateTime value19() {
        return getCreatedAt();
    }

    @Override
    public String value20() {
        return getCreatedBy();
    }

    @Override
    public LocalDateTime value21() {
        return getUpdatedAt();
    }

    @Override
    public String value22() {
        return getUpdatedBy();
    }

    @Override
    public IDirectoryRecord value1(String value) {
        setKey(value);
        return this;
    }

    @Override
    public IDirectoryRecord value2(String value) {
        setName(value);
        return this;
    }

    @Override
    public IDirectoryRecord value3(String value) {
        setCode(value);
        return this;
    }

    @Override
    public IDirectoryRecord value4(String value) {
        setStorePath(value);
        return this;
    }

    @Override
    public IDirectoryRecord value5(String value) {
        setParentId(value);
        return this;
    }

    @Override
    public IDirectoryRecord value6(String value) {
        setCategory(value);
        return this;
    }

    @Override
    public IDirectoryRecord value7(String value) {
        setType(value);
        return this;
    }

    @Override
    public IDirectoryRecord value8(String value) {
        setOwner(value);
        return this;
    }

    @Override
    public IDirectoryRecord value9(String value) {
        setRunComponent(value);
        return this;
    }

    @Override
    public IDirectoryRecord value10(Boolean value) {
        setVisit(value);
        return this;
    }

    @Override
    public IDirectoryRecord value11(String value) {
        setVisitMode(value);
        return this;
    }

    @Override
    public IDirectoryRecord value12(String value) {
        setVisitUser(value);
        return this;
    }

    @Override
    public IDirectoryRecord value13(String value) {
        setVisitGroup(value);
        return this;
    }

    @Override
    public IDirectoryRecord value14(String value) {
        setVisitComponent(value);
        return this;
    }

    @Override
    public IDirectoryRecord value15(String value) {
        setSigma(value);
        return this;
    }

    @Override
    public IDirectoryRecord value16(String value) {
        setLanguage(value);
        return this;
    }

    @Override
    public IDirectoryRecord value17(Boolean value) {
        setActive(value);
        return this;
    }

    @Override
    public IDirectoryRecord value18(String value) {
        setMetadata(value);
        return this;
    }

    @Override
    public IDirectoryRecord value19(LocalDateTime value) {
        setCreatedAt(value);
        return this;
    }

    @Override
    public IDirectoryRecord value20(String value) {
        setCreatedBy(value);
        return this;
    }

    @Override
    public IDirectoryRecord value21(LocalDateTime value) {
        setUpdatedAt(value);
        return this;
    }

    @Override
    public IDirectoryRecord value22(String value) {
        setUpdatedBy(value);
        return this;
    }

    @Override
    public IDirectoryRecord values(String value1, String value2, String value3, String value4, String value5, String value6, String value7, String value8, String value9, Boolean value10, String value11, String value12, String value13, String value14, String value15, String value16, Boolean value17, String value18, LocalDateTime value19, String value20, LocalDateTime value21, String value22) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        value9(value9);
        value10(value10);
        value11(value11);
        value12(value12);
        value13(value13);
        value14(value14);
        value15(value15);
        value16(value16);
        value17(value17);
        value18(value18);
        value19(value19);
        value20(value20);
        value21(value21);
        value22(value22);
        return this;
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    @Override
    public void from(IIDirectory from) {
        setKey(from.getKey());
        setName(from.getName());
        setCode(from.getCode());
        setStorePath(from.getStorePath());
        setParentId(from.getParentId());
        setCategory(from.getCategory());
        setType(from.getType());
        setOwner(from.getOwner());
        setRunComponent(from.getRunComponent());
        setVisit(from.getVisit());
        setVisitMode(from.getVisitMode());
        setVisitUser(from.getVisitUser());
        setVisitGroup(from.getVisitGroup());
        setVisitComponent(from.getVisitComponent());
        setSigma(from.getSigma());
        setLanguage(from.getLanguage());
        setActive(from.getActive());
        setMetadata(from.getMetadata());
        setCreatedAt(from.getCreatedAt());
        setCreatedBy(from.getCreatedBy());
        setUpdatedAt(from.getUpdatedAt());
        setUpdatedBy(from.getUpdatedBy());
    }

    @Override
    public <E extends IIDirectory> E into(E into) {
        into.from(this);
        return into;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached IDirectoryRecord
     */
    public IDirectoryRecord() {
        super(IDirectory.I_DIRECTORY);
    }

    /**
     * Create a detached, initialised IDirectoryRecord
     */
    public IDirectoryRecord(String key, String name, String code, String storePath, String parentId, String category, String type, String owner, String runComponent, Boolean visit, String visitMode, String visitUser, String visitGroup, String visitComponent, String sigma, String language, Boolean active, String metadata, LocalDateTime createdAt, String createdBy, LocalDateTime updatedAt, String updatedBy) {
        super(IDirectory.I_DIRECTORY);

        setKey(key);
        setName(name);
        setCode(code);
        setStorePath(storePath);
        setParentId(parentId);
        setCategory(category);
        setType(type);
        setOwner(owner);
        setRunComponent(runComponent);
        setVisit(visit);
        setVisitMode(visitMode);
        setVisitUser(visitUser);
        setVisitGroup(visitGroup);
        setVisitComponent(visitComponent);
        setSigma(sigma);
        setLanguage(language);
        setActive(active);
        setMetadata(metadata);
        setCreatedAt(createdAt);
        setCreatedBy(createdBy);
        setUpdatedAt(updatedAt);
        setUpdatedBy(updatedBy);
    }

    /**
     * Create a detached, initialised IDirectoryRecord
     */
    public IDirectoryRecord(cn.vertxup.integration.domain.tables.pojos.IDirectory value) {
        super(IDirectory.I_DIRECTORY);

        if (value != null) {
            setKey(value.getKey());
            setName(value.getName());
            setCode(value.getCode());
            setStorePath(value.getStorePath());
            setParentId(value.getParentId());
            setCategory(value.getCategory());
            setType(value.getType());
            setOwner(value.getOwner());
            setRunComponent(value.getRunComponent());
            setVisit(value.getVisit());
            setVisitMode(value.getVisitMode());
            setVisitUser(value.getVisitUser());
            setVisitGroup(value.getVisitGroup());
            setVisitComponent(value.getVisitComponent());
            setSigma(value.getSigma());
            setLanguage(value.getLanguage());
            setActive(value.getActive());
            setMetadata(value.getMetadata());
            setCreatedAt(value.getCreatedAt());
            setCreatedBy(value.getCreatedBy());
            setUpdatedAt(value.getUpdatedAt());
            setUpdatedBy(value.getUpdatedBy());
        }
    }

        public IDirectoryRecord(io.vertx.core.json.JsonObject json) {
                this();
                fromJson(json);
        }
}
